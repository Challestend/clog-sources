<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CLT&#39;S BLOG</title>
  
  <subtitle>QAQ</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/Challestend/"/>
  <updated>2019-02-23T04:45:34.954Z</updated>
  <id>https://github.com/Challestend/</id>
  
  <author>
    <name>Challestend Rehtorbegnaro</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「网络流学习笔记Part II」总之XJB写点啥（</title>
    <link href="https://github.com/Challestend/network-flow-learning-notes-pt2/"/>
    <id>https://github.com/Challestend/network-flow-learning-notes-pt2/</id>
    <published>2019-02-21T09:37:23.000Z</published>
    <updated>2019-02-23T04:45:34.954Z</updated>
    
    <content type="html"><![CDATA[<p>Part I大概是<a href="/something-about-network-flow-learning-notes/">这篇</a>。</p><p>去郑州的时候讲的网络流部分。</p><p>什么你说游记？咕咕咕。</p><a id="more"></a><h3 id="一种似乎没有名字的二元组模型"><a href="#一种似乎没有名字的二元组模型" class="headerlink" title="一种似乎没有名字的二元组模型"></a>一种似乎没有名字的二元组模型</h3><h4 id="简化版"><a href="#简化版" class="headerlink" title="简化版"></a>简化版</h4><p>你有两台机器和$n$个任务。用第一台机器完成第$i$个任务需要付出$a_{i}$的代价，用第二台完成需要$b_{i}$的代价。你有$m$个三元组<del>（虽然说不是标题说的二元组不过不要在意这些细节）</del>，每一个三元组形如$(x,y,c)$，意思是如果$x$和$y$两个任务在不同的机器上完成需要额外付出$c$的代价。你需要完成这$n$个任务，并最小化代价和。</p><p>我们都知道最小割=最大流。因此在一些题目中，如果无法将问题抽象成最大流问题，我们可以试着抽象成最小割问题。</p><p>对于任务$i$，连边$(S,i,a_{i}),(i,T,b_{i})$。对于一个三元组$(x,y,c)$，连边$(x,y,c),(y,x,c)$。</p><p>割断$(S,i,a_{i})$意味着任务$i$在第一台机器上完成，割断$(i,T,b_{i})$意味着任务$i$在第二台机器上完成。</p><p>首先很明显的是，同时割断$(S,i,a_{i})$和$(i,T,b_{i})$一定不是最优的决策。因此一个任务只会在一台机器上被完成。</p><p>对于一个三元组$(x,y,c)$，如果我们同时割断$(S,x,a_{x})$和$(S,y,a_{y})$，$S$与$T$直接就断开了，这样我们的代价是$a_{x}+a_{y}$。同时割断$(x,T,b_{x})$和$(y,T,b_{y})$也是类似的。</p><p>如果说我们同时割断$(S,x,a_{x})$和$(y,T,b_{y})$，图上仍存在$\{(S,y,a_{y}),(y,x,c),(x,T,b_{x})\}$这样一条路径，我们还需要割断$(y,x,c)$，这样我们的代价是$a_{x}+b_{y}+c$。同时割断$(x,T,b_{x})$和$(S,y,a_{y})$也是类似的。</p><h4 id="一般化"><a href="#一般化" class="headerlink" title="一般化"></a>一般化</h4><p>你有两台机器和$n$个任务。用第一台机器完成第$i$个任务需要付出$a_{i}$的代价，用第二台完成需要$b_{i}$的代价。你有$m$个六元组，每一个六元组形如$(x,y,c_{1},c_{2},c_{3},c_{4})$，意思是你需要为$x$和$y$这两个任务付出一些额外代价：</p><ul><li>如果任务$x$在第一台机器上完成，任务$y$在第一台机器上完成，这个额外代价是$c_{1}$。</li><li>如果任务$x$在第二台机器上完成，任务$y$在第二台机器上完成，这个额外代价是$c_{2}$。</li><li>如果任务$x$在第一台机器上完成，任务$y$在第二台机器上完成，这个额外代价是$c_{3}$。</li><li>如果任务$x$在第二台机器上完成，任务$y$在第一台机器上完成，这个额外代价是$c_{4}$。</li></ul><p>你需要完成这$n$个任务，并最小化代价和。</p><p>首先仍然是连边$(S,i,a_{i}),(i,T,b_{i})$。对于每一个六元组，连边$(S,x,A),(S,y,B),(x,T,C),(y,T,D),(x,y,E),(y,x,F)$。我们发现</p><ul><li>如果任务$x$在第一台机器上完成，任务$y$在第一台机器上完成，我们需要割断$(S,x,A),(S,y,B)$，付出$A+B$的代价。</li><li>如果任务$x$在第二台机器上完成，任务$y$在第二台机器上完成，我们需要割断$(x,T,C),(y,T,D)$，付出$C+D$的代价。</li><li>如果任务$x$在第一台机器上完成，任务$y$在第二台机器上完成，我们需要割断$(S,x,A),(y,T,D),(y,x,F)$，付出$A+D+F$的代价。</li><li>如果任务$x$在第二台机器上完成，任务$y$在第一台机器上完成，我们需要割断$(S,y,B),(x,T,C),(x,y,E)$，付出$B+C+E$的代价。</li></ul><p>因此我们列出如下的方程组</p><script type="math/tex; mode=display">\begin{cases}&A+B=c_{1}&(1)\\&C+D=c_{2}&(2)\\&A+D+F=c_{3}\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;&(3)\\&B+C+E=c_{4}&(4)\end{cases}</script><p>因为我们要将问题转化成最大流问题，首先想到，我们要有$A,B,C,D,E,F\geqslant 0$。注意到，$(S,x,A)$和$(x,T,C)$中有且仅有一条边会出现在最小割集中，因此我们可以将$A$和$C$同时加上一个数，求出最小割后在答案中减去。$B$和$D$也可以类似处理。</p><p>需要注意的是，$E$和$F$不能被这样处理，因为我们不能确定它们在答案中产生了几次贡献。</p><p>$(3)+(4)-(1)-(2)$，我们得到</p><script type="math/tex; mode=display">E+F=c_{3}+c_{4}-c_{1}-c_{2}</script><p>定义$K=c_{3}+c_{4}-c_{1}-c_{2}$，当$K\geqslant 0$时它有意义，我们直接令$E=F=\cfrac{K}{2}$即可。</p><p>剩下的四个量随便给几个值，好算就行。</p><p>其实就算$K\lt 0$有时也是可以做的，但是我太菜了不会（</p><p>因为太菜了所以没有图（</p><h4 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h4><h5 id="「国家集训队」happiness"><a href="#「国家集训队」happiness" class="headerlink" title="「国家集训队」happiness"></a><a href="https://www.luogu.org/problemnew/show/P1646" target="_blank" rel="noopener">「国家集训队」happiness</a></h5><p>题目要求最大化总收益，我们可以先将所有数取相反数，然后最小化总代价。</p><p>令位置$i$选文的单独收益是$a_{i}$，选理的单独收益是$b_{i}$，连边$(S,i,-a_{i}),(i,T,-b_{i})$。</p><p>考虑一对相邻的位置，他们都选文的额外收益是$v_{1}$，都选理的额外收益是$v_{2}$，列出方程组</p><script type="math/tex; mode=display">\begin{cases}&A+B=-v_{1}\\&C+D=-v_{2}\\&A+D+E=0\\&B+C+E=0\end{cases}\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\begin{cases}&A=-\cfrac{v_{1}}{2}\\&B=-\cfrac{v_{1}}{2}\\&C=-\cfrac{v_{2}}{2}\\&D=-\cfrac{v_{2}}{2}\\&E=\cfrac{v_{1}+v_{2}}{2}\end{cases}</script><p>为了避免浮点数，我们把上面所有边的容量乘以$2$，包括$(S,i,-a_{i}),(i,T,-b_{i})$，最后再除回来。</p><p>然后，为了避免负数，我们将$A,B,C,D$加上$v_{1}+v_{2}$，把边$(S,i,-2a_{i}),(i,T,-2b_{i})$的容量加上$2a_{i}+2b_{i}$，最后再减回来。</p><p>总结一下就是，对于一个位置$i$，连边$(S,i,2b_{i}),(i,T,2a_{i})$。对于一对相邻位置$x,y$，连边$(S,x,v_{2}),(S,y,v_{2}),(x,T,v_{1}),(y,T,v_{1}),(x,y,v_{1}+v_{2}),(y,x,v_{1}+v_{2})$。</p><script type="math/tex; mode=display">\text{Ans}=\sum(a_{i}+b_{i})+\sum(v_{1}+v_{2})-\cfrac{\text{MinCut}(S,T)}{2}</script><p>但是我的<a href="https://www.luogu.org/recordnew/show/16563258" target="_blank" rel="noopener">代码</a>不知道为什么写炸了（</p><p>反正这个式子应该是没问题的（</p><p>那么告辞吧（</p><h3 id="闭合子图"><a href="#闭合子图" class="headerlink" title="闭合子图"></a>闭合子图</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>对于一个有向图$G$，它的一个闭合子图指的是一个顶点集合$V$，满足$V\subset G$，且</p><script type="math/tex; mode=display">\forall u\in V\wedge(u,v)\in G,v\in V</script><p>其中$|V|$最大的$V$被称为$G$的最大闭合子图。</p><p>如果$G$中的点有点权，$\sum_{u\in V}w(u)$最大的$V$被称为$G$的最大权闭合子图。</p><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><p>首先，我们还是需要将所有点权取相反数，转为求最小权闭合子图。</p><p>对于$G$中的一个点$x$，割断与$S$之间的边表示$x\notin V$，割断与$T$之间的边表示$x\in V$。对于$G$中的一条边$(x,y)$，如果$x\in V$，那么一定有$y\in V$。我们可以认为，如果令$x\in V$，$y\notin V$，需要付出$+\infty$的代价。由此列出方程组</p><script type="math/tex; mode=display">\begin{cases}&A+B=0\\&C+D=-w(x)-w(y)\\&A+D+F=-w(x)\\&B+C+E=-w(y)+\infty\end{cases}\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\;\begin{cases}&A=0\\&B=0\\&C=-w(x)\\&D=-w(y)\\&E=+\infty\\&F=0\end{cases}</script><p>于是，去掉所有容量为$0$的边，我们得到$(x,T,-w(x)),(y,T,-w(y)),(x,y,+\infty)$这三条边。如果$w(x)\geqslant 0$，我们需要把边$(S,x,0),(x,T,-w(x))$的容量都加上$w(x)$，相当于是把$(x,T,-w(x))$换成了$(S,x,w(x))$。</p><p>总结一下就是，对于原图中的一个正权点$x$，连边$(S,x,w(x))$，对于原图中的一个负权点$x$，连边$(x,T,-w(x))$。对于原图中的一条边$(x,y)$，连边$(x,y,+\infty)$。</p><script type="math/tex; mode=display">\text{Ans}=\sum_{w(x)\geqslant 0}w(x)-\text{MinCut}(S,T)</script>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Part I大概是&lt;a href=&quot;/something-about-network-flow-learning-notes/&quot;&gt;这篇&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;去郑州的时候讲的网络流部分。&lt;/p&gt;
&lt;p&gt;什么你说游记？咕咕咕。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://github.com/Challestend/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="网络流" scheme="https://github.com/Challestend/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
  </entry>
  
  <entry>
    <title>「Luogu-P3613」睡觉困难综合征</title>
    <link href="https://github.com/Challestend/luogu-p3613-solution/"/>
    <id>https://github.com/Challestend/luogu-p3613-solution/</id>
    <published>2019-02-15T11:25:37.000Z</published>
    <updated>2019-02-15T12:08:18.442Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P3613" target="_blank" rel="noopener">传送门</a></p><a id="more"></a><h3 id="xjb扯"><a href="#xjb扯" class="headerlink" title="xjb扯"></a>xjb扯</h3><p>以前刚学树剖时看到这题感觉好神仙啊没法做啊。</p><p>然后现在学了LCT过来一看<del>，这不就一水题（</del></p><p>xjb写了棵LCT一交。</p><p><img src="/images/TIM截图20190215193107.png" alt=""></p><p>emmmmmm……</p><p>然后改的时候才发现全是细节错误，LCT的部分动都没动一下（</p><p>就比如说，下面是我第一次交的程序的主程序部分。</p><div><div class="fold_hider"><div class="close hider_title">Toggle Code</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">    <span class="keyword">int</span> opt,x,y;</span><br><span class="line">    cltstream::read(opt);</span><br><span class="line">    cltstream::read(x);</span><br><span class="line">    cltstream::read(y);</span><br><span class="line">    <span class="keyword">if</span>(opt==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> z;</span><br><span class="line">        <span class="comment">//我都不知道我当时是怎么想的（</span></span><br><span class="line">        cltstream::read(z);</span><br><span class="line">        split(mempool+x,mempool+y);</span><br><span class="line">        re <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ans0=(mempool+y)-&gt;ans0,ans1=(mempool+y)-&gt;ans1,ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="keyword">int</span> j=k<span class="number">-1</span>;j&gt;=<span class="number">0</span>;--j)</span><br><span class="line">            <span class="keyword">if</span>(((ans0&gt;&gt;j)&amp;<span class="number">1</span>)&gt;=((ans1&gt;&gt;j)&amp;<span class="number">1</span>)||z&lt;(<span class="number">1</span>&lt;&lt;j))</span><br><span class="line">            <span class="comment">//甚至忘了用1ULL（</span></span><br><span class="line">                ans^=ans0&amp;(<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                z-=<span class="number">1</span>&lt;&lt;j;</span><br><span class="line">                ans^=ans1&amp;(<span class="number">1</span>&lt;&lt;j);</span><br><span class="line">            &#125;</span><br><span class="line">        cltstream::write(ans,<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> z;</span><br><span class="line">        cltstream::read(z);</span><br><span class="line">        access(mempool+x);</span><br><span class="line">        (mempool+x)-&gt;tp=y;</span><br><span class="line">        (mempool+x)-&gt;val=z;</span><br><span class="line">        (mempool+y)-&gt;pushUp();</span><br><span class="line">        <span class="comment">//？？？</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p>然后我Splay节点的内部信息甚至开成了<code>unsigned</code>，excuse me？？？</p><p><del>不这个东西这不是我写的（</del></p><h3 id="真正的题解"><a href="#真正的题解" class="headerlink" title="真正的题解"></a>真正的题解</h3><p>首先LCT。</p><p>不过首先的首先您还是要先做了<a href="https://www.luogu.org/problemnew/show/P2114" target="_blank" rel="noopener">这道题</a>。</p><p>每个Splay节点维护两个值，分别是把$0$和$-1$在它所在的实链的一部分中按照深度递增的方向跑一遍得到的结果。</p><p>我们记这两个值为<code>ans0</code>和<code>ans1</code>。</p><p>左子树和节点本身的信息很好维护。</p><p>而关于右子树，看上去我们没办法迅速求出把到现在为止的<code>ans0</code>和<code>ans1</code>扔进去跑一遍的结果。</p><p>但是注意到这些都是按位运算，位与位之间不互相影响。</p><p>我们可以对于<code>ans0</code>中是$1$的那些位，提取出<code>rc-&gt;ans1</code>的对应位，对于<code>ans0</code>中是$0$的那些位，提取出<code>rc-&gt;ans0</code>的对应位。</p><p>然后<code>ans1</code>也类似处理就行了。</p><div><div class="fold_hider"><div class="close hider_title">Toggle Code</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SplayNode</span>&#123;</span></span><br><span class="line">    SplayNode *ftr,*lc,*rc;</span><br><span class="line">    <span class="keyword">int</span> tp,rev;</span><br><span class="line">    <span class="keyword">unsigned</span> val,ans0,ans1;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">apply</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tp==<span class="number">1</span>?(x&amp;val):tp==<span class="number">2</span>?(x|val):(x^val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*...*/</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushUp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ans0=<span class="number">0</span>,ans1=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>(lc!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            ans0=lc-&gt;ans0;</span><br><span class="line">            ans1=lc-&gt;ans1;</span><br><span class="line">        &#125;</span><br><span class="line">        ans0=apply(ans0),ans1=apply(ans1);</span><br><span class="line">        <span class="keyword">if</span>(rc!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            ans0=(ans0&amp;rc-&gt;ans1)|((~ans0)&amp;rc-&gt;ans0);</span><br><span class="line">            ans1=(ans1&amp;rc-&gt;ans1)|((~ans1)&amp;rc-&gt;ans0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div></div><p>但是还有一个问题是，LCT在连边和提取路径时需要<code>makeRoot</code>，也就是说需要区间翻转。</p><p>但是由于不同种类的位运算混在一起没有交换律，我们无法快速地算出翻转后的答案。</p><p>那么提前维护好就行了。提前维护好<code>sna0</code>和<code>sna1</code>，表示把$0$和$-1$反过来跑一遍的结果。</p><p>然后就没了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P3613&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="树链剖分" scheme="https://github.com/Challestend/tags/%E6%A0%91%E9%93%BE%E5%89%96%E5%88%86/"/>
    
      <category term="LCT" scheme="https://github.com/Challestend/tags/LCT/"/>
    
  </entry>
  
  <entry>
    <title>「年轻人，你渴望力量吗？」</title>
    <link href="https://github.com/Challestend/min-25-sieve-learning-notes/"/>
    <id>https://github.com/Challestend/min-25-sieve-learning-notes/</id>
    <published>2019-02-13T13:41:39.000Z</published>
    <updated>2019-02-15T09:19:15.606Z</updated>
    
    <content type="html"><![CDATA[<p>标题来自某学长安利min_25筛的方式（</p><a id="more"></a><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>我们知道，<a href="/number-theory-learning-notes/">杜教筛</a>可以在$O(n^{\tfrac{2}{3}})$的时间复杂度内计算某些给定的积性函数的前缀和。</p><p>但是现在我们希望更快。于是我们有了min_25筛（</p><p>以下，我们约定$p$是一个质数。$\mathbb{P}_{i}$表示第$i$小的质数，$\mathbb{P}_{0}=0$。$\text{minp}(n)$表示$n$最小的质因数，$\text{minp}(1)=0$。</p><p>现在我们要求一个积性函数$f$的前缀和。我们需要它满足以下两条性质：</p><ol><li>$f(p)$是一个<strong>可以快速求前缀和的完全积性函数</strong>，或者能用多个这样的函数运算得到。</li><li>$f(p^{k})$可以快速求，大概$O(k)$以内就可以。</li></ol><h3 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h3><p>我们要对每一个$x=\lfloor\cfrac{n}{i}\rfloor(i\in\mathbb{N}\cap[1,n])$，求出</p><script type="math/tex; mode=display">\sum_{i=1}^{x}[i\in\mathbb{P}]f(i)</script><p>定义</p><script type="math/tex; mode=display">F(x,y)=\sum_{i=1}^{x}[i\in\mathbb{P}\vee\text{minp}(i)\gt\mathbb{P}_{y}]f^{\prime}(i)</script><p>也就是把所有质数和最小质因数大于$\mathbb{P}_y$的合数全部当成质数代入$f^{\prime}$求值并求和。不难发现</p><script type="math/tex; mode=display">F(x,+\infty)=\sum_{i=1}^{x}[i\in\mathbb{P}]f(i)</script><p>我们回忆一下埃式筛法的运行过程。</p><p>筛完$k$次后，我们除去了最小质因数小于等于$\mathbb{P}_{k}$的合数，剩下了质数和最小质因数大于$\mathbb{P}_k$的合数。</p><p>可以看到这和$F(x,y)$的定义十分吻合。$F(x,y)$就是埃式筛法筛完$y$次后，没有被筛掉的数的$f^{\prime}$的值的和。</p><p>首先，第$y$次筛掉的最小的数很明显是$\mathbb{P}_{y}^{2}$，如果$\mathbb{P}_{y}^{2}\gt x$，我们什么也筛不掉，此时$F(x,y)=F(x,y-1)$。</p><p>也因此，筛质数筛到$\sqrt{n}$即可。</p><p>否则，即$\mathbb{P}_{y}^{2}\leqslant x$，我们将所有数除以$\mathbb{P}_{y}$，之前所有最小质因数等于$\mathbb{P}_{y}$的合数一一对应到了现在所有大于等于$\mathbb{P}_{y}$的数。</p><p>又因为$f^{\prime}$是完全积性的，假如我们有一个需要筛掉的数$z$，我们可以通过$f^{\prime}(\cfrac{z}{\mathbb{P}_{y}})f^{\prime}(\mathbb{P}_{y})$计算$f^{\prime}(z)$。</p><p>那么看起来</p><script type="math/tex; mode=display">F(x,y)=F(x,y-1)-f^{\prime}(\mathbb{P}_{y})F(\lfloor\cfrac{n}{\mathbb{P}_{y}}\rfloor,y-1)</script><p>$F(\lfloor\cfrac{n}{\mathbb{P}_{y}}\rfloor,y-1)$包含了三类数的$f^{\prime}$的值：</p><ol><li>大于等于$\mathbb{P}_{y}$的质数。</li><li>最小质因数大于等于$\mathbb{P}_{y}$（大于$\mathbb{P}_{y-1}$）的合数。</li><li>小于$\mathbb{P}_{y}$的质数。</li></ol><p>但是很明显第三类数不能被除去，因此实际上</p><script type="math/tex; mode=display">F(x,y)=F(x,y-1)-f^{\prime}(\mathbb{P}_{y})\left(F(\lfloor\cfrac{n}{\mathbb{P}_{y}}\rfloor,y-1)-\sum_{i=1}^{y-1}f^{\prime}(\mathbb{P}_{i})\right)</script><p>综上所述</p><script type="math/tex; mode=display">F(x,y)=\begin{cases}&F(x,y-1)-f^{\prime}(\mathbb{P}_{y})\left(F(\lfloor\cfrac{n}{\mathbb{P}_{y}}\rfloor,y-1)-\sum\limits_{i=1}^{y-1}f^{\prime}(\mathbb{P}_{i})\right)\;\;&(\mathbb{P}_{y}^{2}\leqslant x)\\&F(x,y-1)&(\mathbb{P}_{y}^{2}\gt x)\end{cases}</script><p>初值为</p><script type="math/tex; mode=display">F(x,0)=\sum_{i=2}^{x}f^{\prime}(i)</script><p>注意到第二维只与$y-1$有关，我们可以滚掉。</p><p>还有一个问题。这类题目的$n$会很大，我们无法开一个长度为$n$的数组。</p><p>因为$x=\lfloor\cfrac{n}{i}\rfloor(i\in\mathbb{N}\cap[1,n])$，这样的$x$最多只有$2\sqrt{n}$个，我们可以离散化存储。</p><p>具体实现细节我说不清，看代码吧（</p><div><div class="fold_hider"><div class="close hider_title">Toggle Code</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">cltstream::read(n);</span><br><span class="line">sq=<span class="built_in">sqrt</span>(n);</span><br><span class="line"><span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=sq;++i)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!f[i])&#123;</span><br><span class="line">        g[++g[<span class="number">0</span>]]=i;</span><br><span class="line">        fsum[g[<span class="number">0</span>]]=fsum[g[<span class="number">0</span>]<span class="number">-1</span>]+<span class="comment">/**/</span>;</span><br><span class="line">        <span class="comment">//注释处应填f`(i)</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=g[<span class="number">0</span>]&amp;&amp;i*g[j]&lt;=sq;++j)&#123;</span><br><span class="line">        f[i*g[j]]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(!(i%g[j]))</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">m=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(re <span class="keyword">int</span> l=<span class="number">1</span>,r;l&lt;=n;r=n/(n/l),l=r+<span class="number">1</span>)&#123;</span><br><span class="line">    w[++m]=n/l;</span><br><span class="line">    <span class="comment">//编号对应的离散化前的值</span></span><br><span class="line">    F[m]=<span class="comment">/**/</span>;</span><br><span class="line">    <span class="comment">//注释处应填\sum_&#123;t=2&#125;^&#123;w[m]&#125;f`(t)</span></span><br><span class="line">    <span class="keyword">if</span>(w[m]&lt;=sq)</span><br><span class="line">        id1[w[m]]=m;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        id2[n/w[m]]=m;</span><br><span class="line">    <span class="comment">//分段存储值对应的编号，这样数组只需要开到sqrt&#123;n&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(re <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=g[<span class="number">0</span>];++j)</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m&amp;&amp;w[i]&gt;=g[j]*g[j];++i)&#123;</span><br><span class="line">    <span class="comment">//w[i]&gt;=g[j]*g[j]，所以w[i]/g[j]&gt;=g[j]</span></span><br><span class="line">        re <span class="keyword">int</span> id=w[i]/g[j]&lt;=sq?id1[w[i]/g[j]]:id2[n/(w[i]/g[j])];</span><br><span class="line">        F[i]-=<span class="comment">/**/</span>*(F[id]-fsum[j<span class="number">-1</span>]);</span><br><span class="line">        <span class="comment">//注释处应填f`(g[j])</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div></div><p>这一部分的时间复杂度已被证明是$O(\cfrac{n^{\tfrac{3}{4}}}{\log n})$。<del>然而看上去很奇怪（</del></p><h3 id="第二部分"><a href="#第二部分" class="headerlink" title="第二部分"></a>第二部分</h3><p>在第一部分中我们求出了所有质数的贡献，现在我们要扩展到全体整数。</p><p>定义</p><script type="math/tex; mode=display">S(x,y)=\sum_{i=1}^{x}[\text{minp}(i)\geqslant\mathbb{P}_{y}]f(i)</script><p>也就是所有最小质因数大于等于$\mathbb{P}_{y}$的数的$f$的值的和。我们最终要求的就是$S(n,1)+f(1)$。</p><p>首先我们需要统计所有质数的贡献，也就是$F(x,+\infty)-\sum\limits_{i=1}^{y-1}f(\mathbb{P}_{i})$。</p><p>关于合数，我们枚举最小的质因数，然后把所有数除以这个数的若干次幂，得到的商的最小质因数应当大于这个数。</p><script type="math/tex; mode=display">\sum_{i=y}^{\mathbb{P}_{i}^{2}\leqslant n}\sum_{j=1}^{\mathbb{P}_{i}^{j+1}\leqslant n}f(\mathbb{P}_{i}^{j})S(\lfloor\cfrac{x}{\mathbb{P}_{i}^{j}}\rfloor,i+1)</script><p>但是还有一个问题是$S(\lfloor\cfrac{x}{\mathbb{P}_{i}^{j}}\rfloor,i+1)$中不包括$f(1)$，因此$f(\mathbb{P}_{i}^{j})$没有被统计，我们需要手动算进来</p><script type="math/tex; mode=display">\sum_{i=y}^{\mathbb{P}_{i}^{2}\leqslant n}\sum_{j=1}^{\mathbb{P}_{i}^{j+1}\leqslant n}\left(f(\mathbb{P}_{i}^{j})S(\lfloor\cfrac{x}{\mathbb{P}_{i}^{j}}\rfloor,i+1)+f(\mathbb{P}_{i}^{j+1})\right)</script><p>于是</p><script type="math/tex; mode=display">S(x,y)=F(x,+\infty)-\sum\limits_{i=1}^{y-1}f(\mathbb{P}_{i})+\sum_{i=y}^{\mathbb{P}_{i}^{2}\leqslant n}\sum_{j=1}^{\mathbb{P}_{i}^{j+1}\leqslant n}\left(f(\mathbb{P}_{i}^{j})S(\lfloor\cfrac{x}{\mathbb{P}_{i}^{j}}\rfloor,i+1)+f(\mathbb{P}_{i}^{j+1})\right)</script><p>然后暴力搜，记忆化都不需要，时间复杂度还是$O(\cfrac{n^{\tfrac{3}{4}}}{\log n})$。<del>就很神奇（</del></p><div><div class="fold_hider"><div class="close hider_title">Toggle Code</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">S</span><span class="params">(re <span class="keyword">int</span> x,re <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=<span class="number">1</span>||g[y]&gt;x)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        re <span class="keyword">int</span> id=x&lt;=sq?id1[x]:id2[n/x];</span><br><span class="line">        re <span class="keyword">int</span> res=F[id]-fsum[y<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(re <span class="keyword">int</span> i=y;i&lt;=g[<span class="number">0</span>]&amp;&amp;g[i]*g[i]&lt;=x;++i)</span><br><span class="line">            <span class="keyword">for</span>(re <span class="keyword">int</span> p=g[i];p*g[i]&lt;=x;p*=g[i])</span><br><span class="line">                res+=<span class="comment">/*1*/</span>*S(x/p,i+<span class="number">1</span>)+<span class="comment">/*2*/</span>;</span><br><span class="line">                <span class="comment">//1处应填f(p)，2处应填f(p*g[i])</span></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="「Luogu-P4213」「模板」杜教筛（Sum）"><a href="#「Luogu-P4213」「模板」杜教筛（Sum）" class="headerlink" title="「Luogu-P4213」「模板」杜教筛（Sum）"></a><a href="https://www.luogu.org/problemnew/show/P4213" target="_blank" rel="noopener">「Luogu-P4213」「模板」杜教筛（Sum）</a></h3><p>首先我们有</p><script type="math/tex; mode=display">\varphi(p)=\text{id}(p)-1</script><script type="math/tex; mode=display">\mu(p)=-1</script><p>然后$\text{id}$和$1$都是能$O(1)$求前缀和完全积性函数，因此可以用min_25筛搞。</p><p>说起来比较麻烦，min_25筛不结合代码大概也很难理解，所以说直接上代码（</p><div><div class="fold_hider"><div class="close hider_title">Toggle Code</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 50000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> cltstream&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> size 1048576</span></span><br><span class="line">    <span class="keyword">char</span> cltin[size+<span class="number">1</span>],*ih=cltin,*it=cltin;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">ifdef</span> ONLINE_JUDGE</span></span><br><span class="line">            <span class="keyword">if</span>(ih==it)&#123;</span><br><span class="line">                it=(ih=cltin)+fread(cltin,<span class="number">1</span>,size,<span class="built_in">stdin</span>);</span><br><span class="line">                <span class="keyword">if</span>(ih==it)</span><br><span class="line">                    <span class="keyword">return</span> EOF;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> *ih++;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">            <span class="keyword">return</span> getchar();</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> cltout[size+<span class="number">1</span>],*oh=cltout,*ot=cltout+size;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pc</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(oh==ot)&#123;</span><br><span class="line">            fwrite(cltout,<span class="number">1</span>,size,<span class="built_in">stdout</span>);</span><br><span class="line">            oh=cltout;</span><br><span class="line">        &#125;</span><br><span class="line">        *oh++=c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> clop() fwrite(cltstream::cltout,1,cltstream::oh-cltstream::cltout,stdout),cltstream::oh=cltstream::cltout</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> size</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _tp&gt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(_tp&amp; x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sn=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">char</span> c=gc();</span><br><span class="line">        <span class="keyword">for</span>(;c!=<span class="number">45</span>&amp;&amp;(c&lt;<span class="number">48</span>||c&gt;<span class="number">57</span>)&amp;&amp;c!=EOF;c=gc());</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="number">45</span>&amp;&amp;c!=EOF)</span><br><span class="line">            sn=<span class="number">-1</span>,c=gc();</span><br><span class="line">        <span class="keyword">for</span>(x=<span class="number">0</span>;c&gt;=<span class="number">48</span>&amp;&amp;c&lt;=<span class="number">57</span>&amp;&amp;c!=EOF;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>),c=gc());</span><br><span class="line">        x*=sn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _tp&gt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(_tp x,<span class="keyword">char</span> text=<span class="number">-1</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">            pc(<span class="number">45</span>),x=-x;</span><br><span class="line">        <span class="keyword">if</span>(!x)</span><br><span class="line">            pc(<span class="number">48</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> digit[<span class="number">22</span>];</span><br><span class="line">            <span class="keyword">for</span>(digit[<span class="number">0</span>]=<span class="number">0</span>;x;digit[++digit[<span class="number">0</span>]]=x%<span class="number">10</span>,x/=<span class="number">10</span>);</span><br><span class="line">            <span class="keyword">for</span>(;digit[<span class="number">0</span>];pc(digit[digit[<span class="number">0</span>]--]^<span class="number">48</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(text&gt;=<span class="number">0</span>)</span><br><span class="line">            pc(text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t,n,sq,m;</span><br><span class="line"><span class="keyword">int</span> f[maxn+<span class="number">1</span>],g[maxn+<span class="number">1</span>],w[(maxn&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>],id1[maxn+<span class="number">1</span>],id2[maxn+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> prmcnt[maxn+<span class="number">1</span>],prmCnt[(maxn&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> prmsum[maxn+<span class="number">1</span>],prmSum[(maxn&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">getPhi</span><span class="params">(re <span class="keyword">int</span> x,re <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=<span class="number">1</span>||g[y]&gt;x)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        re <span class="keyword">int</span> id=x&lt;=sq?id1[x]:id2[n/x];</span><br><span class="line">        re <span class="keyword">long</span> <span class="keyword">long</span> res=(prmSum[id]-prmCnt[id])-(prmsum[y<span class="number">-1</span>]-prmcnt[y<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(re <span class="keyword">int</span> i=y;i&lt;=g[<span class="number">0</span>]&amp;&amp;<span class="number">1L</span>L*g[i]*g[i]&lt;=x;++i)</span><br><span class="line">            <span class="keyword">for</span>(re <span class="keyword">int</span> p=g[i];<span class="number">1L</span>L*p*g[i]&lt;=x;p*=g[i])</span><br><span class="line">                res+=<span class="number">1L</span>L*p/g[i]*(g[i]<span class="number">-1</span>)*getPhi(x/p,i+<span class="number">1</span>)+<span class="number">1L</span>L*p*(g[i]<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getMu</span><span class="params">(re <span class="keyword">int</span> x,re <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=<span class="number">1</span>||g[y]&gt;x)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        re <span class="keyword">int</span> id=x&lt;=sq?id1[x]:id2[n/x];</span><br><span class="line">        re <span class="keyword">int</span> res=prmcnt[y<span class="number">-1</span>]-prmCnt[id];</span><br><span class="line">        <span class="keyword">for</span>(re <span class="keyword">int</span> i=y;i&lt;=g[<span class="number">0</span>]&amp;&amp;<span class="number">1L</span>L*g[i]*g[i]&lt;=x;++i)</span><br><span class="line">            res-=getMu(x/g[i],i+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=maxn;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!f[i])&#123;</span><br><span class="line">            g[++g[<span class="number">0</span>]]=i;</span><br><span class="line">            prmcnt[g[<span class="number">0</span>]]=prmcnt[g[<span class="number">0</span>]<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">            prmsum[g[<span class="number">0</span>]]=prmsum[g[<span class="number">0</span>]<span class="number">-1</span>]+i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=g[<span class="number">0</span>]&amp;&amp;<span class="number">1L</span>L*i*g[j]&lt;=maxn;++j)&#123;</span><br><span class="line">            f[i*g[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(!(i%g[j]))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cltstream::read(t);</span><br><span class="line">    <span class="keyword">for</span>(;t;--t)&#123;</span><br><span class="line">        cltstream::read(n);</span><br><span class="line">        sq=<span class="built_in">sqrt</span>(n);</span><br><span class="line">        m=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="keyword">int</span> l=<span class="number">1</span>,r;l&lt;=n;r=n/(n/l),l=r+<span class="number">1</span>)&#123;</span><br><span class="line">            w[++m]=n/l;</span><br><span class="line">            prmCnt[m]=w[m]<span class="number">-1</span>;</span><br><span class="line">            prmSum[m]=<span class="number">1L</span>L*(w[m]<span class="number">-1</span>)*(w[m]+<span class="number">2</span>)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(w[m]&lt;=sq)</span><br><span class="line">                id1[w[m]]=m;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                id2[n/w[m]]=m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=g[<span class="number">0</span>];++j)</span><br><span class="line">            <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m&amp;&amp;w[i]&gt;=<span class="number">1L</span>L*g[j]*g[j];++i)&#123;</span><br><span class="line">                re <span class="keyword">int</span> id=w[i]/g[j]&lt;=sq?id1[w[i]/g[j]]:id2[n/(w[i]/g[j])];</span><br><span class="line">                prmCnt[i]-=prmCnt[id]-prmcnt[j<span class="number">-1</span>];</span><br><span class="line">                prmSum[i]-=<span class="number">1L</span>L*g[j]*(prmSum[id]-prmsum[j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        cltstream::write(getPhi(n,<span class="number">1</span>)+<span class="number">1</span>,<span class="number">32</span>);</span><br><span class="line">        cltstream::write(getMu(n,<span class="number">1</span>)+<span class="number">1</span>,<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    clop();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p><img src="/images/TIM截图20190214152934.png" alt=""></p><p>上为min_25筛，下为杜教筛。</p><p>min_25筛的优势不仅在于时间复杂度，它还可以筛一些乱七八糟的东西。就比如说</p><h3 id="「LOJ6053」简单的函数"><a href="#「LOJ6053」简单的函数" class="headerlink" title="「LOJ6053」简单的函数"></a><a href="https://loj.ac/problem/6053" target="_blank" rel="noopener">「LOJ6053」简单的函数</a></h3><p>总结一下这个函数：</p><script type="math/tex; mode=display">f(1)=1</script><script type="math/tex; mode=display">f\left(\prod_{i=1}^{N}p_{i}^{r_{i}}\right)=\prod_{i=1}^{N}(p_{i}\otimes r_{i})</script><p>其中$\otimes$表示按位异或。</p><p><img src="/images/TIM图片20190103092627.png" alt=""></p><p>按位异或从十进制的角度来看无异于玄学，因此杜教筛就没法做了（</p><p>注意到</p><script type="math/tex; mode=display">f(p)=p\otimes 1=\begin{cases}&p+1\;\;&(p=2)\\&p-1\;\;&(p\gt 2)\end{cases}</script><p>我们可以在算前缀和时将$f(2)$当成$2-1$，然后特判一下加回来。</p><p>然后还是要用min_25筛的前半部分筛出$\text{id}$和$1$，其实和上面的$\varphi$没多大区别就是加了点细节（</p><p><a href="https://loj.ac/submission/336101" target="_blank" rel="noopener">好像这种能随便看代码的OJ可以直接扔个提交记录</a>。</p><h3 id="「UOJ188」Sanrd"><a href="#「UOJ188」Sanrd" class="headerlink" title="「UOJ188」Sanrd"></a><a href="http://uoj.ac/problem/188" target="_blank" rel="noopener">「UOJ188」Sanrd</a></h3><p>次大质因数和。</p><p>其实这个题面有点考阅读的。</p><p>但是我们发现次大质因数这个函数和质数并没有什么关系，而且不积性。<del>说好的只能筛积性函数呢（</del></p><p>我们来分析一下min_25筛的运行过程。</p><p>调用到$S(x,y)$时，剩下的最小质因数大于等于$\mathbb{P}_{y}$的数中，只有质数与$\mathbb{P}_{y-1}$相乘之后能够得到次大质因数为$\mathbb{P}_{y-1}$的数。这部分可以直接算。</p><p>关于次大质因数大于$\mathbb{P}_{y-1}$的，还是枚举递归暴力搜。然后还是没有算$f(\mathbb{P}_{i}^{j})$，手动加。</p><div><div class="fold_hider"><div class="close hider_title">Toggle Code</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">S</span><span class="params">(re <span class="keyword">long</span> <span class="keyword">long</span> n,re <span class="keyword">long</span> <span class="keyword">long</span> x,re <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=<span class="number">1</span>||g[y]&gt;x)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        re <span class="keyword">int</span> k=id[x&lt;=sq?x:n/x+sq];</span><br><span class="line">        re <span class="keyword">long</span> <span class="keyword">long</span> res=(y&gt;<span class="number">1</span>?g[y<span class="number">-1</span>]:<span class="number">0</span>)*(prmCnt[k]-y+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(re <span class="keyword">int</span> i=y;i&lt;=g[<span class="number">0</span>]&amp;&amp;<span class="number">1L</span>L*g[i]*g[i]&lt;=x;++i)</span><br><span class="line">            <span class="keyword">for</span>(re <span class="keyword">long</span> <span class="keyword">long</span> p=g[i];p*g[i]&lt;=x;p*=g[i])</span><br><span class="line">                res+=S(n,x/p,i+<span class="number">1</span>)+g[i];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p><a href="http://uoj.ac/submission/324057" target="_blank" rel="noopener">提交记录</a>。</p><p><del>一道比一道神仙，像我这种菜鸡只能抄题解了（</del></p><h3 id="课后习题"><a href="#课后习题" class="headerlink" title="课后习题"></a>课后习题</h3><ul><li><a href="https://loj.ac/problem/572" target="_blank" rel="noopener">「LOJ572」「LibreOJ Round #11」Misaka Network与求和</a></li><li><a href="https://www.spoj.com/problems/DIVCNTK/" target="_blank" rel="noopener">「SP34096」DIVCNTK - Counting Divisors (general)</a></li><li><a href="https://www.spoj.com/problems/GCDEX2/" target="_blank" rel="noopener">「SP19985」GCDEX2 - GCD Extreme (hard)</a></li><li><a href="https://www.spoj.com/problems/APS2/" target="_blank" rel="noopener">「SP19975」APS2 - Amazing Prime Sequence (hard)</a></li></ul><h3 id="其它文献"><a href="#其它文献" class="headerlink" title="其它文献"></a>其它文献</h3><ul><li><a href="https://www.luogu.org/blog/ShadowassIIXVIIIIV/solution-sp34096" target="_blank" rel="noopener">https://www.luogu.org/blog/ShadowassIIXVIIIIV/solution-sp34096</a></li><li><a href="https://www.cnblogs.com/zhoushuyu/p/9187319.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhoushuyu/p/9187319.html</a></li><li><a href="https://www.cnblogs.com/cjyyb/p/10169190.html" target="_blank" rel="noopener">https://www.cnblogs.com/cjyyb/p/10169190.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;标题来自某学长安利min_25筛的方式（&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://github.com/Challestend/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="min_25筛" scheme="https://github.com/Challestend/tags/min-25%E7%AD%9B/"/>
    
  </entry>
  
  <entry>
    <title>动态树学习笔记</title>
    <link href="https://github.com/Challestend/link-cut-tree-learning-notes/"/>
    <id>https://github.com/Challestend/link-cut-tree-learning-notes/</id>
    <published>2019-01-21T02:57:11.000Z</published>
    <updated>2019-02-13T00:16:28.185Z</updated>
    
    <content type="html"><![CDATA[<p>24号要出去学习，趁现在先自己xjb学点啥。</p><a id="more"></a><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>首先我们有一道<a href="https://www.luogu.org/problemnew/show/P3690" target="_blank" rel="noopener">模板题</a>。</p><p>我们所熟悉的树链剖分指的是重链剖分。也就是定义一个节点的子树大小最大的儿子为它的重儿子，连接重儿子的边叫做重边，若干条重边连在一起形成重链。除了重儿子以外的儿子被称为轻儿子，连接轻儿子的边叫做轻边。</p><p>这样一来，我们给原树的节点重新标号，使得一条重链上的所有节点的新标号是连续的，然后通过线段树或者树状数组等能够处理区间的数据结构进行维护，通过轻边合并两条重链上的信息。时间复杂度一般是$O(n\log^{2}n)$。</p><p>但是这样有一个问题，因为线段树，又或者是树状数组，都是静态的数据结构，它们不能支持我们在上面xjb捣鼓。反映到原树上，这就意味着我们边的轻重只能也是静态的。这会带来很多不便。就比如说，我们现在要维护一片森林，要求支持动态连边、删边，同时需要查询某条链上的信息。</p><p>很明显这是重链剖分无法胜任的。为了解决这个问题，我们需要一种能够动态修改边的轻重的算法，也就是实链剖分。</p><p>实链剖分一般被称为LCT，全称<del>Link-Cat Tree</del> <del>Linear Challestend Transformation</del> Link-Cut Tree，也就是动态树。</p><p>与重链剖分类似地，我们根据实际情况，随便钦定一个节点的某个儿子为它的实儿子，连接实儿子的边叫做实边，若干条实边连在一起形成实链。除了实儿子以外的儿子被称为虚儿子，连接虚儿子的边叫做虚边。</p><p>为了实现它，我们需要通过更加灵活的Splay来维护每一条实链。它具有如下性质：</p><ol><li>每棵Splay维护的是一条原森林中深度严格递增的路径，也就是一条实链。</li><li>每个节点属于且仅属于一棵Splay。</li><li>如果一个节点在原森林中有多个儿子，只有一个与它在同一颗Splay中，也就是实儿子。其他儿子所在的Splay的根节点有一根父指针指向这个节点，但是从这个节点访问不到它们。</li><li>不同于重链剖分，就算一个节点有至少一个儿子，也可以没有实儿子。</li></ol><p>以下图片来自<a href="https://wenku.baidu.com/view/75906f160b4e767f5acfcedb。" target="_blank" rel="noopener">https://wenku.baidu.com/view/75906f160b4e767f5acfcedb。</a></p><p>我们来看这样一棵树</p><p><img src="/images/1309909-20180123095924037-1618037447.png" alt=""></p><p>其中粗线表示实边，虚线表示虚边。</p><p>它所对应的Splay森林可能长下面这样，每一个绿框内都是一棵Splay。</p><p><img src="/images/1309909-20180123095955350-1680422636.png" alt=""></p><p>当然这并不是唯一的。</p><p>为了方便，我先放出我Splay的代码实现</p><div><div class="fold_hider"><div class="close hider_title">Toggle Code</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SplayNode</span>&#123;</span></span><br><span class="line">    SplayNode *ftr,*ls,*rs;</span><br><span class="line">    <span class="keyword">int</span> val,sum,rev;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">isRoot</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ftr==<span class="literal">NULL</span>||(ftr-&gt;ls!=<span class="keyword">this</span>&amp;&amp;ftr-&gt;rs!=<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//判断一个节点是否是原森林中的一棵树的树根</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">std</span>::swap(ls,rs);</span><br><span class="line">        rev^=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushDown</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(rev)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ls!=<span class="literal">NULL</span>)</span><br><span class="line">                ls-&gt;reverse();</span><br><span class="line">            <span class="keyword">if</span>(rs!=<span class="literal">NULL</span>)</span><br><span class="line">                rs-&gt;reverse();</span><br><span class="line">            rev=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushUp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        sum=val;</span><br><span class="line">        <span class="keyword">if</span>(ls!=<span class="literal">NULL</span>)</span><br><span class="line">            sum^=ls-&gt;sum;</span><br><span class="line">        <span class="keyword">if</span>(rs!=<span class="literal">NULL</span>)</span><br><span class="line">            sum^=rs-&gt;sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">SplayNode mempool[maxn+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(re SplayNode* p)</span></span>&#123;</span><br><span class="line">    re SplayNode* q=p-&gt;ftr;</span><br><span class="line">    q-&gt;pushDown();</span><br><span class="line">    p-&gt;pushDown();</span><br><span class="line">    p-&gt;ftr=q-&gt;ftr;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;ftr!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;ftr-&gt;ls==q)</span><br><span class="line">            p-&gt;ftr-&gt;ls=p;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;ftr-&gt;rs==q)</span><br><span class="line">            p-&gt;ftr-&gt;rs=p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(q-&gt;rs==p)&#123;</span><br><span class="line">        q-&gt;rs=p-&gt;ls;</span><br><span class="line">        <span class="keyword">if</span>(q-&gt;rs!=<span class="literal">NULL</span>)</span><br><span class="line">            q-&gt;rs-&gt;ftr=q;</span><br><span class="line">        p-&gt;ls=q;</span><br><span class="line">        q-&gt;ftr=p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        q-&gt;ls=p-&gt;rs;</span><br><span class="line">        <span class="keyword">if</span>(q-&gt;ls!=<span class="literal">NULL</span>)</span><br><span class="line">            q-&gt;ls-&gt;ftr=q;</span><br><span class="line">        p-&gt;rs=q;</span><br><span class="line">        q-&gt;ftr=p;</span><br><span class="line">    &#125;</span><br><span class="line">    q-&gt;pushUp();</span><br><span class="line">    p-&gt;pushUp();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(re SplayNode* p)</span></span>&#123;</span><br><span class="line"><span class="comment">//不同于我们以前写的Splay，现在我们只需要将一个节点旋转到根即可</span></span><br><span class="line">    <span class="keyword">for</span>(;!p-&gt;isRoot();rotate(p))</span><br><span class="line">        <span class="keyword">if</span>(!p-&gt;ftr-&gt;isRoot())</span><br><span class="line">            rotate((p-&gt;ftr-&gt;ftr-&gt;ls==p-&gt;ftr)==(p-&gt;ftr-&gt;ls==p)?p-&gt;ftr:p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="access"><a href="#access" class="headerlink" title="access"></a>access</h3><p>首先我们有一个基本操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">access</span><span class="params">(SplayNode*)</span></span></span><br></pre></td></tr></table></figure><p>首先有一个问题是，这个单词怎么读？</p><p><code>/ək&#39;ses/</code>？不不不应该是<code>/&#39;ækses/</code>。</p><p>如果您有兴趣，可以在<a href="https://github.com/shimohq/chinese-programmer-wrong-pronunciation">这里</a>看看自己以前都读错了多少单词（</p><p>这个函数的作用是打通指定节点到根节点的路径，将这条路径修改成实链，并抛弃指定节点自身的实儿子。</p><p>我们来看看这个函数的具体过程。还是上面的例子，现在我们调用<code>access(N)</code>，整棵树会变成这样</p><p><img src="/images/1309909-20180123101901740-2118178734.png" alt=""></p><p><del>虽然说好像图上用的还是轻重……不过这些细节就不要在意啦（</del></p><p>首先我们调用<code>splay(N)</code>，令$\text{N}$成为它所在的Splay的根节点，然后它所在的实链中再往下的部分就到了它的右子树中，我们直接回收它的右儿子指针即可。需要注意的是，我们并没有切断这条边，只是让它变虚，因此它的右儿子的父指针不应该被修改。</p><p><img src="/images/1309909-20180123110136115-1112016464.png" alt=""></p><p>向上找到$\text{N}$的父亲$\text{I}$，调用<code>splay(I)</code>，回收$\text{I}$的右儿子指针。不过这一次，我们需要再令其指向$\text{N}$，然后$\text{N}$就成了$\text{I}$的实儿子了。</p><p><img src="/images/1309909-20180123110156272-1242463729.png" alt=""></p><p>然后继续向上，找到$\text{I}$的父亲$\text{H}$，调用<code>splay(H)</code>，并令$\text{H}$的右儿子指针指向$\text{I}$。</p><p><img src="/images/1309909-20180123110209772-2057141058.png" alt=""></p><p>最后一步，找到$\text{H}$的父亲$\text{A}$，调用<code>splay(A)</code>，并令$\text{A}$的右儿子指针指向$\text{H}$。</p><p><img src="/images/1309909-20180123110213709-49169640.png" alt=""></p><p>然后我们看到，$\text{N}$和$\text{A}$到了同一颗Splay中，完成任务，返回。</p><p>代码实现：</p><div><div class="fold_hider"><div class="close hider_title">Toggle Code</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">access</span><span class="params">(re SplayNode* p)</span></span>&#123;</span><br><span class="line">    splay(p);</span><br><span class="line">    p-&gt;pushDown();</span><br><span class="line">    p-&gt;rs=<span class="literal">NULL</span>;</span><br><span class="line">    p-&gt;pushUp();</span><br><span class="line">    <span class="keyword">for</span>(re SplayNode* q=p;q-&gt;ftr!=<span class="literal">NULL</span>;q=q-&gt;ftr)&#123;</span><br><span class="line">        splay(q-&gt;ftr);</span><br><span class="line">        q-&gt;ftr-&gt;pushDown();</span><br><span class="line">        q-&gt;ftr-&gt;rs=q;</span><br><span class="line">        q-&gt;ftr-&gt;pushUp();</span><br><span class="line">    &#125;</span><br><span class="line">    splay(p);</span><br><span class="line">    <span class="comment">//据说闲着没事瞎转转有利于摊开时间复杂度（</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="findRoot"><a href="#findRoot" class="headerlink" title="findRoot"></a>findRoot</h3><p>有了<code>access</code>，我们就可以随心所欲的瞎搞了。比如说</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">SplayNode* <span class="title">findRoot</span><span class="params">(SplayNode*)</span></span></span><br></pre></td></tr></table></figure><p>返回给定节点所在的树的树根，也就是调用完<code>access</code>后它所在的实链上深度最小的节点。</p><p>因为<code>access</code>的最后自带了一个<code>splay</code>，这个时候给定节点已经是Splay的根节点了，我们直接循环跳左儿子指针即可。</p><div><div class="fold_hider"><div class="close hider_title">Toggle Code</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> SplayNode* <span class="title">findRoot</span><span class="params">(re SplayNode* p)</span></span>&#123;</span><br><span class="line">    access(p);</span><br><span class="line">    <span class="keyword">for</span>(;p-&gt;ls!=<span class="literal">NULL</span>;p=p-&gt;ls);</span><br><span class="line">    splay(p);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="makeRoot-amp-amp-split"><a href="#makeRoot-amp-amp-split" class="headerlink" title="makeRoot &amp;&amp; split"></a>makeRoot &amp;&amp; split</h3><p>现在我们要提取出树上两个给定节点之间的路径。但是我们知道，这样的路径不一定满足深度严格递增，也就是说，它可能不能够出现在一棵Splay中。</p><p>不过办法总是有的。比如说我们指定了两个节点$x$和$y$，我们先调用<code>access(x)</code>，然后考虑翻转$x$的子树之后会发生什么。</p><p><code>access</code>结束后，$x$没有右子树，翻转之后就没有了左子树，也就是说，现在没有比$x$的深度更小的节点了。换句话说就是，$x$现在成为了树根。</p><p>那么这样一来，$x$到$y$的路径就一定满足深度严格递增了，我们只需调用一次<code>access(y)</code>就可以把它抽出来。</p><p>我们实现下面两个函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeRoot</span><span class="params">(SplayNode*)</span></span></span><br></pre></td></tr></table></figure><p>令给定节点成为树根。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">split</span><span class="params">(SplayNode*,SplayNode*)</span></span></span><br></pre></td></tr></table></figure><p>抽出给定的两个节点之间的路径。不过虽然说模板题保证联通，还是有必要稍微考虑一下不连通的情况的。</p><div><div class="fold_hider"><div class="close hider_title">Toggle Code</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">makeRoot</span><span class="params">(re SplayNode* p)</span></span>&#123;</span><br><span class="line">    access(p);</span><br><span class="line">    p-&gt;reverse();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(re SplayNode* p,re SplayNode* q)</span></span>&#123;</span><br><span class="line">    makeRoot(p);</span><br><span class="line">    access(q);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="link"><a href="#link" class="headerlink" title="link"></a>link</h3><p>我们需要实现函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(SplayNode*,SplayNode*)</span></span></span><br></pre></td></tr></table></figure><p>在给定的两个节点间连一条边。特殊地，如果说给定的两个节点已经联通，什么都不做直接返回。不过这是模板题的要求，有些题可能会让你输出操作失败，这种情况下改一下返回值就行。</p><p>思路很简单。假设我们指定$x$和$y$两个节点，首先调用<code>makeRoot(x)</code>，然后检查<code>findRoot(y)</code>的返回值。如果不是$x$，说明两个节点不连通，将$x$的父指针指向$y$；否则，即<code>findRoot(y)==x</code>，说明两个节点联通，直接返回。</p><div><div class="fold_hider"><div class="close hider_title">Toggle Code</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(re SplayNode* p,re SplayNode* q)</span></span>&#123;</span><br><span class="line">    makeRoot(p);</span><br><span class="line">    <span class="keyword">if</span>(findRoot(q)!=p)</span><br><span class="line">        p-&gt;ftr=q;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h3><p>我们需要实现函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cut</span><span class="params">(SplayNode*,SplayNode*)</span></span></span><br></pre></td></tr></table></figure><p>切断给定的两个节点之间的边。不存在就什么也不做。</p><p>需要注意的是，两个节点$x$和$y$之间直接有边相连，不仅要求$x$与$y$联通，还要求它们在Splay中是相邻的两个节点。为了避免讨论深度的大小关系，我们先调用<code>makeRoot(x)</code>，此时$y$应该是$x$的右儿子，并且它不能有左儿子。</p><div><div class="fold_hider"><div class="close hider_title">Toggle Code</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">(re SplayNode* p,re SplayNode* q)</span></span>&#123;</span><br><span class="line">    makeRoot(p);</span><br><span class="line">    <span class="keyword">if</span>(findRoot(q)==p&amp;&amp;q-&gt;ftr==p&amp;&amp;q-&gt;ls==<span class="literal">NULL</span>)&#123;</span><br><span class="line">        q-&gt;ftr=p-&gt;rs=<span class="literal">NULL</span>;</span><br><span class="line">        p-&gt;pushUp();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p>把上面这么一些东西写好之后，再根据题目要求搞一搞，您就可以切掉模板题了。</p><p>完整板子：</p><div><div class="fold_hider"><div class="close hider_title">Toggle Code</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 300000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> cltstream&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> size 1048576</span></span><br><span class="line">    <span class="keyword">char</span> cltin[size+<span class="number">1</span>],*ih=cltin,*it=cltin;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">ifdef</span> ONLINE_JUDGE</span></span><br><span class="line">            <span class="keyword">if</span>(ih==it)&#123;</span><br><span class="line">                it=(ih=cltin)+fread(cltin,<span class="number">1</span>,size,<span class="built_in">stdin</span>);</span><br><span class="line">                <span class="keyword">if</span>(ih==it)</span><br><span class="line">                    <span class="keyword">return</span> EOF;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> *ih++;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">            <span class="keyword">return</span> getchar();</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> cltout[size+<span class="number">1</span>],*oh=cltout,*ot=cltout+size;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pc</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(oh==ot)&#123;</span><br><span class="line">            fwrite(cltout,<span class="number">1</span>,size,<span class="built_in">stdout</span>);</span><br><span class="line">            oh=cltout;</span><br><span class="line">        &#125;</span><br><span class="line">        *oh++=c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> clop() fwrite(cltstream::cltout,1,cltstream::oh-cltstream::cltout,stdout),cltstream::oh=cltstream::cltout</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> size</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _tp&gt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(_tp&amp; x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sn=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">char</span> c=gc();</span><br><span class="line">        <span class="keyword">for</span>(;c!=<span class="number">45</span>&amp;&amp;(c&lt;<span class="number">48</span>||c&gt;<span class="number">57</span>)&amp;&amp;c!=EOF;c=gc());</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="number">45</span>&amp;&amp;c!=EOF)</span><br><span class="line">            sn=<span class="number">-1</span>,c=gc();</span><br><span class="line">        <span class="keyword">for</span>(x=<span class="number">0</span>;c&gt;=<span class="number">48</span>&amp;&amp;c&lt;=<span class="number">57</span>&amp;&amp;c!=EOF;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>),c=gc());</span><br><span class="line">        x*=sn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _tp&gt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(_tp x,<span class="keyword">char</span> text=<span class="number">-1</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">            pc(<span class="number">45</span>),x=-x;</span><br><span class="line">        <span class="keyword">if</span>(!x)</span><br><span class="line">            pc(<span class="number">48</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> digit[<span class="number">22</span>];</span><br><span class="line">            <span class="keyword">for</span>(digit[<span class="number">0</span>]=<span class="number">0</span>;x;digit[++digit[<span class="number">0</span>]]=x%<span class="number">10</span>,x/=<span class="number">10</span>);</span><br><span class="line">            <span class="keyword">for</span>(;digit[<span class="number">0</span>];pc(digit[digit[<span class="number">0</span>]--]^<span class="number">48</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(text&gt;=<span class="number">0</span>)</span><br><span class="line">            pc(text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _tp&gt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(_tp&amp; x,_tp&amp; y)</span></span>&#123;</span><br><span class="line">        _tp z=x;</span><br><span class="line">        x=y;</span><br><span class="line">        y=z;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LinkCutTree</span>&#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">SplayNode</span>&#123;</span></span><br><span class="line">        SplayNode *ftr,*ls,*rs;</span><br><span class="line">        <span class="keyword">int</span> val,sum,rev;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">isRoot</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> ftr==<span class="literal">NULL</span>||(ftr-&gt;ls!=<span class="keyword">this</span>&amp;&amp;ftr-&gt;rs!=<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="built_in">std</span>::swap(ls,rs);</span><br><span class="line">            rev^=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushDown</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(rev)&#123;</span><br><span class="line">                <span class="keyword">if</span>(ls!=<span class="literal">NULL</span>)</span><br><span class="line">                    ls-&gt;reverse();</span><br><span class="line">                <span class="keyword">if</span>(rs!=<span class="literal">NULL</span>)</span><br><span class="line">                    rs-&gt;reverse();</span><br><span class="line">                rev=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushUp</span><span class="params">()</span></span>&#123;</span><br><span class="line">            sum=val;</span><br><span class="line">            <span class="keyword">if</span>(ls!=<span class="literal">NULL</span>)</span><br><span class="line">                sum^=ls-&gt;sum;</span><br><span class="line">            <span class="keyword">if</span>(rs!=<span class="literal">NULL</span>)</span><br><span class="line">                sum^=rs-&gt;sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    SplayNode mempool[maxn+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(re SplayNode* p)</span></span>&#123;</span><br><span class="line">        re SplayNode* q=p-&gt;ftr;</span><br><span class="line">        q-&gt;pushDown();</span><br><span class="line">        p-&gt;pushDown();</span><br><span class="line">        p-&gt;ftr=q-&gt;ftr;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;ftr!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;ftr-&gt;ls==q)</span><br><span class="line">                p-&gt;ftr-&gt;ls=p;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;ftr-&gt;rs==q)</span><br><span class="line">                p-&gt;ftr-&gt;rs=p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(q-&gt;rs==p)&#123;</span><br><span class="line">            q-&gt;rs=p-&gt;ls;</span><br><span class="line">            <span class="keyword">if</span>(q-&gt;rs!=<span class="literal">NULL</span>)</span><br><span class="line">                q-&gt;rs-&gt;ftr=q;</span><br><span class="line">            p-&gt;ls=q;</span><br><span class="line">            q-&gt;ftr=p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            q-&gt;ls=p-&gt;rs;</span><br><span class="line">            <span class="keyword">if</span>(q-&gt;ls!=<span class="literal">NULL</span>)</span><br><span class="line">                q-&gt;ls-&gt;ftr=q;</span><br><span class="line">            p-&gt;rs=q;</span><br><span class="line">            q-&gt;ftr=p;</span><br><span class="line">        &#125;</span><br><span class="line">        q-&gt;pushUp();</span><br><span class="line">        p-&gt;pushUp();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">splay</span><span class="params">(re SplayNode* p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(;!p-&gt;isRoot();rotate(p))</span><br><span class="line">            <span class="keyword">if</span>(!p-&gt;ftr-&gt;isRoot())</span><br><span class="line">                rotate((p-&gt;ftr-&gt;ftr-&gt;ls==p-&gt;ftr)==(p-&gt;ftr-&gt;ls==p)?p-&gt;ftr:p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">(re <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">            re SplayNode* p=mempool+i;</span><br><span class="line">            p-&gt;ftr=p-&gt;ls=p-&gt;rs=<span class="literal">NULL</span>;</span><br><span class="line">            cltstream::read(p-&gt;val);</span><br><span class="line">            p-&gt;sum=p-&gt;val;</span><br><span class="line">            p-&gt;rev=<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">access</span><span class="params">(re SplayNode* p)</span></span>&#123;</span><br><span class="line">        splay(p);</span><br><span class="line">        p-&gt;pushDown();</span><br><span class="line">        p-&gt;rs=<span class="literal">NULL</span>;</span><br><span class="line">        p-&gt;pushUp();</span><br><span class="line">        <span class="keyword">for</span>(re SplayNode* q=p;q-&gt;ftr!=<span class="literal">NULL</span>;q=q-&gt;ftr)&#123;</span><br><span class="line">            splay(q-&gt;ftr);</span><br><span class="line">            q-&gt;ftr-&gt;pushDown();</span><br><span class="line">            q-&gt;ftr-&gt;rs=q;</span><br><span class="line">            q-&gt;ftr-&gt;pushUp();</span><br><span class="line">        &#125;</span><br><span class="line">        splay(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> SplayNode* <span class="title">findRoot</span><span class="params">(re SplayNode* p)</span></span>&#123;</span><br><span class="line">        access(p);</span><br><span class="line">        <span class="keyword">for</span>(;p-&gt;ls!=<span class="literal">NULL</span>;p=p-&gt;ls);</span><br><span class="line">        splay(p);</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">makeRoot</span><span class="params">(re SplayNode* p)</span></span>&#123;</span><br><span class="line">        access(p);</span><br><span class="line">        p-&gt;reverse();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">split</span><span class="params">(re SplayNode* p,re SplayNode* q)</span></span>&#123;</span><br><span class="line">        makeRoot(p);</span><br><span class="line">        access(q);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(re SplayNode* p,re SplayNode* q)</span></span>&#123;</span><br><span class="line">        makeRoot(p);</span><br><span class="line">        <span class="keyword">if</span>(findRoot(q)!=p)</span><br><span class="line">            p-&gt;ftr=q;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">(re SplayNode* p,re SplayNode* q)</span></span>&#123;</span><br><span class="line">        makeRoot(p);</span><br><span class="line">        <span class="keyword">if</span>(findRoot(q)==p&amp;&amp;q-&gt;ftr==p&amp;&amp;q-&gt;ls==<span class="literal">NULL</span>)&#123;</span><br><span class="line">            q-&gt;ftr=p-&gt;rs=<span class="literal">NULL</span>;</span><br><span class="line">            p-&gt;pushUp();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">queryPathXorSum</span><span class="params">(re <span class="keyword">int</span> x,re <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        split(mempool+x,mempool+y);</span><br><span class="line">        <span class="keyword">return</span> (mempool+y)-&gt;sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">createEdge</span><span class="params">(re <span class="keyword">int</span> x,re <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        link(mempool+x,mempool+y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">destoryEdge</span><span class="params">(re <span class="keyword">int</span> x,re <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        cut(mempool+x,mempool+y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modifyVertice</span><span class="params">(re <span class="keyword">int</span> x,re <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        splay(mempool+x);</span><br><span class="line">        (mempool+x)-&gt;val=y;</span><br><span class="line">        (mempool+x)-&gt;pushUp();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printTree</span><span class="params">(re SplayNode* p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">            p-&gt;pushDown();</span><br><span class="line">            printTree(p-&gt;ls);</span><br><span class="line">            <span class="built_in">printf</span>(</span><br><span class="line">                <span class="string">"%d(%d,%d,%d)\n"</span>,</span><br><span class="line">                p-mempool,</span><br><span class="line">                p-&gt;ftr!=<span class="literal">NULL</span>?p-&gt;ftr-mempool:<span class="number">-1</span>,</span><br><span class="line">                p-&gt;ls!=<span class="literal">NULL</span>?p-&gt;ls-mempool:<span class="number">-1</span>,</span><br><span class="line">                p-&gt;rs!=<span class="literal">NULL</span>?p-&gt;rs-mempool:<span class="number">-1</span></span><br><span class="line">            );</span><br><span class="line">            printTree(p-&gt;rs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line">LinkCutTree QAQ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;\</span><br><span class="line">    cltstream::read(n);</span><br><span class="line">    cltstream::read(m);</span><br><span class="line">    QAQ.build(n);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> opt,x,y;</span><br><span class="line">        cltstream::read(opt);</span><br><span class="line">        cltstream::read(x);</span><br><span class="line">        cltstream::read(y);</span><br><span class="line">        <span class="keyword">switch</span>(opt)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                cltstream::write(QAQ.queryPathXorSum(x,y),<span class="number">10</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                QAQ.createEdge(x,y);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                QAQ.destoryEdge(x,y);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                QAQ.modifyVertice(x,y);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    clop();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p><del>是不是感觉很好写呢（</del></p><h3 id="用LCT维护子树信息"><a href="#用LCT维护子树信息" class="headerlink" title="用LCT维护子树信息"></a>用LCT维护子树信息</h3><p>咕咕咕。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;24号要出去学习，趁现在先自己xjb学点啥。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://github.com/Challestend/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="LCT" scheme="https://github.com/Challestend/tags/LCT/"/>
    
      <category term="Splay" scheme="https://github.com/Challestend/tags/Splay/"/>
    
  </entry>
  
  <entry>
    <title>2019-01-20：loli的两场模拟赛的题解</title>
    <link href="https://github.com/Challestend/lolioi-2019-01-20-solutions/"/>
    <id>https://github.com/Challestend/lolioi-2019-01-20-solutions/</id>
    <published>2019-01-20T09:43:14.000Z</published>
    <updated>2019-02-13T00:16:28.185Z</updated>
    
    <content type="html"><![CDATA[<p>今天loli搞了上午下午连续两场模拟赛，于是来写一篇题解。</p><p>上午记为D1，下午记为D2。</p><a id="more"></a><h3 id="D1"><a href="#D1" class="headerlink" title="D1"></a>D1</h3><h4 id="T1-简-simple"><a href="#T1-简-simple" class="headerlink" title="T1 简 - simple"></a>T1 简 - simple</h4><p>给你$2n$个数，让你配成$n$对数，每个数恰属于一对数，一对数的得分是其中的较小值，让你最大化得分和。</p><p>$n\leqslant 100000$。</p><p>不予置评。</p><h4 id="T2-单-single"><a href="#T2-单-single" class="headerlink" title="T2 单 - single"></a>T2 单 - single</h4><p>给你一棵树，每个点有点权$a_{i}$，$dist(u,v)$表示$u$到$v$的树上路径经过的边数。定义</p><script type="math/tex; mode=display">b_{u}=\sum_{i=1}^{n}dist(u,i)a_{i}</script><p>还会给你一个$\text{tp}$，$\text{tp}=0$时给你$\{a_{n}\}$让你求$\{b_{n}\}$，$\text{tp}=1$时给你$\{b_{n}\}$让你求$\{a_{n}\}$。多组数据。</p><p>$n\leqslant 100000,T\leqslant 5$。</p><p>$\text{tp}=0$时就是一个简单的树形DP。</p><p>$\text{tp}=1$……高斯消元？不是很会写而且$O(n^{3})$会T飞啊（</p><p>他给的题解我也没看懂（</p><p>我就打了$\text{tp}=0$的$30$分。</p><h4 id="T3-题-problem"><a href="#T3-题-problem" class="headerlink" title="T3 题 - problem"></a>T3 题 - problem</h4><p>有一个平面直角坐标系。一开始你在原点，每次移动可以从$(x,y)$移动到$(x+1,y)$，$(x-1,y)$，$(x,y+1)$，$(x,y-1)$。再给你一个无穷点集$S$，你只能停留在这个点集内的点上，问你恰好$n$步后回到原点的方案数。对$10^{9}+7$取模。</p><p>关于$S$，首先会给你一个$\text{tp}$，然后$S$如下定义</p><script type="math/tex; mode=display">S=\begin{cases}&\{(x,y)\mid x,y\in\mathbb{Z}\}\;\;&(\text{tp}=0)\\&\{(x,y)\mid x\in\mathbb{N},y=0\}&(\text{tp}=1)\\&\{(x,y)\mid xy=0\}&(\text{tp}=2)\\&\{(x,y)\mid x,y\in\mathbb{N}\}&(\text{tp}=3)\end{cases}</script><p>$n\leqslant 100000$，$n\equiv 0\pmod{2}$，$\text{tp}\in\{0,1,2,3\}$。特殊地，当$\text{tp}=2$时$n\leqslant 1000$。</p><p>四合一数论提答（</p><p>很明显，无论是$x$坐标上还是$y$坐标上，我们都需要移动偶数次。再加上$n$保证是偶数，我们可以将$n$除以$2$，然后走$2n$步。</p><p>$\text{tp}=0$时，我们枚举$2i$步沿$x$轴方向走，$2(n-i)$步沿$y$轴方向走。<br>我们可以将这抽象成一个序列，其中有$i$个$x+1/x-1$，$n-i$个$y+1/y-1$，总排列方案数就是$\cfrac{(2n)!}{i!i!(n-i)!(n-i)!}$。因此</p><script type="math/tex; mode=display">\text{Ans}=(2n)!\sum_{i=0}^{n}\cfrac{1}{i!i!(n-i)!(n-i)!}</script><p>$\text{tp}=1$直接卡特兰数。</p><p>$\text{tp}=2$比较特殊。因为我们不能离开坐标系，一旦我们离开了原点，我们必须要先走回原点，才能沿着另一个坐标轴的方向继续走。我们可以考虑两种不同的括号，不同种括号之间不能嵌套，然后问有多少个长度为$2n$的序列是匹配的。</p><p>如果说我们有连续一段一共$i$对同种括号，不难发现排列方案数是$\cfrac{(2i)!}{i!i!}$，于是我们就有了一个$O(n^{2})$的DP</p><script type="math/tex; mode=display">f[x]=\sum_{i=1}^{x}f[x-i]\cfrac{(2i)!}{i!i!}</script><p>其实如果改一下模数的话这个东西可以用NTT优化到$O(n\log n)$的。虽然现在这个样子MTT也能搞……但是我不会写（</p><p>$\text{tp}=3$大概是$\text{tp}=0$与$\text{tp}=1$的结合。枚举沿$x$轴方向走多少步，然后两个方向分别卡特兰，然后把两个序列合并起来。于是</p><script type="math/tex; mode=display">\begin{aligned}\text{Ans}&=\sum_{i=0}^{n}C_{2n}^{2i}C_{i}C_{n-i}\\&=\sum_{i=0}^{n}\cfrac{(2n)!}{(2i)!(2(n-i))!}\left(\cfrac{(2i)!}{i!i!}-\cfrac{(2i)!}{(i+1)!(i-1)!}\right)\left(\cfrac{(2(n-i))!}{(n-i)!(n-i)!}-\cfrac{(2(n-i))!}{(n-i+1)!(n-i-1)!}\right)\\&=(2n)!\sum_{i=0}^{n}\left(\cfrac{1}{i!i!}-\cfrac{1}{(i+1)!(i-1)!}\right)\left(\cfrac{1}{(n-i)!(n-i)!}-\cfrac{1}{(n-i+1)!(n-i-1)!}\right)\end{aligned}</script><p>于是愉快地$230$直接rank1（</p><p>话说wzx打了$240$分的啊……然而炸成$210$（</p><h3 id="D2"><a href="#D2" class="headerlink" title="D2"></a>D2</h3><h4 id="T1-印章-seal"><a href="#T1-印章-seal" class="headerlink" title="T1 印章 - seal"></a>T1 印章 - seal</h4><p>给你一张$n\times m$的纸，上面有些格子要印墨水。你有一个$r\times c$的印章，上面有些格子是凸起的可以印。纸和印章不可以旋转，不可以重复印同一个格子，不可以把墨水印到纸外面去。问是否可行。多组数据。</p><p>$n,m,r,c\leqslant 1000,T\leqslant 10$。</p><p>首先我们不难想出一个$O((n-r)(m-c)rc)$也就是差不多$O(n^{4})$的暴力。不过这样只有$60$分。当时我用了一个<code>bitset</code>瞎搞了一波把复杂度降到了$O(n^{3})$，然而……并没有什么用（</p><p>拿了$60$就跑（</p><h4 id="T2-多边形-polygon"><a href="#T2-多边形-polygon" class="headerlink" title="T2 多边形 - polygon"></a>T2 多边形 - polygon</h4><p>一个$0-n$边形被定义为一个正常的$n$边形。对于一个$k-n$边形，对于它最外层的每一条边，我们向外做$n$边形，得到一个$(k+1)-n$边形。</p><p>这是一个$0-4$边形</p><p><img src="/images/图片1.png" alt=""></p><p>这是一个$1-4$边形</p><p><img src="/images/图片2.png" alt=""></p><p>这是一个$2-4$边形</p><p><img src="/images/图片3.png" alt=""></p><p>给你一个$k-n$边形，问你它的生成树数量。对$998244353$取模。</p><p>$0\leqslant k\leqslant 10^{6},3\leqslant n\leqslant 10^{9}$。</p><p><img src="/images/TIM图片20181023195537.jpg" alt=""></p><p>告辞（</p><p>彻底放弃治疗（</p><h4 id="T3-扔球-ball"><a href="#T3-扔球-ball" class="headerlink" title="T3 扔球 - ball"></a>T3 扔球 - ball</h4><p>给你$n$个球和$n$个瓶子，编号从$1$到$n$。每个球只能扔到指定集合的瓶子里。对于每个球，把它指定集合里的瓶子按编号从小到大排序，然后依次往里面扔球。每次扔进去的概率是$p$，扔不进去就试下一个瓶子，试完所有瓶子一遍还是没扔进去就从头再来一遍直到扔进去为止。指定集合为空就跳过这个球。</p><p>所有球扔完之后，记$i$号球被扔进了$a_{i}$号瓶子，问你$\{a_{n}\}$的期望逆序对数量。四舍五入保留两位小数。</p><p>如果扔球时跳过了$i$号球，那么当做$a_{i}$不存在。</p><p>$n\leqslant 500000,0.4\leqslant p\leqslant 0.6$。记$i$号球的指定集合为$S_{i}$，$\Sigma|S_{i}|\leqslant 500000$。</p><p>从后往前扫，扫到$x$时枚举$a_{x}$的可能取值$y$，将答案累加上$a_{x}=y$的概率与$a_{x+1}$到$a_{n}$中小于$y$的数的数量的期望值的乘积。然后$a_{x}$到$a_{n}$中$y$的出现次数的期望值就是$a_{x+1}$到$a_{n}$中$y$的出现次数的期望值再加上$a_{x}=y$的概率。</p><p>套个树状数组就行。</p><p>但是等会，$a_{x}=y$的概率怎么算啊。</p><p>首先我们考虑集合中最小的那个数，把球扔进那个瓶子的概率应该是</p><script type="math/tex; mode=display">\begin{aligned}\lim_{n\rightarrow+\infty}\sum_{i=0}^{n}(1-p)^{i|S_{x}|}p&=p\cfrac{(1-p)^{(n+1)|S_{x}|}-1}{(1-p)^{|S_{x}|}-1}\\&=\cfrac{p}{1-(1-p)^{|S_{x}|}}\end{aligned}</script><p>那么第$2$小呢？首先我们第一次扔不能扔进去，所以首先需要乘个$1-p$，然后就和上面一样了。依次类推，扔进编号第$i$小的瓶子的概率为</p><script type="math/tex; mode=display">\cfrac{p(1-p)^{i-1}}{1-(1-p)^{|S_{x}|}}</script><p>最后总分只有$160$，被$190$分的wzx吊着打（</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天loli搞了上午下午连续两场模拟赛，于是来写一篇题解。&lt;/p&gt;
&lt;p&gt;上午记为D1，下午记为D2。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="loli" scheme="https://github.com/Challestend/tags/loli/"/>
    
      <category term="模拟赛" scheme="https://github.com/Challestend/tags/%E6%A8%A1%E6%8B%9F%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>「HEOI2016/TJOI2016」求和</title>
    <link href="https://github.com/Challestend/luogu-p4091-solution/"/>
    <id>https://github.com/Challestend/luogu-p4091-solution/</id>
    <published>2019-01-17T03:28:06.000Z</published>
    <updated>2019-02-13T00:16:28.185Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P4091" target="_blank" rel="noopener">传送门</a></p><p>感觉最近意志消沉啥也不想干，于是继续来颓blog（</p><a id="more"></a><p>仔细一推发现也不是什么很难的题，感觉几天前的自己就是个傻子（</p><p>首先我们知道如果$n\gt m$，$S(n,m)=0$。于是我们将原式写成</p><script type="math/tex; mode=display">\sum_{i=0}^{n}\sum_{j=0}^{n}2^{j}j!S(i,j)=\sum_{j=0}^{n}2^{j}j!\sum_{i=0}^{n}S(i,j)</script><p>第二类斯特林数有一个通项公式，它长这样</p><script type="math/tex; mode=display">S(n,m)=\cfrac{1}{m!}\sum_{i=0}^{m}(-1)^{i}C(m,i)(m-i)^{n}</script><p>直观理解一下，$S(n,m)$说的是将$n$个有标号的小球放进$m$个无标号的盒子，且不允许空盒的方案数。我们令$F(n,m,k)$表示将$n$个有标号的小球放进$m$个有标号的盒子，且其中至少有$k$个空盒的方案数。不难发现</p><script type="math/tex; mode=display">F(n,m,k)=C(m,k)(m-k)^{n}</script><p>然后我们容斥一下，得到将$n$个有标号的小球放进$m$个有标号的盒子，且不允许空盒的方案数$G(n,m)$。不难发现</p><script type="math/tex; mode=display">G(n,m)=\sum_{i=0}^{m}(-1)^{i}F(n,m,i)=\sum_{i=0}^{m}(-1)^{i}C(m,i)(m-i)^{n}</script><p>因为$S(n,m)$的定义中要求盒子无标号，我们再除以盒子的排列方案$m!$即可。</p><p>然后我们继续推式子</p><script type="math/tex; mode=display">\begin{aligned}\sum_{j=0}^{n}2^{j}j!\sum_{i=0}^{n}S(i,j)&=\sum_{j=0}^{n}2^{j}j!\sum_{i=0}^{n}\cfrac{1}{j!}\sum_{k=0}^{j}(-1)^{k}C(j,k)(j-k)^{i}\\&=\sum_{j=0}^{n}2^{j}j!\sum_{i=0}^{n}\cfrac{1}{j!}\sum_{k=0}^{j}(-1)^{k}\cfrac{j!}{k!(j-k)!}(j-k)^{i}\\&=\sum_{j=0}^{n}2^{j}j!\sum_{i=0}^{n}\sum_{k=0}^{j}\cfrac{(-1)^{k}}{k!(j-k)!}(j-k)^{i}\\&=\sum_{j=0}^{n}2^{j}j!\sum_{k=0}^{j}\cfrac{(-1)^{k}}{k!(j-k)!}\sum_{i=0}^{n}(j-k)^{i}\end{aligned}</script><p>我们看到右边就是一个等比数列求和，于是</p><script type="math/tex; mode=display">\sum_{j=0}^{n}2^{j}j!\sum_{k=0}^{j}\cfrac{(-1)^{k}}{k!(j-k)!}\sum_{i=0}^{n}(j-k)^{i}=\sum_{j=0}^{n}2^{j}j!\sum_{k=0}^{j}\cfrac{(-1)^{k}}{k!}\cfrac{(j-k)^{n+1}-1}{(j-k)!(j-k-1)}</script><p>定义</p><script type="math/tex; mode=display">F[i]=\cfrac{(-1)^{i}}{i!}</script><p>右边的等比数列求和比较麻烦，我们需要一些特判。</p><script type="math/tex; mode=display">G[i]=\begin{cases}&1&(i=0)\\&n+1&(i=1)\\&\cfrac{i^{n+1}-1}{i!(i-1)}\;\;&(i>1)\end{cases}</script><p>然后我们就有</p><script type="math/tex; mode=display">\sum_{j=0}^{n}2^{j}j!\sum_{k=0}^{j}\cfrac{(-1)^{k}}{k!}\cfrac{(j-k)^{n+1}-1}{(j-k)!(j-k-1)}=\sum_{j=0}^{n}2^{j}j!(F\times G)[j]</script><p>这么一想前几天的我还只会暴力二项式定理展开（</p><p><img src="/images/TIM图片20181209192946.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P4091&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;感觉最近意志消沉啥也不想干，于是继续来颓blog（&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="NTT" scheme="https://github.com/Challestend/tags/NTT/"/>
    
      <category term="HEOI" scheme="https://github.com/Challestend/tags/HEOI/"/>
    
      <category term="TJOI" scheme="https://github.com/Challestend/tags/TJOI/"/>
    
      <category term="2016" scheme="https://github.com/Challestend/tags/2016/"/>
    
  </entry>
  
  <entry>
    <title>有上下界的网络流问题与预留推进学习笔记</title>
    <link href="https://github.com/Challestend/something-about-network-flow-learning-notes/"/>
    <id>https://github.com/Challestend/something-about-network-flow-learning-notes/</id>
    <published>2019-01-14T13:18:08.000Z</published>
    <updated>2019-02-13T00:16:28.185Z</updated>
    
    <content type="html"><![CDATA[<p>感觉最近好颓啊（</p><p>这是一篇正在咕咕咕的blog。<br><a id="more"></a></p><h3 id="无源汇有上下界可行流"><a href="#无源汇有上下界可行流" class="headerlink" title="无源汇有上下界可行流"></a><a href="https://loj.ac/problem/115" target="_blank" rel="noopener">无源汇有上下界可行流</a></h3><p>我们发现，这道题中每条边的流量有一个下界。相比起我们以前做过的网络流题目，我们发现它们并不对流量下界作出要求，也就是说，下界都是$0$。一种简单的想法就是，将每条边的流量上界置为$\text{upper}(e)-\text{lower}(e)$，下界置为$0$。然后我们发现，这样做可能会导致流量不平衡，我们需要调整。令</p><script type="math/tex; mode=display">w(u)=\sum_{v\in V,(v,u)\in E}\text{lower}((v,u))-\sum_{v\in V,(u,v)\in E}\text{lower}((u,v))</script><ul><li>如果$w(u)=0$，说明我们不需要对点$u$做出调整。</li><li>如果$w(u)\gt 0$，说明调整上下界后，流入$u$的流量减少地要比流出$u$的流量多，我们就建立一个源点，从其向点$u$连一条流量上界为$w(u)$的边。</li><li>如果$w(u)\lt 0$，说明调整上下界后，流出$u$的流量减少地要比流入$u$的流量多，我们就建立一个汇点，从点$u$向其连一条流量上界为$-w(u)$的边。</li></ul><p>然后直接跑一边从源点到汇点的最大流即可。</p><p>需要注意的是我们额外向图中加入的边，加入它们的目的是为了平衡流量，易知，如果它们没有完全满载，就一定不能完全平衡原图的流量，此时问题无解。</p><p>否则，我们就已经构造出了一组可行解。</p><h3 id="有源汇有上下界最大流"><a href="#有源汇有上下界最大流" class="headerlink" title="有源汇有上下界最大流"></a><a href="https://loj.ac/problem/116" target="_blank" rel="noopener">有源汇有上下界最大流</a></h3><p>这道题与上面的区别在于限制了源点和汇点，并且要求求出最大流。</p><p>我们可以从汇点到源点连一条流量上界为$+\infty$的边，然后这整个网络就循环了，然后我们跑一遍无源汇有上下界可行流。</p><p>需要注意的是，我们毕竟只是求出了可行流，原图可能还并没有满载。因此，我们删去之前求解可行流时创建的超源和超汇，在原图的残余网络上再跑一边最大流，两次的流量之和就是问题的解。</p><p>当然，求解可行流时无解的话，整个问题无解。</p><h3 id="有源汇有上下界最小流"><a href="#有源汇有上下界最小流" class="headerlink" title="有源汇有上下界最小流"></a><a href="https://loj.ac/problem/117" target="_blank" rel="noopener">有源汇有上下界最小流</a></h3><p>还没看懂，先咕着。</p><h3 id="最高标号预流推进（HLPP-Highest-Label-Preflow-Pushing？）"><a href="#最高标号预流推进（HLPP-Highest-Label-Preflow-Pushing？）" class="headerlink" title="最高标号预流推进（HLPP-Highest Label Preflow Pushing？）"></a><a href="https://loj.ac/problem/127" target="_blank" rel="noopener">最高标号预流推进（HLPP-Highest Label Preflow Pushing？）</a></h3><p>还没看懂，先咕着。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;感觉最近好颓啊（&lt;/p&gt;
&lt;p&gt;这是一篇正在咕咕咕的blog。&lt;br&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://github.com/Challestend/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="网络流" scheme="https://github.com/Challestend/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="最大流" scheme="https://github.com/Challestend/tags/%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
    
      <category term="预留推进" scheme="https://github.com/Challestend/tags/%E9%A2%84%E7%95%99%E6%8E%A8%E8%BF%9B/"/>
    
  </entry>
  
  <entry>
    <title>类欧几里得算法学习笔记</title>
    <link href="https://github.com/Challestend/similar-euclid-algorithm-learning-notes/"/>
    <id>https://github.com/Challestend/similar-euclid-algorithm-learning-notes/</id>
    <published>2019-01-10T05:37:33.000Z</published>
    <updated>2019-02-13T00:16:28.185Z</updated>
    
    <content type="html"><![CDATA[<p>其实我也不知道这个算法的英文名是啥（</p><p>我就yy出来一个「Similar Euclid Algorithm」（</p><a id="more"></a><p>给你六个非负整数$n,a,b,c,k_{1},k_{2}$，你需要求出</p><script type="math/tex; mode=display">\sum_{i=0}^{n}i^{k_{1}}\lfloor\cfrac{ai+b}{c}\rfloor^{k_{2}}\pmod{1000000007}</script><p>$n,a,b,c\leqslant 10^{9}$，$k_{1}+k_{2}\leqslant 10$。</p><p><img src="https://i.loli.net/2019/01/10/5c36dbda14c92.jpg" alt=""></p><p>太难了，告辞（</p><p>所以我们现在来研究简单一点的。</p><p>给你四个非负整数$n,a,b,c$，你需要求出</p><script type="math/tex; mode=display">\begin{aligned}f(n,a,b,c)&\equiv\sum_{i=0}^{n}\lfloor\cfrac{ai+b}{c}\rfloor\pmod{998244353}\\g(n,a,b,c)&\equiv\sum_{i=0}^{n}i\lfloor\cfrac{ai+b}{c}\rfloor\pmod{998244353}\\h(n,a,b,c)&\equiv\sum_{i=0}^{n}\lfloor\cfrac{ai+b}{c}\rfloor^{2}\pmod{998244353}\end{aligned}</script><p>$n,a,b,c\leqslant 10^{9}$，$10^{5}$组询问。</p><p><a href="https://www.luogu.org/problemnew/show/P5170" target="_blank" rel="noopener">传送门</a></p><p>于是我们开始愉快地推式子。首先我们暂不考虑取模，也就是下文中先用等号代替同余。</p><p>首先考虑$f(n,a,b,c)$，假设$a\geqslant c\vee b\geqslant c$</p><script type="math/tex; mode=display">\begin{aligned}f(n,a,b,c)&=\sum_{i=0}^{n}\lfloor\cfrac{ai+b}{c}\rfloor\\&=\sum_{i=0}^{n}\left(\lfloor\cfrac{(a\operatorname{mod}c)i+(b\operatorname{mod}c)}{c}\rfloor+i\lfloor\cfrac{a}{c}\rfloor+\lfloor\cfrac{b}{c}\rfloor\right)\\&=\sum_{i=0}^{n}\lfloor\cfrac{(a\operatorname{mod}c)i+(b\operatorname{mod}c)}{c}\rfloor+\cfrac{n(n+1)}{2}\lfloor\cfrac{a}{c}\rfloor+(n+1)\lfloor\cfrac{b}{c}\rfloor\\&=f(n,a\operatorname{mod}c,b\operatorname{mod}c,c)+\cfrac{n(n+1)}{2}\lfloor\cfrac{a}{c}\rfloor+(n+1)\lfloor\cfrac{b}{c}\rfloor\end{aligned}</script><p>也就是说，我们只需要重点关注$a\lt c\wedge b\lt c$时的情况即可。我们令$m=\lfloor\cfrac{an+b}{c}\rfloor$，然后继续往下推</p><script type="math/tex; mode=display">\begin{aligned}f(n,a,b,c)&=\sum_{i=0}^{n}\lfloor\cfrac{ai+b}{c}\rfloor\\&=\sum_{i=0}^{n}\sum_{j=1}^{m}\left[j\leqslant\lfloor\cfrac{ai+b}{c}\rfloor\right]\\&=\sum_{i=0}^{n}\sum_{j=0}^{m-1}\left[cj+c\leqslant ai+b\right]\\&=\sum_{i=0}^{n}\sum_{j=0}^{m-1}\left[ai\geqslant cj+c-b\right]\\&=\sum_{i=0}^{n}\sum_{j=0}^{m-1}\left[i\geqslant\cfrac{cj+c-b}{a}\right]\\\end{aligned}</script><p>然后我们发现，我们可能需要在$\cfrac{cj+c-b}{a}$周围来一个上取整，然而上取整并没有什么比较好的性质。</p><p>考虑转换一下思路。既然$cj+c\leqslant ai+b$，我们就有$cj+c\lt ai+b+1$，然后再往下</p><script type="math/tex; mode=display">\begin{aligned}f(n,a,b,c)&=\sum_{i=0}^{n}\sum_{j=0}^{m-1}\left[cj+c\lt ai+b+1\right]\\&=\sum_{i=0}^{n}\sum_{j=0}^{m-1}\left[ai\gt cj+c-b-1\right]\\&=\sum_{i=0}^{n}\sum_{j=0}^{m-1}\left[i\gt\lfloor\cfrac{cj+c-b-1}{a}\rfloor\right]\\&=\sum_{j=0}^{m-1}\left(n-\lfloor\cfrac{cj+c-b-1}{a}\rfloor\right)\\&=mn-\sum_{j=0}^{m-1}\lfloor\cfrac{cj+c-b-1}{a}\rfloor\\&=mn-f(m-1,c,c-b-1,a)\end{aligned}</script><p>然后我们看到，这个函数它递归了！</p><p>注意到$(a,b,c)$变成了$(c,c-b-1,a)$，虽然我不是很能理解，反正这个东西最多递归$\log a$次，时间复杂度就是$O(\log a)$了。</p><p>然后考虑$g(n,a,b,c)$。</p><p>$a\geqslant c\vee b\geqslant c$：</p><script type="math/tex; mode=display">\begin{aligned}g(n,a,b,c)&=\sum_{i=0}^{n}i\lfloor\cfrac{ai+b}{c}\rfloor\\&=\sum_{i=0}^{n}\left(i\lfloor\cfrac{(a\operatorname{mod}c)i+(b\operatorname{mod}c)}{c}\rfloor+i^{2}\lfloor\cfrac{a}{c}\rfloor+i\lfloor\cfrac{b}{c}\rfloor\right)\\&=\sum_{i=0}^{n}i\lfloor\cfrac{(a\operatorname{mod}c)i+(b\operatorname{mod}c)}{c}\rfloor+\cfrac{n(n+1)(2n+1)}{6}\lfloor\cfrac{a}{c}\rfloor+\cfrac{n(n+1)}{2}\lfloor\cfrac{b}{c}\rfloor\\&=g(n,a\operatorname{mod}c,b\operatorname{mod}c,c)+\cfrac{n(n+1)(2n+1)}{6}\lfloor\cfrac{a}{c}\rfloor+\cfrac{n(n+1)}{2}\lfloor\cfrac{b}{c}\rfloor\end{aligned}</script><p>$a\lt c\wedge b\lt c$，当然$m$还是$\lfloor\cfrac{an+b}{c}\rfloor$：</p><script type="math/tex; mode=display">\begin{aligned}g(n,a,b,c)&=\sum_{i=0}^{n}i\lfloor\cfrac{ai+b}{c}\rfloor\\&=\sum_{i=0}^{n}\sum_{j=1}^{m}i\left[j\leqslant\lfloor\cfrac{ai+b}{c}\rfloor\right]\\&=\sum_{i=0}^{n}\sum_{j=0}^{m-1}i\left[i\gt\lfloor\cfrac{cj+c-b-1}{a}\rfloor\right]\end{aligned}</script><p>我们可以把上面这个式子理解成$\gt\lfloor\cfrac{cj+c-b-1}{a}\rfloor$且$\leqslant n$的所有自然数之和，于是差分一下我们得到</p><script type="math/tex; mode=display">\begin{aligned}g(n,a,b,c)&=\sum_{j=0}^{m-1}\left(\cfrac{n(n+1)}{2}-\cfrac{1}{2}\lfloor\cfrac{cj+c-b-1}{a}\rfloor^{2}-\cfrac{1}{2}\lfloor\cfrac{cj+c-b-1}{a}\rfloor\right)\\&=\cfrac{mn(n+1)}{2}-\cfrac{1}{2}\sum_{j=0}^{m-1}\lfloor\cfrac{cj+c-b-1}{a}\rfloor^{2}-\cfrac{1}{2}\sum_{j=0}^{m-1}\lfloor\cfrac{cj+c-b-1}{a}\rfloor\\&=\cfrac{mn(n+1)}{2}-\cfrac{1}{2}h(m-1,c,c-b-1,a)-\cfrac{1}{2}f(m-1,c,c-b-1,a)\end{aligned}</script><p>我们看到这个函数调用了$h(n,a,b,c)$，我们接下来就来研究一下这个函数。</p><p>$a\geqslant c\vee b\geqslant c$：</p><script type="math/tex; mode=display">\begin{aligned}h(n,a,b,c)&=\sum_{i=0}^{n}\lfloor\cfrac{ai+b}{c}\rfloor^{2}\\&=\sum_{i=0}^{n}\left(\lfloor\cfrac{(a\operatorname{mod}c)i+(b\operatorname{mod}c)}{c}\rfloor+i\lfloor\cfrac{a}{c}\rfloor+\lfloor\cfrac{b}{c}\rfloor\right)^{2}\\&=\sum_{i=0}^{n}\left(\lfloor\cfrac{(a\operatorname{mod}c)i+(b\operatorname{mod}c)}{c}\rfloor^{2}+i^{2}\lfloor\cfrac{a}{c}\rfloor^{2}+\lfloor\cfrac{b}{c}\rfloor^{2}+2i\lfloor\cfrac{a}{c}\rfloor\lfloor\cfrac{(a\operatorname{mod}c)i+(b\operatorname{mod}c)}{c}\rfloor+2\lfloor\cfrac{b}{c}\rfloor\lfloor\cfrac{(a\operatorname{mod}c)i+(b\operatorname{mod}c)}{c}\rfloor+2i\lfloor\cfrac{a}{c}\rfloor\lfloor\cfrac{b}{c}\rfloor\right)\\&=\sum_{i=0}^{n}\lfloor\cfrac{(a\operatorname{mod}c)i+(b\operatorname{mod}c)}{c}\rfloor^{2}+\cfrac{n(n+1)(2n+1)}{6}\lfloor\cfrac{a}{c}\rfloor^{2}+(n+1)\lfloor\cfrac{b}{c}\rfloor^{2}\\&+2\lfloor\cfrac{a}{c}\rfloor\sum_{i=0}^{n}i\lfloor\cfrac{(a\operatorname{mod}c)i+(b\operatorname{mod}c)}{c}\rfloor+2\lfloor\cfrac{b}{c}\rfloor\sum_{i=0}^{n}\lfloor\cfrac{(a\operatorname{mod}c)i+(b\operatorname{mod}c)}{c}\rfloor+n(n+1)\lfloor\cfrac{a}{c}\rfloor\lfloor\cfrac{b}{c}\rfloor\\&=h(n,a\operatorname{mod}c,b\operatorname{mod}c,c)+2\lfloor\cfrac{a}{c}\rfloor g(n,a\operatorname{mod}c,b\operatorname{mod}c,c)+2\lfloor\cfrac{b}{c}\rfloor f(n,a\operatorname{mod}c,b\operatorname{mod}c,c)\\&+\cfrac{n(n+1)(2n+1)}{6}\lfloor\cfrac{a}{c}\rfloor^{2}+(n+1)\lfloor\cfrac{b}{c}\rfloor^{2}+n(n+1)\lfloor\cfrac{a}{c}\rfloor\lfloor\cfrac{b}{c}\rfloor\end{aligned}</script><p>您绝对想象不到上面这一坨子东西的$\TeX$源码长什么样（</p><p>$a\lt c\wedge b\lt c$：</p><script type="math/tex; mode=display">\begin{aligned}h(n,a,b,c)&=\sum_{i=0}^{n}\lfloor\cfrac{ai+b}{c}\rfloor^{2}\\&=\sum_{i=0}^{n}\sum_{j=1}^{m^{2}}\left[j\leqslant\lfloor\cfrac{ai+b}{c}\rfloor^{2}\right]\\&=\sum_{i=0}^{n}\sum_{j=0}^{m^{2}-1}\left[c^{2}j+c^{2}\lt a^{2}i^{2}+2abi+b^{2}+1\right]\\&=\sum_{i=0}^{n}\sum_{j=0}^{m^{2}-1}\left[i\gt\sqrt{\lfloor\cfrac{c^{2}j+c^{2}-2abi-b^{2}-1}{a^{2}}\rfloor}\right]\end{aligned}</script><p><img src="https://i.loli.net/2019/01/10/5c36e7ca7de6a.jpg" alt=""></p><p>然后我们发现推不下去了。</p><p>不过办法总是有的。首先我们有一个看起来没啥用的式子</p><script type="math/tex; mode=display">x^{2}=2\sum_{i=1}^{n}i-x</script><p>套进去</p><script type="math/tex; mode=display">\begin{aligned}h(n,a,b,c)&=\sum_{i=0}^{n}\lfloor\cfrac{ai+b}{c}\rfloor^{2}\\&=\sum_{i=0}^{n}\left(2\sum_{j=1}^{\lfloor\tfrac{ai+b}{c}\rfloor}j-\lfloor\cfrac{ai+b}{c}\rfloor\right)\\&=2\sum_{i=0}^{n}\sum_{j=1}^{\lfloor\tfrac{ai+b}{c}\rfloor}j-\sum_{i=0}^{n}\lfloor\cfrac{ai+b}{c}\rfloor\\&=2\sum_{j=1}^{m}j\sum_{i=0}^{n}\left[j\leqslant\lfloor\cfrac{ai+b}{c}\rfloor\right]-f(n,a,b,c)\\&=2\sum_{j=0}^{m-1}(j+1)\sum_{i=0}^{n}\left[i\gt\lfloor\cfrac{cj+c-b-1}{a}\rfloor\right]-f(n,a,b,c)\\&=2\sum_{j=0}^{m-1}(j+1)\left(n-\lfloor\cfrac{cj+c-b-1}{a}\rfloor\right)-f(n,a,b,c)\\&=m(m+1)n-2\sum_{j=0}^{m-1}j\lfloor\cfrac{cj+c-b-1}{a}\rfloor-2\sum_{j=0}^{m-1}\lfloor\cfrac{cj+c-b-1}{a}\rfloor-f(n,a,b,c)\\&=m(m+1)n-2g(m-1,c,c-b-1,a)-2f(m-1,c,c-b-1,a)-f(n,a,b,c)\\\end{aligned}</script><p>然后我们看到它奇迹般地递归了！</p><p>我们来总结一下。</p><script type="math/tex; mode=display">f(n,a,b,c)=\sum_{i=0}^{n}\lfloor\cfrac{ai+b}{c}\rfloor=\begin{cases}&f(n,a\operatorname{mod}c,b\operatorname{mod}c,c)+\cfrac{n(n+1)}{2}\lfloor\cfrac{a}{c}\rfloor+(n+1)\lfloor\cfrac{b}{c}\rfloor\;\;&(a\geqslant c\vee b\geqslant c)\\&mn-f(m-1,c,c-b-1,a)&(a\lt c\wedge b\lt c)\end{cases}</script><script type="math/tex; mode=display">g(n,a,b,c)=\sum_{i=0}^{n}i\lfloor\cfrac{ai+b}{c}\rfloor=\begin{cases}&g(n,a\operatorname{mod}c,b\operatorname{mod}c,c)+\cfrac{n(n+1)(2n+1)}{6}\lfloor\cfrac{a}{c}\rfloor+\cfrac{n(n+1)}{2}\lfloor\cfrac{b}{c}\rfloor\;\;&(a\geqslant c\vee b\geqslant c)\\&\cfrac{mn(n+1)}{2}-\cfrac{1}{2}h(m-1,c,c-b-1,a)-\cfrac{1}{2}f(m-1,c,c-b-1,a)&(a\lt c\wedge b\lt c)\end{cases}</script><script type="math/tex; mode=display">h(n,a,b,c)=\sum_{i=0}^{n}\lfloor\cfrac{ai+b}{c}\rfloor^{2}=\begin{cases}&h(n,a\operatorname{mod}c,b\operatorname{mod}c,c)+2\lfloor\cfrac{a}{c}\rfloor g(n,a\operatorname{mod}c,b\operatorname{mod}c,c)+2\lfloor\cfrac{b}{c}\rfloor f(n,a\operatorname{mod}c,b\operatorname{mod}c,c)\\&+\cfrac{n(n+1)(2n+1)}{6}\lfloor\cfrac{a}{c}\rfloor^{2}+(n+1)\lfloor\cfrac{b}{c}\rfloor^{2}+n(n+1)\lfloor\cfrac{a}{c}\rfloor\lfloor\cfrac{b}{c}\rfloor\;\;&(a\geqslant c\vee b\geqslant c)\\&m(m+1)n-2g(m-1,c,c-b-1,a)-2f(m-1,c,c-b-1,a)-f(n,a,b,c)&(a\lt c\wedge b\lt c)\end{cases}</script><p>但是还有一个细节，如果说$n=0$或$a=0$，我们需要直接特判，大概像这样：</p><script type="math/tex; mode=display">f(n,a,b,c)=\begin{cases}&\lfloor\cfrac{b}{c}\rfloor\;\;&(n=0)\\&(n+1)\lfloor\cfrac{b}{c}\rfloor&(a=0)\end{cases}</script><script type="math/tex; mode=display">g(n,a,b,c)=\begin{cases}&0\;\;&(n=0)\\&\cfrac{n(n+1)}{2}\lfloor\cfrac{b}{c}\rfloor&(a=0)\end{cases}</script><script type="math/tex; mode=display">h(n,a,b,c)=\begin{cases}&\lfloor\cfrac{b}{c}\rfloor^{2}&(n=0)\\&(n+1)\lfloor\cfrac{b}{c}\rfloor^{2}&(a=0)\end{cases}</script><p>另外写的时候注意三个函数值要套在结构体里一起算，不然还是会T。</p><div><div class="fold_hider"><div class="close hider_title">Toggle Code</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> cltstream&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> size 1048576</span></span><br><span class="line">    <span class="keyword">char</span> cltin[size+<span class="number">1</span>],*ih=cltin,*it=cltin;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">ifdef</span> ONLINE_JUDGE</span></span><br><span class="line">            <span class="keyword">if</span>(ih==it)&#123;</span><br><span class="line">                it=(ih=cltin)+fread(cltin,<span class="number">1</span>,size,<span class="built_in">stdin</span>);</span><br><span class="line">                <span class="keyword">if</span>(ih==it)</span><br><span class="line">                    <span class="keyword">return</span> EOF;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> *ih++;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">            <span class="keyword">return</span> getchar();</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> cltout[size+<span class="number">1</span>],*oh=cltout,*ot=cltout+size;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pc</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(oh==ot)&#123;</span><br><span class="line">            fwrite(cltout,<span class="number">1</span>,size,<span class="built_in">stdout</span>);</span><br><span class="line">            oh=cltout;</span><br><span class="line">        &#125;</span><br><span class="line">        *oh++=c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> clop() fwrite(cltstream::cltout,1,cltstream::oh-cltstream::cltout,stdout),cltstream::oh=cltstream::cltout</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> size</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _tp&gt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(_tp&amp; x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sn=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">char</span> c=gc();</span><br><span class="line">        <span class="keyword">for</span>(;c!=<span class="number">45</span>&amp;&amp;(c&lt;<span class="number">48</span>||c&gt;<span class="number">57</span>)&amp;&amp;c!=EOF;c=gc());</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="number">45</span>&amp;&amp;c!=EOF)</span><br><span class="line">            sn=<span class="number">-1</span>,c=gc();</span><br><span class="line">        <span class="keyword">for</span>(x=<span class="number">0</span>;c&gt;=<span class="number">48</span>&amp;&amp;c&lt;=<span class="number">57</span>&amp;&amp;c!=EOF;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>),c=gc());</span><br><span class="line">        x*=sn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _tp&gt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(_tp x,<span class="keyword">char</span> text=<span class="number">-1</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">            pc(<span class="number">45</span>),x=-x;</span><br><span class="line">        <span class="keyword">if</span>(!x)</span><br><span class="line">            pc(<span class="number">48</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> digit[<span class="number">22</span>];</span><br><span class="line">            <span class="keyword">for</span>(digit[<span class="number">0</span>]=<span class="number">0</span>;x;digit[++digit[<span class="number">0</span>]]=x%<span class="number">10</span>,x/=<span class="number">10</span>);</span><br><span class="line">            <span class="keyword">for</span>(;digit[<span class="number">0</span>];pc(digit[digit[<span class="number">0</span>]--]^<span class="number">48</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(text&gt;=<span class="number">0</span>)</span><br><span class="line">            pc(text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> t,a,b,c,n,I2=<span class="number">499122177</span>,I6=<span class="number">166374059</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> f,g,h;</span><br><span class="line"></span><br><span class="line">    Query(re <span class="keyword">int</span> _f,re <span class="keyword">int</span> _g,re <span class="keyword">int</span> _h)&#123;</span><br><span class="line">        f=_f;</span><br><span class="line">        g=_g;</span><br><span class="line">        h=_h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> Query <span class="title">query</span><span class="params">(re <span class="keyword">int</span> a,re <span class="keyword">int</span> b,re <span class="keyword">int</span> c,re <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!n)&#123;</span><br><span class="line">        b/=c;</span><br><span class="line">        <span class="keyword">return</span> Query(b,<span class="number">0</span>,<span class="number">1L</span>L*b*b%mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!a)&#123;</span><br><span class="line">        b/=c;</span><br><span class="line">        <span class="keyword">return</span> Query(<span class="number">1L</span>L*(n+<span class="number">1</span>)*b%mod,<span class="number">1L</span>L*n*(n+<span class="number">1</span>)%mod*I2%mod*b%mod,<span class="number">1L</span>L*(n+<span class="number">1</span>)*b%mod*b%mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;=c||b&gt;=c)&#123;</span><br><span class="line">        re Query res=query(a%c,b%c,c,n);</span><br><span class="line">        a/=c,</span><br><span class="line">        b/=c;</span><br><span class="line">        <span class="keyword">return</span> Query(</span><br><span class="line">            (res.f+<span class="number">1L</span>L*n*(n+<span class="number">1</span>)%mod*I2%mod*a%mod+<span class="number">1L</span>L*(n+<span class="number">1</span>)*b%mod)%mod,</span><br><span class="line">            (res.g+<span class="number">1L</span>L*n*(n+<span class="number">1</span>)%mod*(<span class="number">2</span>*n+<span class="number">1</span>)%mod*I6%mod*a%mod+<span class="number">1L</span>L*n*(n+<span class="number">1</span>)%mod*I2%mod*b%mod)%mod,</span><br><span class="line">            (res.h+<span class="number">2L</span>L*a*res.g%mod+<span class="number">2L</span>L*b*res.f%mod</span><br><span class="line">                  +<span class="number">1L</span>L*n*(n+<span class="number">1</span>)%mod*(<span class="number">2</span>*n+<span class="number">1</span>)%mod*I6%mod*a%mod*a%mod</span><br><span class="line">                  +<span class="number">1L</span>L*(n+<span class="number">1</span>)*b%mod*b%mod+<span class="number">1L</span>L*n*(n+<span class="number">1</span>)%mod*a%mod*b%mod)%mod</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        re <span class="keyword">int</span> m=(<span class="number">1L</span>L*a*n+b)/c;</span><br><span class="line">        re Query res=query(c,c-b<span class="number">-1</span>,a,m<span class="number">-1</span>);</span><br><span class="line">        re <span class="keyword">int</span> tmp=((<span class="number">1L</span>L*m*n%mod-res.f)%mod+mod)%mod;</span><br><span class="line">        <span class="keyword">return</span> Query(</span><br><span class="line">            tmp,</span><br><span class="line">            ((<span class="number">1L</span>L*m*n%mod*(n+<span class="number">1</span>)%mod-res.h-res.f)%mod+mod)*I2%mod,</span><br><span class="line">            ((<span class="number">1L</span>L*m*(m+<span class="number">1</span>)%mod*n%mod<span class="number">-2L</span>L*res.g%mod<span class="number">-2L</span>L*res.f%mod-tmp)%mod+mod)%mod</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cltstream::read(t);</span><br><span class="line">    <span class="keyword">for</span>(;t;--t)&#123;</span><br><span class="line">        cltstream::read(n);</span><br><span class="line">        cltstream::read(a);</span><br><span class="line">        cltstream::read(b);</span><br><span class="line">        cltstream::read(c);</span><br><span class="line">        Query ans=query(a,b,c,n);</span><br><span class="line">        cltstream::write(ans.f,<span class="number">32</span>);</span><br><span class="line">        cltstream::write(ans.h,<span class="number">32</span>);</span><br><span class="line">        cltstream::write(ans.g,<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    clop();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p>那么问题来了，这个东西有什么用啊。</p><p><del>没啥用（</del></p><p>其他的模板题我就不举了，我们来看一下<a href="https://www.luogu.org/problemnew/show/P4433" target="_blank" rel="noopener">这样一道题</a>。</p><p>看到推平操作我们可以直接往珂朵莉树上想了。</p><p>那么对于被推平的一段区间，我们将其压成一个节点丢到珂朵莉树上，然后维护六个信息<code>l,r,L,R,a,b</code>，表示其对应原序列中的$[l,r]$这段区间，里面一共有$\sum_{i=L}^{R}ai\operatorname{mod}b$颗石头。注意这里的<code>l,r,L,R</code>一定不要搞混<del>，我就是因为这样WA了整整四遍（</del>。</p><p><del>这三个样例一定是故意的。</del></p><p>然后每次我们初始化一个节点的时候直接算出节点内的石头总数，像下面这样：</p><script type="math/tex; mode=display">\sum_{i=L}^{R}ai\operatorname{mod}b=\sum_{i=L}^{R}\left(ai-\lfloor\cfrac{ai}{b}\rfloor b\right)=\cfrac{(R+L)(R-L+1)}{2}-\sum_{i=0}^{R}\lfloor\cfrac{ai}{b}\rfloor b+\sum_{i=0}^{L-1}\lfloor\cfrac{ai}{b}\rfloor b</script><p>直接一波板子套上去。</p><p>还有就是，这么算的话中间量会爆<code>long long</code>，我们可以考虑用<code>__int128_t</code>来存。不过这个类型在本地一般是编译不了的，虽然说交到OJ上基本没问题。我们可以</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> int __int128_t</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>然后把一些没必要用或者是不能用<code>__int128_t</code>的改成<code>signed</code>即可。</p><p>代码还是有必要贴一下的。</p><div><div class="fold_hider"><div class="close hider_title">Toggle Code</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _it std::set<span class="meta-string">&lt;node&gt;::iterator</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> ONLINE_JUDGE</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> int __int128_t</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> cltstream&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> size 1048576</span></span><br><span class="line">    <span class="keyword">char</span> cltin[size+<span class="number">1</span>],*ih=cltin,*it=cltin;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">ifdef</span> ONLINE_JUDGE</span></span><br><span class="line">            <span class="keyword">if</span>(ih==it)&#123;</span><br><span class="line">                it=(ih=cltin)+fread(cltin,<span class="number">1</span>,size,<span class="built_in">stdin</span>);</span><br><span class="line">                <span class="keyword">if</span>(ih==it)</span><br><span class="line">                    <span class="keyword">return</span> EOF;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> *ih++;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">            <span class="keyword">return</span> getchar();</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> cltout[size+<span class="number">1</span>],*oh=cltout,*ot=cltout+size;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pc</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(oh==ot)&#123;</span><br><span class="line">            fwrite(cltout,<span class="number">1</span>,size,<span class="built_in">stdout</span>);</span><br><span class="line">            oh=cltout;</span><br><span class="line">        &#125;</span><br><span class="line">        *oh++=c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> clop() fwrite(cltstream::cltout,1,cltstream::oh-cltstream::cltout,stdout),cltstream::oh=cltstream::cltout</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> size</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _tp&gt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(_tp&amp; x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">signed</span> sn=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">char</span> c=gc();</span><br><span class="line">        <span class="keyword">for</span>(;c!=<span class="number">45</span>&amp;&amp;(c&lt;<span class="number">48</span>||c&gt;<span class="number">57</span>)&amp;&amp;c!=EOF;c=gc());</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="number">45</span>&amp;&amp;c!=EOF)</span><br><span class="line">            sn=<span class="number">-1</span>,c=gc();</span><br><span class="line">        <span class="keyword">for</span>(x=<span class="number">0</span>;c&gt;=<span class="number">48</span>&amp;&amp;c&lt;=<span class="number">57</span>&amp;&amp;c!=EOF;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>),c=gc());</span><br><span class="line">        x*=sn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _tp&gt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(_tp x,<span class="keyword">char</span> text=<span class="number">-1</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">            pc(<span class="number">45</span>),x=-x;</span><br><span class="line">        <span class="keyword">if</span>(!x)</span><br><span class="line">            pc(<span class="number">48</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">signed</span> digit[<span class="number">50</span>];</span><br><span class="line">            <span class="keyword">for</span>(digit[<span class="number">0</span>]=<span class="number">0</span>;x;digit[++digit[<span class="number">0</span>]]=x%<span class="number">10</span>,x/=<span class="number">10</span>);</span><br><span class="line">            <span class="keyword">for</span>(;digit[<span class="number">0</span>];pc(digit[digit[<span class="number">0</span>]--]^<span class="number">48</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(text&gt;=<span class="number">0</span>)</span><br><span class="line">            pc(text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">simEuc</span><span class="params">(re <span class="keyword">int</span> n,re <span class="keyword">int</span> a,re <span class="keyword">int</span> b,re <span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!n)</span><br><span class="line">        <span class="keyword">return</span> b/c;</span><br><span class="line">    <span class="keyword">if</span>(!a)</span><br><span class="line">        <span class="keyword">return</span> (n+<span class="number">1</span>)*(b/c);</span><br><span class="line">    <span class="keyword">if</span>(a&gt;=c||b&gt;=c)&#123;</span><br><span class="line">        re <span class="keyword">int</span> res=simEuc(n,a%c,b%c,c);</span><br><span class="line">        <span class="keyword">return</span> res+n*(n+<span class="number">1</span>)*(a/c)/<span class="number">2</span>+(n+<span class="number">1</span>)*(b/c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        re <span class="keyword">int</span> m=(a*n+b)/c;</span><br><span class="line">        <span class="keyword">return</span> m*n-simEuc(m<span class="number">-1</span>,c,c-b<span class="number">-1</span>,a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l,r,L,R,a,b,sum;</span><br><span class="line"></span><br><span class="line">    node(re <span class="keyword">int</span> _l,re <span class="keyword">int</span> _r,re <span class="keyword">int</span> _L,re <span class="keyword">int</span> _R,re <span class="keyword">int</span> _a,re <span class="keyword">int</span> _b)&#123;</span><br><span class="line">        l=_l;</span><br><span class="line">        r=_r;</span><br><span class="line">        L=_L;</span><br><span class="line">        R=_R;</span><br><span class="line">        a=_a;</span><br><span class="line">        b=_b;</span><br><span class="line">        sum=(R+L)*(R-L+<span class="number">1</span>)*a/<span class="number">2</span>-simEuc(R,a,<span class="number">0</span>,b)*b+simEuc(L<span class="number">-1</span>,a,<span class="number">0</span>,b)*b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">set</span>&lt;node&gt; s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(re node p1,re node p2)&#123;</span><br><span class="line">    <span class="keyword">return</span> p1.l&lt;p2.l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> _<span class="function">it <span class="title">split</span><span class="params">(re <span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">    re _it it=s.lower_bound(node(pos,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">if</span>(it!=s.end()&amp;&amp;it-&gt;l==pos)</span><br><span class="line">        <span class="keyword">return</span> it;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        --it;</span><br><span class="line">        re <span class="keyword">int</span> l=it-&gt;l,r=it-&gt;r,L=it-&gt;L,R=it-&gt;R,a=it-&gt;a,b=it-&gt;b;</span><br><span class="line">        s.erase(it);</span><br><span class="line">        s.insert(node(l,pos<span class="number">-1</span>,L,L+pos-l<span class="number">-1</span>,a,b));</span><br><span class="line">        <span class="keyword">return</span> s.insert(node(pos,r,L+pos-l,R,a,b)).first;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">modifyStone</span><span class="params">(re <span class="keyword">int</span> l,re <span class="keyword">int</span> r,re <span class="keyword">int</span> a,re <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    re _it itr=split(r+<span class="number">1</span>),itl=split(l);</span><br><span class="line">    s.erase(itl,itr);</span><br><span class="line">    s.insert(node(l,r,<span class="number">1</span>,r-l+<span class="number">1</span>,a,b));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">queryStone</span><span class="params">(re <span class="keyword">int</span> l,re <span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    re _it itr=split(r+<span class="number">1</span>),itl=split(l);</span><br><span class="line">    re <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;itl!=itr;res+=itl-&gt;sum,++itl);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cltstream::read(n);</span><br><span class="line">    cltstream::read(m);</span><br><span class="line">    s.insert(node(<span class="number">1</span>,n,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        re <span class="keyword">int</span> opt,l,r,a,b;</span><br><span class="line">        cltstream::read(opt);</span><br><span class="line">        cltstream::read(l);</span><br><span class="line">        cltstream::read(r);</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>)&#123;</span><br><span class="line">            cltstream::read(a);</span><br><span class="line">            cltstream::read(b);</span><br><span class="line">            modifyStone(l,r,a,b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            cltstream::write(queryStone(l,r),<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    clop();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实我也不知道这个算法的英文名是啥（&lt;/p&gt;
&lt;p&gt;我就yy出来一个「Similar Euclid Algorithm」（&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://github.com/Challestend/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="数论" scheme="https://github.com/Challestend/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="类欧几里得" scheme="https://github.com/Challestend/tags/%E7%B1%BB%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>「HEOI2012」采花</title>
    <link href="https://github.com/Challestend/luogu-p4113-solution/"/>
    <id>https://github.com/Challestend/luogu-p4113-solution/</id>
    <published>2019-01-07T11:05:03.000Z</published>
    <updated>2019-02-13T00:16:28.185Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P4113" target="_blank" rel="noopener">传送门</a></p><p><a href="https://dftyem.github.io/2019/01/07/HEOI2012-采花/" target="_blank" rel="noopener">Taduro的题解</a></p><p>sto <strong>Taduro</strong> orz</p><a id="more"></a><p>首先，读完题一定有人要跳出来喊「莫队！」。</p><p><del>莫队！</del></p><p>然后再一看数据范围</p><blockquote><p>对于$100\%$的数据，$1\leqslant c\leqslant n,m\leqslant 2\times 10^{6}$。</p></blockquote><p><del>笑容逐渐消失。</del></p><p>然后根据数据范围，我们不难猜出正解是树状数组。然后问题来了<del>，树状数组什么时候有这种操作了</del>。</p><p>首先这个样例比较菜，我们手造一个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 6 2 4 2 3 6 2</span><br></pre></td></tr></table></figure><p>首先我们维护一个<code>nxt</code>数组，表示当前颜色下一次出现的位置，不存在的话就是$0$。上面的样例对应的<code>nxt</code>差不多长这样：</p><div class="table-container"><table><thead><tr><th style="text-align:center"><code>i</code></th><th style="text-align:center">$1$</th><th style="text-align:center">$2$</th><th style="text-align:center">$3$</th><th style="text-align:center">$4$</th><th style="text-align:center">$5$</th><th style="text-align:center">$6$</th><th style="text-align:center">$7$</th><th style="text-align:center">$8$</th></tr></thead><tbody><tr><td style="text-align:center"><code>c[i]</code></td><td style="text-align:center">$1$</td><td style="text-align:center">$6$</td><td style="text-align:center">$2$</td><td style="text-align:center">$4$</td><td style="text-align:center">$2$</td><td style="text-align:center">$3$</td><td style="text-align:center">$6$</td><td style="text-align:center">$2$</td></tr><tr><td style="text-align:center"><code>nxt[i]</code></td><td style="text-align:center">$0$</td><td style="text-align:center">$7$</td><td style="text-align:center">$5$</td><td style="text-align:center">$0$</td><td style="text-align:center">$8$</td><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td></tr></tbody></table></div><p>然后我们把所有询问离线下来，以左端点为第一关键字，右端点为第二关键字排一下序。维护一个指针，让它一直跟着当前询问的左端点走。一开始它在$1$。</p><p>然后我们还需要一个数组<code>ans</code>，对于每一种颜色，我们令<strong>其在指针所在位置及其之后的部分中第二次出现的位置</strong>的<code>ans</code>为$1$。</p><div class="table-container"><table><thead><tr><th style="text-align:center"><code>i</code></th><th style="text-align:center">$1$</th><th style="text-align:center">$2$</th><th style="text-align:center">$3$</th><th style="text-align:center">$4$</th><th style="text-align:center">$5$</th><th style="text-align:center">$6$</th><th style="text-align:center">$7$</th><th style="text-align:center">$8$</th></tr></thead><tbody><tr><td style="text-align:center"><code>c[i]</code></td><td style="text-align:center">$1$</td><td style="text-align:center">$6$</td><td style="text-align:center">$2$</td><td style="text-align:center">$4$</td><td style="text-align:center">$2$</td><td style="text-align:center">$3$</td><td style="text-align:center">$6$</td><td style="text-align:center">$2$</td></tr><tr><td style="text-align:center"><code>ans[i]</code></td><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td><td style="text-align:center">$1$</td><td style="text-align:center">$0$</td><td style="text-align:center">$1$</td><td style="text-align:center">$0$</td></tr></tbody></table></div><p>因为一种颜色第一次出现不会被统计，第二次出现才会被统计，在这之后就算再出现也不会多统计了。</p><p>不难发现，此时$\sum_{i=1}^{x}ans[i]$就是询问<code>1 x</code>的答案。</p><p>需要移动指针时，我们每次只移动一个位置。移动完之后，移动前指针所在位置的颜色第二次出现的位置就变成了第一次出现，因此我们需要将这个位置上的<code>ans</code>置为$0$。同理，第三次就变成了第二次，因此我们需要将其置为$1$。因为我们每次只移动一个位置，所以说只有一个颜色的状态会发生变化。</p><p>这个时候<code>nxt</code>数组就派上用场了，我们可以通过它块速地定位到当前颜色后面的出现位置。</p><p>让我们以上面的样例为例，稍微模拟一下指针的移动（下划线表示指针当前位置）：</p><div class="table-container"><table><thead><tr><th style="text-align:center"><code>i</code></th><th style="text-align:center">$\underline{1}$</th><th style="text-align:center">$2$</th><th style="text-align:center">$3$</th><th style="text-align:center">$4$</th><th style="text-align:center">$5$</th><th style="text-align:center">$6$</th><th style="text-align:center">$7$</th><th style="text-align:center">$8$</th></tr></thead><tbody><tr><td style="text-align:center"><code>c[i]</code></td><td style="text-align:center">$1$</td><td style="text-align:center">$6$</td><td style="text-align:center">$2$</td><td style="text-align:center">$4$</td><td style="text-align:center">$2$</td><td style="text-align:center">$3$</td><td style="text-align:center">$6$</td><td style="text-align:center">$2$</td></tr><tr><td style="text-align:center"><code>ans[i]</code></td><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td><td style="text-align:center">$1$</td><td style="text-align:center">$0$</td><td style="text-align:center">$1$</td><td style="text-align:center">$0$</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:center"><code>i</code></th><th style="text-align:center">$1$</th><th style="text-align:center">$\underline{2}$</th><th style="text-align:center">$3$</th><th style="text-align:center">$4$</th><th style="text-align:center">$5$</th><th style="text-align:center">$6$</th><th style="text-align:center">$7$</th><th style="text-align:center">$8$</th></tr></thead><tbody><tr><td style="text-align:center"><code>c[i]</code></td><td style="text-align:center">$1$</td><td style="text-align:center">$6$</td><td style="text-align:center">$2$</td><td style="text-align:center">$4$</td><td style="text-align:center">$2$</td><td style="text-align:center">$3$</td><td style="text-align:center">$6$</td><td style="text-align:center">$2$</td></tr><tr><td style="text-align:center"><code>ans[i]</code></td><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td><td style="text-align:center">$1$</td><td style="text-align:center">$0$</td><td style="text-align:center">$1$</td><td style="text-align:center">$0$</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:center"><code>i</code></th><th style="text-align:center">$1$</th><th style="text-align:center">$2$</th><th style="text-align:center">$\underline{3}$</th><th style="text-align:center">$4$</th><th style="text-align:center">$5$</th><th style="text-align:center">$6$</th><th style="text-align:center">$7$</th><th style="text-align:center">$8$</th></tr></thead><tbody><tr><td style="text-align:center"><code>c[i]</code></td><td style="text-align:center">$1$</td><td style="text-align:center">${\color{red}6}$</td><td style="text-align:center">$2$</td><td style="text-align:center">$4$</td><td style="text-align:center">$2$</td><td style="text-align:center">$3$</td><td style="text-align:center">${\color{red}6}$</td><td style="text-align:center">$2$</td></tr><tr><td style="text-align:center"><code>ans[i]</code></td><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td><td style="text-align:center">$1$</td><td style="text-align:center">$0$</td><td style="text-align:center">${\color{red}0}$</td><td style="text-align:center">$0$</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th style="text-align:center"><code>i</code></th><th style="text-align:center">$1$</th><th style="text-align:center">$2$</th><th style="text-align:center">$3$</th><th style="text-align:center">$\underline{4}$</th><th style="text-align:center">$5$</th><th style="text-align:center">$6$</th><th style="text-align:center">$7$</th><th style="text-align:center">$8$</th></tr></thead><tbody><tr><td style="text-align:center"><code>c[i]</code></td><td style="text-align:center">$1$</td><td style="text-align:center">$6$</td><td style="text-align:center">${\color{red}2}$</td><td style="text-align:center">$4$</td><td style="text-align:center">${\color{red}2}$</td><td style="text-align:center">$3$</td><td style="text-align:center">$6$</td><td style="text-align:center">${\color{red}2}$</td></tr><tr><td style="text-align:center"><code>ans[i]</code></td><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td><td style="text-align:center">${\color{red}0}$</td><td style="text-align:center">$0$</td><td style="text-align:center">$0$</td><td style="text-align:center">${\color{red}1}$</td></tr></tbody></table></div><p>对于一次询问<code>l r</code>，我们将指针移动到<code>l</code>这个位置之后查询$\sum_{i=l}^{r}ans[i]$即可。</p><p>代码就不贴了<del>，其实我还没写（</del></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P4113&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dftyem.github.io/2019/01/07/HEOI2012-采花/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Taduro的题解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;sto &lt;strong&gt;Taduro&lt;/strong&gt; orz&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="树状数组" scheme="https://github.com/Challestend/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
      <category term="分块" scheme="https://github.com/Challestend/tags/%E5%88%86%E5%9D%97/"/>
    
      <category term="HEOI" scheme="https://github.com/Challestend/tags/HEOI/"/>
    
      <category term="2012" scheme="https://github.com/Challestend/tags/2012/"/>
    
      <category term="莫队" scheme="https://github.com/Challestend/tags/%E8%8E%AB%E9%98%9F/"/>
    
  </entry>
  
  <entry>
    <title>「AHOI2017/HNOI2017」礼物</title>
    <link href="https://github.com/Challestend/luogu-p3723-solution/"/>
    <id>https://github.com/Challestend/luogu-p3723-solution/</id>
    <published>2019-01-04T03:14:12.000Z</published>
    <updated>2019-02-13T00:16:28.185Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P3723" target="_blank" rel="noopener">传送门</a></p><a id="more"></a><p>首先我们要有一个简单粗暴的暴力。</p><script type="math/tex; mode=display">\min\limits_{x=0}^{n-1}\min\limits_{c_{1}=0,c_{2}=0}^{m}\sum\limits_{i=0}^{n-1}(A_{i}+c_{1}-B_{(i+x)\%n}-c_{2})^{2}</script><p>因为我们关心的只是两个数的差的平方，我们完全可以将$c_{1}$和$c_{2}$这两个非负整数合并成一个整数$c$。</p><script type="math/tex; mode=display">\min\limits_{x=0}^{n-1}\min\limits_{c=-m}^{m}\sum\limits_{i=0}^{n-1}(A_{i}-B_{(i+x)\%n}+c)^{2}</script><p>我们仔细观察一下那个$\Sigma$。</p><script type="math/tex; mode=display">\begin{aligned}&\sum\limits_{i=0}^{n-1}(A_{i}-B_{(i+x)\%n}+c)^{2}\\=&\sum\limits_{i=0}^{n-1}(A_{i}^{2}+B_{(i+x)\%n}^{2}+c^{2}-2A_{i}B_{(i+x)\%n}+2cA_{i}-2cB_{(i+x)\%n})\\=&\sum\limits_{i=0}^{n-1}A_{i}^{2}+\sum\limits_{i=0}^{n-1}B_{i}^{2}+nc^{2}+2c(\sum\limits_{i=0}^{n-1}A_{i}-\sum\limits_{i=0}^{n-1}B_{i})-2\sum\limits_{i=0}^{n-1}A_{i}B_{(i+x)\%n}\end{aligned}</script><p>首先$\Sigma A_{i}^{2}$和$\Sigma B_{i}^{2}$可以看成是常数项。</p><p>$nc^{2}+2c(\Sigma A_{i}-\Sigma B_{i})$可以看成是一个关于$c$的二次函数，令$k=(\Sigma A_{i}-\Sigma B_{i})$，我们知道它在$c=-\cfrac{k}{n}$处取得最小值。但是根据题意，$c$应当是一个整数，因此我们需要将$c=\lfloor -\cfrac{k}{n}\rfloor$和$c=\lceil -\cfrac{k}{n}\rceil$两者都代入原式，然后取较小值。</p><p>然后我们想要求出$\Sigma A_{i}B_{(i+x)\%n}$的最大值，加上上面那两项就是最终答案了。首先这个取模不好搞，我们把它拆开。</p><script type="math/tex; mode=display">\sum\limits_{i=0}^{n-x-1}A_{i}B_{i+x}+\sum\limits_{i=0}^{x-1}A_{i-x+n}B_{i}</script><p>然后我们看到这个东西好像卷积啊，但是卷积要求两个下标加起来是常数，这个下标是加上一个数没办法卷积啊。</p><p>然后一想，我们可以倒过来搞啊。</p><p>定义$F^{R}(x)$是将$F(x)$的系数数组翻转过来得到的新多项式。于是我们可以将上式写成</p><script type="math/tex; mode=display">\begin{aligned}&\sum\limits_{i=0}^{n-x-1}A_{i}B^{R}_{n-x-1-i}+\sum\limits_{i=0}^{x-1}A^{R}_{x-1-i}B_{i}\\=&(AB^{R})_{n-x-1}+(A^{R}B)_{x-1}\end{aligned}</script><p>然后套一波多项式乘法的板子，扫一遍系数求个最大值就行了。需要注意的是当$x=0$的时候就只有$(AB^{R})_{n-1}$一项。</p><p>以下是代码：</p><div><div class="fold_hider"><div class="close hider_title">Toggle Code</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 131072</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(a,b) ((a)&gt;=(b)?(a):(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(a,b) ((a)&lt;=(b)?(a):(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> swap(a,b) a^=b,b^=a,a^=b</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> cltstream&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> size 1048576</span></span><br><span class="line">    <span class="keyword">char</span> cltin[size+<span class="number">1</span>],*ih=cltin,*it=cltin;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">ifdef</span> ONLINE_JUDGE</span></span><br><span class="line">            <span class="keyword">if</span>(ih==it)&#123;</span><br><span class="line">                it=(ih=cltin)+fread(cltin,<span class="number">1</span>,size,<span class="built_in">stdin</span>);</span><br><span class="line">                <span class="keyword">if</span>(ih==it)</span><br><span class="line">                    <span class="keyword">return</span> EOF;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> *ih++;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">            <span class="keyword">return</span> getchar();</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> cltout[size+<span class="number">1</span>],*oh=cltout,*ot=cltout+size;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pc</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(oh==ot)&#123;</span><br><span class="line">            fwrite(cltout,<span class="number">1</span>,size,<span class="built_in">stdout</span>);</span><br><span class="line">            oh=cltout;</span><br><span class="line">        &#125;</span><br><span class="line">        *oh++=c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> clop() fwrite(cltstream::cltout,1,cltstream::oh-cltstream::cltout,stdout),cltstream::oh=cltstream::cltout</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> size</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _tp&gt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(_tp&amp; x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sn=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">char</span> c=gc();</span><br><span class="line">        <span class="keyword">for</span>(;c!=<span class="number">45</span>&amp;&amp;(c&lt;<span class="number">48</span>||c&gt;<span class="number">57</span>)&amp;&amp;c!=EOF;c=gc());</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="number">45</span>&amp;&amp;c!=EOF)</span><br><span class="line">            sn=<span class="number">-1</span>,c=gc();</span><br><span class="line">        <span class="keyword">for</span>(x=<span class="number">0</span>;c&gt;=<span class="number">48</span>&amp;&amp;c&lt;=<span class="number">57</span>&amp;&amp;c!=EOF;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>),c=gc());</span><br><span class="line">        x*=sn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _tp&gt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(_tp x,<span class="keyword">char</span> text=<span class="number">-1</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">            pc(<span class="number">45</span>),x=-x;</span><br><span class="line">        <span class="keyword">if</span>(!x)</span><br><span class="line">            pc(<span class="number">48</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> digit[<span class="number">22</span>];</span><br><span class="line">            <span class="keyword">for</span>(digit[<span class="number">0</span>]=<span class="number">0</span>;x;digit[++digit[<span class="number">0</span>]]=x%<span class="number">10</span>,x/=<span class="number">10</span>);</span><br><span class="line">            <span class="keyword">for</span>(;digit[<span class="number">0</span>];pc(digit[digit[<span class="number">0</span>]--]^<span class="number">48</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(text&gt;=<span class="number">0</span>)</span><br><span class="line">            pc(text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,ans,k,mx;</span><br><span class="line"><span class="keyword">int</span> unit[<span class="number">2</span>][<span class="number">24</span>],rev[maxn+<span class="number">1</span>],A[maxn+<span class="number">1</span>],B[maxn+<span class="number">1</span>],C[maxn+<span class="number">1</span>],D[maxn+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">cltpow</span><span class="params">(re <span class="keyword">int</span> x,re <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    re <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;y;)&#123;</span><br><span class="line">        <span class="keyword">if</span>(y&amp;<span class="number">1</span>)</span><br><span class="line">            res=<span class="number">1L</span>L*res*x%mod;</span><br><span class="line">        x=<span class="number">1L</span>L*x*x%mod;</span><br><span class="line">        y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">NTT</span><span class="params">(re <span class="keyword">int</span>* F,re <span class="keyword">int</span> n,re <span class="keyword">int</span> tp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        <span class="keyword">if</span>(i&lt;rev[i])</span><br><span class="line">            swap(F[i],F[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> k=<span class="number">1</span>,p=<span class="number">1</span>;p&lt;n;++k,p&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i+=p&lt;&lt;<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span>(re <span class="keyword">int</span> j=i,tmp=<span class="number">1</span>;j&lt;i+p;++j,tmp=<span class="number">1L</span>L*tmp*unit[tp][k]%mod)&#123;</span><br><span class="line">                re <span class="keyword">int</span> x=F[j],y=<span class="number">1L</span>L*F[j+p]*tmp%mod;</span><br><span class="line">                F[j]=(x+y)%mod;</span><br><span class="line">                F[j+p]=(x-y+mod)%mod;</span><br><span class="line">            &#125;</span><br><span class="line">    re <span class="keyword">int</span> v=cltpow(n,tp*(mod<span class="number">-2</span>));</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        F[i]=<span class="number">1L</span>L*F[i]*v%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cltstream::read(n);</span><br><span class="line">    cltstream::read(m);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        cltstream::read(A[i]);</span><br><span class="line">        ans+=A[i]*A[i];</span><br><span class="line">        k+=A[i];</span><br><span class="line">        C[n<span class="number">-1</span>-i]=A[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        cltstream::read(B[i]);</span><br><span class="line">        ans+=B[i]*B[i];</span><br><span class="line">        k-=B[i];</span><br><span class="line">        D[n<span class="number">-1</span>-i]=B[i];</span><br><span class="line">    &#125;</span><br><span class="line">    ans+=min(n*<span class="built_in">floor</span>(<span class="number">1.0</span>*k/n)*<span class="built_in">floor</span>(<span class="number">1.0</span>*k/n)<span class="number">-2</span>*k*<span class="built_in">floor</span>(<span class="number">1.0</span>*k/n),n*<span class="built_in">ceil</span>(<span class="number">1.0</span>*k/n)*<span class="built_in">ceil</span>(<span class="number">1.0</span>*k/n)<span class="number">-2</span>*k*<span class="built_in">ceil</span>(<span class="number">1.0</span>*k/n));</span><br><span class="line">    unit[<span class="number">0</span>][<span class="number">23</span>]=cltpow(<span class="number">3</span>,<span class="number">119</span>);</span><br><span class="line">    unit[<span class="number">1</span>][<span class="number">23</span>]=cltpow(<span class="number">332748118</span>,<span class="number">119</span>);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;++i)</span><br><span class="line">        <span class="keyword">for</span>(re <span class="keyword">int</span> j=<span class="number">22</span>;j&gt;=<span class="number">0</span>;--j)</span><br><span class="line">            unit[i][j]=<span class="number">1L</span>L*unit[i][j+<span class="number">1</span>]*unit[i][j+<span class="number">1</span>]%mod;</span><br><span class="line">    <span class="keyword">for</span>(m=<span class="number">1</span>;m&lt;n;m&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">    m&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)</span><br><span class="line">        rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)?(m&gt;&gt;<span class="number">1</span>):<span class="number">0</span>);</span><br><span class="line">    NTT(A,m,<span class="number">0</span>);</span><br><span class="line">    NTT(B,m,<span class="number">0</span>);</span><br><span class="line">    NTT(C,m,<span class="number">0</span>);</span><br><span class="line">    NTT(D,m,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)&#123;</span><br><span class="line">        A[i]=<span class="number">1L</span>L*A[i]*D[i]%mod;</span><br><span class="line">        B[i]=<span class="number">1L</span>L*B[i]*C[i]%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    NTT(A,m,<span class="number">1</span>);</span><br><span class="line">    NTT(B,m,<span class="number">1</span>);</span><br><span class="line">    mx=A[n<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">        mx=max(mx,A[n<span class="number">-1</span>-i]+B[i<span class="number">-1</span>]);</span><br><span class="line">    cltstream::write(ans-=<span class="number">2</span>*mx);</span><br><span class="line">    clop();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P3723&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="NTT" scheme="https://github.com/Challestend/tags/NTT/"/>
    
      <category term="AHOI" scheme="https://github.com/Challestend/tags/AHOI/"/>
    
      <category term="HNOI" scheme="https://github.com/Challestend/tags/HNOI/"/>
    
      <category term="2017" scheme="https://github.com/Challestend/tags/2017/"/>
    
  </entry>
  
  <entry>
    <title>「Luogu-P5162」WD与积木</title>
    <link href="https://github.com/Challestend/luogu-p5162-solution/"/>
    <id>https://github.com/Challestend/luogu-p5162-solution/</id>
    <published>2019-01-02T08:43:53.000Z</published>
    <updated>2019-02-13T00:16:28.185Z</updated>
    
    <content type="html"><![CDATA[<p>9102年的第一篇blog。</p><p><a href="https://www.luogu.org/problemnew/show/P5162" target="_blank" rel="noopener">传送门</a></p><a id="more"></a><p>大概算是我用NTT切的第一道非模板题。</p><p>其实本来应该是<a href="http://codeforces.com/contest/438/problem/E" target="_blank" rel="noopener">这道</a>。不过调不出来了弃了。</p><p>首先我们会有一种想法是将方案数和每种方案的层数和分别求出来，然后一除就可以了。我们令$F[i]$表示$i$块积木所有堆放方案的层数和，$G[i]$表示$i$块积木的堆放方案数。</p><p>首先考虑如何求方案数。我们可以枚举第一层放了哪些积木。于是我们大胆地写出这样一个$n^{2}$的方程：</p><script type="math/tex; mode=display">G[n]=\sum\limits_{i=0}^{n}C_{n}^{i}G[n-i]</script><p>但是这样对吗？</p><p>代入$n=0$我们发现</p><script type="math/tex; mode=display">G[0]=C_{0}^{0}G[0]=G[0]</script><p><img src="https://i.loli.net/2019/01/02/5c2c7c9a52fe9.jpg" alt=""></p><p>注意到，这主要是因为$C_{n}^{0}=1$导致的，因此我们强行将它定义成$0$就好了。</p><p>那然后$G[0]$应该等于几？</p><script type="math/tex; mode=display">G[1]=C_{1}^{0}G[1]+C_{1}^{1}G[0]=G[0]=1</script><p>所以说$G[0]=1$。</p><p>如果说您再往下算几项，您就会发现令$G[0]=1$是一个正确的选择。</p><p>再然后，我们看到这个式子像极了卷积。我们先来把组合数拆开</p><script type="math/tex; mode=display">G[n]=n!\sum\limits_{i=0}^{n}\cfrac{1}{i!}\times\cfrac{G[n-i]}{(n-i)!}</script><p>定义</p><script type="math/tex; mode=display">H[n]=\begin{cases}&0&(n=0)\\&\cfrac{1}{n!}\;\;&(n>1)\end{cases}</script><script type="math/tex; mode=display">G[n]=n!\sum\limits_{i=0}^{n}H[i]\times\cfrac{G[n-i]}{(n-i)!}</script><p>注意到我们在运算时先除以了$n-i$的阶乘，累加完之后又乘了一个$n$的逆元。这就启示我们，如果我们定义</p><script type="math/tex; mode=display">G^{\prime}[n]=\cfrac{G[n]}{n!}</script><p>就可以得到</p><script type="math/tex; mode=display">\begin{aligned}G^{\prime}[n]&=\sum\limits_{i=0}^{n}H[i]\times G^{\prime}[n-i]\\G^{\prime}&=G^{\prime}H+1\end{aligned}</script><p>注意不要忘了$+1$。因为很明显地$G^{\prime}H[0]=0$，而$G^{\prime}[0]=1$。</p><p>然后我们就有</p><script type="math/tex; mode=display">G^{\prime}=\cfrac{1}{1-H}</script><p>然后接下来我们并不需要还原出$G$。直接考虑$F$，也就是层数和。</p><p>首先还是枚举第一层放了哪些积木。不过需要注意的是，因为我们把第一层单独考虑了，因此每有一种堆放方案，我们就要再多算上一层。因此</p><script type="math/tex; mode=display">F[n]=G[n]+\sum\limits_{i=0}^{n}C_{n}^{i}F[n-i]</script><p>然后我们拆开组合数，引入上面的$H$数组，并令$F[0]=0$。至于为什么，留作习题自证（</p><script type="math/tex; mode=display">\begin{aligned}F[n]&=G[n]+n!\sum\limits_{i=0}^{n}H[i]\times\cfrac{F[n-i]}{(n-i)!}\\&=n!\sum\limits_{i=0}^{n}H[i]\times\cfrac{F[n-i]+G[n-i]}{(n-i)!}\\F^{\prime}[n]&=\cfrac{F[n]}{n!}\\&=\sum\limits_{i=0}^{n}H[i]\times(F^{\prime}[n-i]+G^{\prime}[n-i])\\F^{\prime}&=H(F^{\prime}+G^{\prime})\end{aligned}</script><p>不过这次我们就不需要$+1$了。</p><p>解上面的方程，我们得到</p><script type="math/tex; mode=display">F^{\prime}=\cfrac{HG^{\prime}}{1-H}=\cfrac{G^{\prime}}{(1-H)^{2}}</script><p>然后我们总结一下</p><script type="math/tex; mode=display">H[n]=\begin{cases}&0&(n=0)\\&\cfrac{1}{n!}\;\;&(n>1)\end{cases}</script><script type="math/tex; mode=display">G^{\prime}=\cfrac{1}{1-H}</script><script type="math/tex; mode=display">F^{\prime}=\cfrac{G^{\prime}}{(1-H)^{2}}</script><p>最后的答案，也就是$n$块积木的期望层数，就是$\cfrac{F[n]}{G[n]}$。然后不难发现$\cfrac{F^{\prime}[n]}{G^{\prime}[n]}=\cfrac{F[n]}{G[n]}$。</p><p>我就是不贴代码（</p><p><del>反正会的应该都能写出来了吧（</del></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;9102年的第一篇blog。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P5162&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="NTT" scheme="https://github.com/Challestend/tags/NTT/"/>
    
  </entry>
  
  <entry>
    <title>题目组试题选讲</title>
    <link href="https://github.com/Challestend/timuzu-solutions/"/>
    <id>https://github.com/Challestend/timuzu-solutions/</id>
    <published>2018-12-26T12:17:22.000Z</published>
    <updated>2019-02-13T00:16:28.185Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="输入密码继续阅读" />    <label for="pass">输入密码继续阅读</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      该文章已被加密
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="洛谷" scheme="https://github.com/Challestend/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="题目组" scheme="https://github.com/Challestend/tags/%E9%A2%98%E7%9B%AE%E7%BB%84/"/>
    
      <category term="毒瘤题" scheme="https://github.com/Challestend/tags/%E6%AF%92%E7%98%A4%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>关于块状分块的研究报告</title>
    <link href="https://github.com/Challestend/block-decomposition/"/>
    <id>https://github.com/Challestend/block-decomposition/</id>
    <published>2018-12-24T02:27:06.000Z</published>
    <updated>2019-02-13T00:16:28.185Z</updated>
    
    <content type="html"><![CDATA[<script src="//cdn.bootcss.com/jquery/1.11.3/jquery.min.js"></script><div id="hbe-security">  <div class="hbe-input-container">  <input type="password" class="hbe-form-control" id="pass" placeholder="输入密码继续阅读" />    <label for="pass">输入密码继续阅读</label>    <div class="bottom-line"></div>  </div></div><div id="decryptionError" style="display: none;">Incorrect Password!</div><div id="noContentError" style="display: none;">No content to display!</div><div id="encrypt-blog" style="display:none">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</div><script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
    
    <summary type="html">
    
      该文章已被加密
    
    </summary>
    
      <category term="研究报告" scheme="https://github.com/Challestend/categories/%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="分块" scheme="https://github.com/Challestend/tags/%E5%88%86%E5%9D%97/"/>
    
      <category term="块状分块" scheme="https://github.com/Challestend/tags/%E5%9D%97%E7%8A%B6%E5%88%86%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>「多项式学习笔记Part II」多项式的进阶操作</title>
    <link href="https://github.com/Challestend/polynomial-learning-notes-pt2/"/>
    <id>https://github.com/Challestend/polynomial-learning-notes-pt2/</id>
    <published>2018-12-20T08:58:39.000Z</published>
    <updated>2019-02-13T00:16:28.185Z</updated>
    
    <content type="html"><![CDATA[<p>以下，如果不特别声明，则所有运算在模$998244353$意义下进行。</p><a id="more"></a><h3 id="接下来的前置知识"><a href="#接下来的前置知识" class="headerlink" title="接下来的前置知识"></a>接下来的前置知识</h3><h4 id="泰勒展开"><a href="#泰勒展开" class="headerlink" title="泰勒展开"></a>泰勒展开</h4><p>说实话，其实我也不是很能理解这个东西（</p><p>我就凭感觉xjb扯了（</p><p>现在我们有一个函数$f(x)$，我们想要用一个多项式$g(x)$来近似$x$在$x_{0}$附近时$f(x)$的取值。</p><p>我们令</p><script type="math/tex; mode=display">g(x)=\sum\limits_{i=0}^{n}g[i](x-x_{0})^{i}</script><p>我们想要让$x\rightarrow x_{0}$时，$g$在$x$处的各阶导数与$f$在$x_{0}$处的各阶导数分别相等。</p><p>我们先考虑$0$阶，也就是原函数。因为$x\rightarrow x_{0}$，所有包含$x-x_{0}$的项都可以忽略，因此我们有</p><script type="math/tex; mode=display">g[0]=f(x_{0})</script><p>然后是$1$阶</p><script type="math/tex; mode=display">g^{\prime}(x)=\sum\limits_{i=1}^{n}ig[i](x-x_{0})^{i-1}=g[1]=f^{\prime}(x_{0})</script><p>再然后是$2$阶</p><script type="math/tex; mode=display">g^{\prime\prime}(x)=\sum\limits_{i=2}^{n}i(i-1)g[i](x-x_{0})^{i-2}=2g[2]=f^{\prime\prime}(x_{0})</script><p>最后是$3$阶</p><script type="math/tex; mode=display">g^{\prime\prime\prime}(x)=\sum\limits_{i=3}^{n}i(i-1)(i-2)g[i](x-x_{0})^{i-3}=6g[3]=f^{\prime\prime\prime}(x_{0})</script><p>我们发现$g[n]$有如下的规律</p><script type="math/tex; mode=display">g[n]=\cfrac{f^{(n)}(x_{0})}{n!}</script><p>综上所述</p><script type="math/tex; mode=display">g(x)=\sum\limits_{i=0}^{n}\cfrac{f^{(i)}(x_{0})}{i!}(x-x_{0})^i</script><p><del>应该吧（</del></p><h4 id="多项式牛顿迭代"><a href="#多项式牛顿迭代" class="headerlink" title="多项式牛顿迭代"></a>多项式牛顿迭代</h4><p>考虑一个$n-1$次多项式$F(x)$，我们希望求出一个多项式$G(x)$，使得</p><script type="math/tex; mode=display">F(G(x))\equiv 0\pmod{x^{n}}</script><p>我们采用倍增的思想，假设我们已经求出了一个$G_{0}$使得</p><script type="math/tex; mode=display">F(G_{0})\equiv 0\pmod{x^{t}}</script><p>我们希望求出一个$G$使得</p><script type="math/tex; mode=display">F(G)\equiv 0\pmod{x^{2t}}</script><p>我们将$F$在$G_{0}$这里进行泰勒展开：</p><script type="math/tex; mode=display">\begin{aligned}F(G)&=F(G_{0})\\&+F^{\prime}(G_{0})(G-G_{0})\\&+\cfrac{F^{\prime\prime}(G_{0})}{2}(G-G_{0})^{2}\\&+\cdots\end{aligned}</script><p>注意到</p><script type="math/tex; mode=display">\begin{aligned}F(G)-F(G_{0})&\equiv 0\pmod{x^{t}}\\G-G_{0}&\equiv 0\pmod{x^{t}}\end{aligned}</script><p>也就是说$G-G_{0}$的最低非零系数的项数大于等于$t$，$(G-G_{0})^{k}$的最低非零系数的项数大于等于$kt$，从而我们有</p><script type="math/tex; mode=display">\begin{aligned}F(G)&\equiv F(G_{0})+F^{\prime}(G_{0})(G-G_{0})\pmod{x^{2t}}\\F^{\prime}(G_{0})G&\equiv F^{\prime}(G_{0})G_{0}-F(G_{0})\pmod{x^{2t}}\\G&\equiv G_{0}-\cfrac{F(G_{0})}{F^{\prime}(G_{0})}\pmod{x^{2t}}\end{aligned}</script><p>然后我们就一直倍增，倍增到$t\geqslant n$为止，此时$G_{0}$即为所求多项式。</p><h3 id="多项式求逆"><a href="#多项式求逆" class="headerlink" title="多项式求逆"></a><a href="https://www.luogu.org/problemnew/show/P4238" target="_blank" rel="noopener">多项式求逆</a></h3><p>给你一个$n-1$次多项式$F(x)$，让你求出一个多项式$G(x)$，使得</p><script type="math/tex; mode=display">F(x)\times G(x)\equiv 1\pmod{x^{n}}</script><p>假设我们已经求出了$G_{0}$使得</p><script type="math/tex; mode=display">F\times G_{0}\equiv 1\pmod{x^{t}}</script><p>我们希望找到一个$G$使得</p><script type="math/tex; mode=display">F\times G\equiv 1\pmod{x^{2t}}</script><p>据说能用牛顿迭代推，然而我不会（</p><p>考虑正常一点的方式<del>，虽然说还是倍增</del>。</p><script type="math/tex; mode=display">\begin{aligned}F\times G-F\times G_{0}&\equiv 0\pmod{x^{t}}\\G-G_{0}&\equiv 0\pmod{x^{t}}\\(G-G_{0})^{2}&\equiv 0\pmod{x^{2t}}\\G^{2}-2GG_{0}+G_{0}^{2}&\equiv 0\pmod{x^{2t}}\end{aligned}</script><p>两边同时乘$F$</p><script type="math/tex; mode=display">\begin{aligned}G-2G_{0}+FG_{0}^{2}&\equiv 0\pmod{x^{2t}}\\G&\equiv 2G_{0}-FG_{0}^{2}\pmod{x^{2t}}\end{aligned}</script><p>边界条件也很明显，就是当$t=1$时，$G[0]\equiv F[0]^{-1}$。</p><p>说起来是很简单对吧……然而我真正开始写了才发现自己就是个傻子啥也不会（</p><p>关于代码……现在还不是时候（</p><p>后面有一道超级综合题在等着我们（</p><h3 id="多项式对数函数"><a href="#多项式对数函数" class="headerlink" title="多项式对数函数"></a><a href="https://www.luogu.org/problemnew/show/P4725" target="_blank" rel="noopener">多项式对数函数</a></h3><p>给你一个$n-1$次多项式$F(x)$，让你求出一个多项式$G(x)$，使得</p><script type="math/tex; mode=display">G(x)\equiv\ln F(x)\pmod{x^{n}}</script><p>对上式两边求导</p><script type="math/tex; mode=display">G^{\prime}\equiv F^{\prime}\ln^{\prime}F\pmod{x^{n}}</script><p>又因为</p><script type="math/tex; mode=display">\ln^{\prime}x=\frac{1}{x}</script><p>我们就得到</p><script type="math/tex; mode=display">G^{\prime}\equiv\cfrac{F^{\prime}}{F}\pmod{x^{n}}</script><p>求导+求逆+不定积分即可。</p><h3 id="多项式指数函数"><a href="#多项式指数函数" class="headerlink" title="多项式指数函数"></a><a href="https://www.luogu.org/problemnew/show/P4726" target="_blank" rel="noopener">多项式指数函数</a></h3><p>超级综合题来了。</p><p>给你一个$n-1$次多项式$F(x)$，让你求出一个多项式$G(x)$，使得</p><script type="math/tex; mode=display">G(x)\equiv e^{F(x)}\pmod{x^{n}}</script><p>首先</p><script type="math/tex; mode=display">\ln G-F\equiv 0\pmod{x^{n}}</script><p>我们把$F$看成是常数项，定义函数</p><script type="math/tex; mode=display">A(G)=\ln G-F</script><script type="math/tex; mode=display">A^{\prime}(G)=\ln^{\prime}G=\cfrac{1}{G}</script><p>套牛顿迭代</p><script type="math/tex; mode=display">\begin{aligned}G&\equiv G_{0}-\cfrac{A(G_{0})}{A{^\prime}(G_{0})}\\&\equiv G_{0}(1-\ln G_{0}+F)\pmod{x^{2t}}\end{aligned}</script><p>然后把以上提到的所有板子全都复制过来就行了（</p><div><div class="fold_hider"><div class="close hider_title">Toggle Code</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 524288</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> swap(a,b) a^=b,b^=a,a^=b</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> cltstream&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> size 1048576</span></span><br><span class="line">    <span class="keyword">char</span> cltin[size+<span class="number">1</span>],*ih=cltin,*it=cltin;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">ifdef</span> ONLINE_JUDGE</span></span><br><span class="line">            <span class="keyword">if</span>(ih==it)&#123;</span><br><span class="line">                it=(ih=cltin)+fread(cltin,<span class="number">1</span>,size,<span class="built_in">stdin</span>);</span><br><span class="line">                <span class="keyword">if</span>(ih==it)</span><br><span class="line">                    <span class="keyword">return</span> EOF;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> *ih++;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">            <span class="keyword">return</span> getchar();</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> cltout[size+<span class="number">1</span>],*oh=cltout,*ot=cltout+size;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pc</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(oh==ot)&#123;</span><br><span class="line">            fwrite(cltout,<span class="number">1</span>,size,<span class="built_in">stdout</span>);</span><br><span class="line">            oh=cltout;</span><br><span class="line">        &#125;</span><br><span class="line">        *oh++=c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> clop() fwrite(cltstream::cltout,1,cltstream::oh-cltstream::cltout,stdout)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> size</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _tp&gt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(_tp&amp; x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sn=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">char</span> c=gc();</span><br><span class="line">        <span class="keyword">for</span>(;c!=<span class="number">45</span>&amp;&amp;(c&lt;<span class="number">48</span>||c&gt;<span class="number">57</span>)&amp;&amp;c!=EOF;c=gc());</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="number">45</span>&amp;&amp;c!=EOF)</span><br><span class="line">            sn=<span class="number">-1</span>,c=gc();</span><br><span class="line">        <span class="keyword">for</span>(x=<span class="number">0</span>;c&gt;=<span class="number">48</span>&amp;&amp;c&lt;=<span class="number">57</span>&amp;&amp;c!=EOF;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>),c=gc());</span><br><span class="line">        x*=sn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _tp&gt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(_tp x,<span class="keyword">char</span> text=<span class="number">-1</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">            pc(<span class="number">45</span>),x=-x;</span><br><span class="line">        <span class="keyword">if</span>(!x)</span><br><span class="line">            pc(<span class="number">48</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> digit[<span class="number">22</span>];</span><br><span class="line">            <span class="keyword">for</span>(digit[<span class="number">0</span>]=<span class="number">0</span>;x;digit[++digit[<span class="number">0</span>]]=x%<span class="number">10</span>,x/=<span class="number">10</span>);</span><br><span class="line">            <span class="keyword">for</span>(;digit[<span class="number">0</span>];pc(digit[digit[<span class="number">0</span>]--]^<span class="number">48</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(text&gt;=<span class="number">0</span>)</span><br><span class="line">            pc(text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> unit[<span class="number">2</span>][<span class="number">24</span>],rev[maxn+<span class="number">1</span>],inv[maxn+<span class="number">1</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,F[maxn+<span class="number">1</span>],G[maxn+<span class="number">1</span>],tmp1[maxn+<span class="number">1</span>],tmp2[maxn+<span class="number">1</span>],tmp3[maxn+<span class="number">1</span>],tmp4[maxn+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">cltpow</span><span class="params">(re <span class="keyword">int</span> x,re <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    re <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;y;)&#123;</span><br><span class="line">        <span class="keyword">if</span>(y&amp;<span class="number">1</span>)</span><br><span class="line">            res=<span class="number">1L</span>L*res*x%mod;</span><br><span class="line">        x=<span class="number">1L</span>L*x*x%mod;</span><br><span class="line">        y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">NTT</span><span class="params">(re <span class="keyword">int</span>* F,re <span class="keyword">int</span> n,re <span class="keyword">int</span> tp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        <span class="keyword">if</span>(i&lt;(rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)?(n&gt;&gt;<span class="number">1</span>):<span class="number">0</span>)))</span><br><span class="line">            swap(F[i],F[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> k=<span class="number">1</span>,p=<span class="number">1</span>;p&lt;n;++k,p&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i+=p&lt;&lt;<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span>(re <span class="keyword">int</span> j=i,tmp=<span class="number">1</span>;j&lt;i+p;++j,tmp=<span class="number">1L</span>L*tmp*unit[tp][k]%mod)&#123;</span><br><span class="line">                re <span class="keyword">int</span> x=F[j],y=<span class="number">1L</span>L*F[j+p]*tmp%mod;</span><br><span class="line">                F[j]=(x+y)%mod;</span><br><span class="line">                F[j+p]=(x-y+mod)%mod;</span><br><span class="line">            &#125;</span><br><span class="line">    re <span class="keyword">int</span> v=cltpow(n,tp*(mod<span class="number">-2</span>));</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        F[i]=<span class="number">1L</span>L*F[i]*v%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Inv</span><span class="params">(re <span class="keyword">int</span>* F,re <span class="keyword">int</span>* G,re <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    G[<span class="number">0</span>]=cltpow(F[<span class="number">0</span>],mod<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">4</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>,j&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="keyword">int</span> k=<span class="number">0</span>;k&lt;(i&lt;&lt;<span class="number">1</span>);++k)</span><br><span class="line">            tmp1[k]=F[k];</span><br><span class="line">        NTT(tmp1,j,<span class="number">0</span>);</span><br><span class="line">        NTT(G,j,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(re <span class="keyword">int</span> k=<span class="number">0</span>;k&lt;j;++k)</span><br><span class="line">            G[k]=(<span class="number">2</span><span class="number">-1L</span>L*tmp1[k]*G[k]%mod+mod)*G[k]%mod;</span><br><span class="line">        NTT(G,j,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(re <span class="keyword">int</span> k=(i&lt;&lt;<span class="number">1</span>);k&lt;j;++k)</span><br><span class="line">            G[k]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="keyword">int</span> k=<span class="number">0</span>;k&lt;j;++k)</span><br><span class="line">            tmp1[k]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Ln</span><span class="params">(re <span class="keyword">int</span>* F,re <span class="keyword">int</span>* G,re <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">        G[i<span class="number">-1</span>]=<span class="number">1L</span>L*F[i]*i%mod;</span><br><span class="line">    Inv(F,tmp2,n);</span><br><span class="line">    re <span class="keyword">int</span> N=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;N&lt;n;N&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">    N&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    NTT(G,N,<span class="number">0</span>);</span><br><span class="line">    NTT(tmp2,N,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</span><br><span class="line">        G[i]=<span class="number">1L</span>L*G[i]*tmp2[i]%mod;</span><br><span class="line">    NTT(G,N,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=n<span class="number">-1</span>;i&gt;=<span class="number">1</span>;--i)</span><br><span class="line">        G[i]=<span class="number">1L</span>L*G[i<span class="number">-1</span>]*inv[i]%mod;</span><br><span class="line">    G[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=n;i&lt;N;++i)</span><br><span class="line">        G[i]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;++i)</span><br><span class="line">        tmp2[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Exp</span><span class="params">(re <span class="keyword">int</span>* F,re <span class="keyword">int</span>* G,re <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    G[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">1</span>,j=<span class="number">2</span>;i&lt;(n&lt;&lt;<span class="number">1</span>);i&lt;&lt;=<span class="number">1</span>,j&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        Ln(G,tmp3,i);</span><br><span class="line">        <span class="keyword">for</span>(re <span class="keyword">int</span> k=<span class="number">0</span>;k&lt;i;++k)</span><br><span class="line">            tmp4[k]=F[k];</span><br><span class="line">        NTT(tmp3,j,<span class="number">0</span>);</span><br><span class="line">        NTT(tmp4,j,<span class="number">0</span>);</span><br><span class="line">        NTT(G,j,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(re <span class="keyword">int</span> k=<span class="number">0</span>;k&lt;j;++k)</span><br><span class="line">            G[k]=((<span class="number">1L</span>L-tmp3[k]+tmp4[k])%mod+mod)*G[k]%mod;</span><br><span class="line">        NTT(G,j,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(re <span class="keyword">int</span> k=<span class="number">0</span>;k&lt;j;++k)</span><br><span class="line">            tmp3[k]=tmp4[k]=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    unit[<span class="number">0</span>][<span class="number">23</span>]=cltpow(<span class="number">3</span>,<span class="number">119</span>);</span><br><span class="line">    unit[<span class="number">1</span>][<span class="number">23</span>]=cltpow(<span class="number">332748118</span>,<span class="number">119</span>);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;++i)</span><br><span class="line">        <span class="keyword">for</span>(re <span class="keyword">int</span> j=<span class="number">22</span>;j&gt;=<span class="number">0</span>;--j)</span><br><span class="line">            unit[i][j]=<span class="number">1L</span>L*unit[i][j+<span class="number">1</span>]*unit[i][j+<span class="number">1</span>]%mod;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=maxn;++i)</span><br><span class="line">        inv[i]=(mod<span class="number">-1L</span>L*mod/i*inv[mod%i]%mod)%mod;</span><br><span class="line">    cltstream::read(n);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        cltstream::read(F[i]);</span><br><span class="line">    Exp(F,G,n);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        cltstream::write(G[i],i&lt;n<span class="number">-1</span>?<span class="number">32</span>:<span class="number">-1</span>);</span><br><span class="line">    clop();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="多项式开平方根"><a href="#多项式开平方根" class="headerlink" title="多项式开平方根"></a>多项式开平方根</h3><p>给你一个$n-1$次多项式$F(x)$，让你求出一个多项式$G(x)$，使得</p><script type="math/tex; mode=display">G^{2}(x)\equiv F(x)\pmod{x^{n}}</script><p>牛顿迭代吼啊！</p><script type="math/tex; mode=display">A(G)=G^{2}-F</script><script type="math/tex; mode=display">A^{\prime}(G)=2G</script><script type="math/tex; mode=display">\begin{aligned}G&\equiv G_{0}-\cfrac{A(G_{0})}{A{^\prime}(G_{0})}\\&\equiv G_{0}-\cfrac{G_{0}^{2}-F}{2G_{0}}\\&\equiv\cfrac{G_{0}^{2}+F}{2G_{0}}\\&=\cfrac{1}{2}(G_{0}+\cfrac{F}{G_{0}})\pmod{x^{2t}}\end{aligned}</script><p><del>复制粘贴吼啊！</del></p><h3 id="我刚才都学了些啥破玩意"><a href="#我刚才都学了些啥破玩意" class="headerlink" title="我刚才都学了些啥破玩意"></a>我刚才都学了些啥破玩意</h3><p><a href="http://codeforces.com/contest/438/problem/E" target="_blank" rel="noopener">一道例题</a>。</p><p><a href="https://www.luogu.org/problemnew/show/CF438E" target="_blank" rel="noopener">Remote Judge</a>。</p><p>这是读题前的我：</p><p><img src="https://i.loli.net/2018/12/21/5c1c3e4d32b6f.gif" alt=""></p><p>这是读题后的我：</p><p><img src="https://i.loli.net/2018/12/21/5c1c3e4d34c6e.jpg" alt=""></p><p>这是知道了这题正解是多项式开平方根后的我：</p><p><img src="https://i.loli.net/2018/12/21/5c1c3f327ea74.jpg" alt=""></p><p>我……我怕不是学了个假的多项式哦（</p><p>厚颜无耻地抄题解（</p><p>首先我们搞出生成函数（然而并不是很懂）</p><script type="math/tex; mode=display">G(x)=\sum\limits_{i=0}^{m}G[i]x^{i}</script><p>其中</p><script type="math/tex; mode=display">G[i]=[i\in\{c_{1},c_{2},\cdots,c_{n}\}]</script><p>定义$F[i]$表示权值为$i$的神犇二叉树的数量，我们有</p><script type="math/tex; mode=display">F[0]=1</script><script type="math/tex; mode=display">F[x]=\sum\limits_{i=0}^{x}G[i]\sum\limits_{j=0}^{x-i}F[j]F[x-i-j]</script><p>就是先枚举根节点权值（$i$），再枚举左子树权值（$j$），然后算出右子树权值（$x-i-j$）。</p><p>然后是一些神仙操作</p><script type="math/tex; mode=display">\begin{aligned}F[x]&=\sum\limits_{i=0}^{x}G[i]\sum\limits_{j=0}^{x-i}F[j]F[x-i-j]\\&=\sum\limits_{i=0}^{x}G[i]F^{2}[x-i]\\&=(GF^{2})[x]\end{aligned}</script><p>令人窒息（</p><p>然后我们就有</p><script type="math/tex; mode=display">GF^{2}+1=F</script><p>但是为什么要$+1$？因为$F(0)=F[0]=1$而$G(0)=G[0]=0$。</p><p>于是解上面这个一元二次方程，我们得到</p><script type="math/tex; mode=display">F=\cfrac{1\pm\sqrt{1-4G}}{2G}</script><p>但是这个形式还是不是很好搞，我们将分子分母同时乘$(1\mp\sqrt{1-4G})$，然后化简一波</p><script type="math/tex; mode=display">F=\cfrac{2}{1\mp\sqrt{1-4G}}</script><p>如果根号前取负，代入$x=0$，分母就减成$0$了；而如果取正，我们就得到很健康的$\cfrac{2}{2}=1$。综上所述</p><script type="math/tex; mode=display">F=\cfrac{2}{1+\sqrt{1-4G}}</script><p>本来接下来应该有代码实现的，但是<del>我拒绝</del>咕咕咕。</p><p><del>其实是调不出来了（</del></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以下，如果不特别声明，则所有运算在模$998244353$意义下进行。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://github.com/Challestend/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="NTT" scheme="https://github.com/Challestend/tags/NTT/"/>
    
      <category term="FFT" scheme="https://github.com/Challestend/tags/FFT/"/>
    
  </entry>
  
  <entry>
    <title>「多项式学习笔记Part I」最基本的多项式乘法</title>
    <link href="https://github.com/Challestend/polynomial-learning-notes-pt1/"/>
    <id>https://github.com/Challestend/polynomial-learning-notes-pt1/</id>
    <published>2018-12-19T12:23:01.000Z</published>
    <updated>2019-02-13T00:16:28.185Z</updated>
    
    <content type="html"><![CDATA[<p>最近正好月考，然而并不想去月考，于是来颓blog吧。</p><a id="more"></a><p>给你一个$n-1$次多项式$F(x)$和一个$m-1$次多项式$G(x)$，让你求$(F\times G)(x)$的各项系数。$n,m\leqslant 10^{6}$。</p><p>我们不妨将$F(x)$的$i$次项系数记为$F[i]$</p><script type="math/tex; mode=display">F(x)=\sum\limits_{i=0}^{n-1}F[i]x^{i}</script><script type="math/tex; mode=display">G(x)=\sum\limits_{i=0}^{m-1}G[i]x^{i}</script><script type="math/tex; mode=display">(F\times G)(x)=\sum\limits_{i=0}^{n-1}\sum\limits_{j=0}^{m-1}F[i]G[j]x^{i+j}</script><script type="math/tex; mode=display">(F\times G)[k]=\sum\limits_{0\leqslant i<n,0\leqslant j<m,i+j=k}F[i]G[j]</script><p>不难发现直接暴力算是$O(n^{2})$的，因此我们需要优化。</p><p>不过为了优化，我们得先扯远点。</p><h1 id="点值表达"><a href="#点值表达" class="headerlink" title="点值表达"></a>点值表达</h1><p>如果我们选取$n$个点$(x_{0},y_{0}),(x_{1},y_{1}),\cdots,(x_{n-1},y_{n-1})$，并且其中$x_{i}$两两不同，我们就可以唯一地确定出一个$n-1$次多项式。</p><p>就比如说</p><script type="math/tex; mode=display">(0,2),(1,7),(2,4)</script><p><del>瞎写的（</del></p><p>我们可以列出如下的三元一次方程组：</p><script type="math/tex; mode=display">\begin{cases}&\text{C}=2\\&\text{A}+\text{B}+\text{C}=7\\&4\text{A}+2\text{B}+\text{C}=4\end{cases}</script><p>解得</p><script type="math/tex; mode=display">\begin{cases}&\text{A}=-4\\&\text{B}=9\\&\text{C}=2\end{cases}</script><p>注意到$(F\times G)(x)=F(x)G(x)$<del>（废话）</del>，我们只要知道了$F(x)$和$G(x)$的点值表达，就可以$O(n)$的计算出$(F\times G)(x)$的点值表达了。因为$(F\times G)(x)$的次数是$n+m-2$，我们选出前$n+m-1$个自然数即可。</p><p>但是这还不够。注意到，如果我们选取的点的横坐标如果很普通，我们首先需要$O(n^{2})$转成点值表达，乘完之后又要转回系数表达，效率甚至不如暴力（</p><p>于是我们还需要优化，于是我们还需要再扯远一点。</p><h1 id="复数"><a href="#复数" class="headerlink" title="复数"></a>复数</h1><p>对，你没看错，扯到复数了。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>根据初中学习的数学知识，我们知道有些一元二次方程是没有实数根的。就比如说</p><script type="math/tex; mode=display">x^{2}+1=0</script><p>我们知道，它的判别式是$\Delta=b^{2}-4ac=-4\lt 0$，因此它没有实数根。</p><p>于是我们就定义了虚数单位$i$，并规定$i^{2}=-1$。形如$x+yi$这样的数被称为复数。它的模长被定义为它到原点的距离，即$\sqrt{x^{2}+y^{2}}$；幅角被定义为与$x$轴正半轴的夹角，即$\operatorname{tan}^{-1}\cfrac{y}{x}$。</p><p>因为$i$不是实数，它不能被画在我们现有的数轴上。那我们就再拿来一条数轴，将两条数轴垂直放置，垂足为原点。或者说，我们可以将这理解成平面直角坐标系，$x$就是实轴，$y$轴就是虚轴，$x+yi$就对应了点$(x,y)$。</p><p><img src="https://i.loli.net/2018/12/19/5c1a46b4d785b.png" alt=""></p><p>上图展示了$4+i$和$3+4i$。</p><p>复数的运算其实没什么出乎意料的：</p><script type="math/tex; mode=display">(x_{1}+y_{1}i)+(x_{2}+y_{2}i)=(x_{1}+x_{2})+(y_{1}+y_{2})i</script><script type="math/tex; mode=display">(x_{1}+y_{1}i)-(x_{2}+y_{2}i)=(x_{1}-x_{2})+(y_{1}-y_{2})i</script><script type="math/tex; mode=display">(x_{1}+y_{1}i)(x_{2}+y_{2}i)=(x_{1}x_{2}-y_{1}y_{2})+(x_{1}y_{2}+x_{2}y_{1})i</script><script type="math/tex; mode=display">\begin{aligned}\cfrac{x_{1}+y_{1}i}{x_{2}+y_{2}i}&=\cfrac{(x_{1}+y_{1}i)(x_{2}-y_{2}i)}{(x_{2}+y_{2}i)(x_{2}-y_{2}i)}\\&=\cfrac{(x_{1}x_{2}+y_{1}y_{2})+(x_{2}y_{1}-x_{1}y_{2})i}{x_{2}^{2}+y_{2}^{2}}\\&=\cfrac{x_{1}x_{2}+y_{1}y_{2}}{x_{2}^{2}+y_{2}^{2}}+\cfrac{x_{2}y_{1}-x_{1}y_{2}}{x_{2}^{2}+y_{2}^{2}}i\end{aligned}</script><p>我们来单独考虑一下复数相乘的几何意义。</p><p>假设我们有两个复数$c_{1}$，$c_{2}$，它们的模长分别是$r_{1}$，$r_{2}$，幅角分别是$\alpha_{1}$，$\alpha_{2}$。不难发现我们有</p><script type="math/tex; mode=display">c_{1}=r_{1}(\operatorname{cos}\alpha_{1}+i\operatorname{sin}\alpha_{1})</script><script type="math/tex; mode=display">c_{2}=r_{2}(\operatorname{cos}\alpha_{2}+i\operatorname{sin}\alpha_{2})</script><script type="math/tex; mode=display">\begin{aligned}c_{1}c_{2}&=r_{1}r_{2}(\cos\alpha_{1}+i\sin\alpha_{1})(\cos\alpha_{2}+i\sin\alpha_{2})\\&=r_{1}r_{2}(\cos\alpha_{1}\cos\alpha_{2}+i\cos\alpha_{1}\sin\alpha_{2}+i\sin\alpha_{1}\cos\alpha_{2}-\sin\alpha_{1}\sin\alpha_{2})\\&=r_{1}r_{2}[\cos(\alpha_{1}+\alpha_{2})+i\sin(\alpha_{1}+\alpha_{2})]\end{aligned}</script><p>总结成一句话，就是「模长相乘，幅角相加」。</p><h2 id="单位圆与单位根"><a href="#单位圆与单位根" class="headerlink" title="单位圆与单位根"></a>单位圆与单位根</h2><p>单位圆就是指半径为$1$的圆。不过一般我们都是把它画在原点的。</p><p><img src="https://i.loli.net/2018/12/20/5c1b06e5602fa.png" alt=""></p><p>考虑这么一个方程</p><script type="math/tex; mode=display">x^{n}=1</script><p>它的所有复数根。</p><p>因为复数相乘意味着模长相乘，如果一个复数的$n$次方等于$1$，它自身的模长也应该是$1$。如果它的幅角是$a$，我们应该有</p><script type="math/tex; mode=display">2\pi\mid na</script><script type="math/tex; mode=display">\cfrac{2\pi}{n}\mid a</script><p>不难想象出我们有$n$个这样的复数，它们的幅角通式是$\cfrac{2k\pi}{n}(k\in[0,n)\cap\mathbb{Z})$。我们称其中幅角等于$\cfrac{2\pi}{n}$的复数，即$\cos\cfrac{2\pi}{n}+i\sin\cfrac{2\pi}{n}$为$n$次单位根$\omega_{n}$，我们就可以把这$n$个复数表示为$\omega_{n}^{k}(k\in[0,n)\cap\mathbb{Z})$。</p><p>它有如下的一些性质</p><script type="math/tex; mode=display">\omega_{2n}^{2k}=\omega_{n}^{k}</script><p>因为它们的模长都是$1$，幅角相等就相等了。</p><p>然后就没了，读者自证不难（</p><script type="math/tex; mode=display">\omega_{n}^{k+\frac{n}{2}}=-\omega_{n}^{k}</script><p>因为$\omega_{n}^{\frac{n}{2}}$的幅角是$\cfrac{2\times\frac{n}{2}\pi}{n}=\pi$，不难发现它就是$-1$了。</p><h1 id="快速傅里叶变换（Fast-Fourier-Transformation）"><a href="#快速傅里叶变换（Fast-Fourier-Transformation）" class="headerlink" title="快速傅里叶变换（Fast Fourier Transformation）"></a>快速傅里叶变换（Fast Fourier Transformation）</h1><h2 id="运行过程"><a href="#运行过程" class="headerlink" title="运行过程"></a>运行过程</h2><p>那么问题来了，我们刚才扯了这么些，有什么用呢？</p><p>就是说，有个叫「让·巴普蒂斯·约瑟夫·傅里叶」（Jean Baptiste Joseph Fourier）的神仙有一天大开脑洞，掏出$n$次单位根想要求点值表达。</p><p>首先，我们通过在高次补$0$的方式，将这个多项式的项数（也就是次数$+1$）补到$2$的非负整数次幂。</p><p>然后一巴掌把这个多项式拍成两半，按奇偶性拼成两个多项式：</p><script type="math/tex; mode=display">\begin{aligned}F_{1}(x)&=\sum\limits_{i=0}^{\frac{n}{2}-1}F[2i]x^{i}\\&=F[0]x^{0}+F[2]x^{1}+\cdots+F[n-2]x^{\frac{n}{2}-1}\end{aligned}</script><script type="math/tex; mode=display">\begin{aligned}F_{2}(x)&=\sum\limits_{i=0}^{\frac{n}{2}-1}F[2i+1]x^{i}\\&=F[1]x^{0}+F[3]x^{1}+\cdots+F[n-1]x^{\frac{n}{2}-1}\end{aligned}</script><p>于是我们有</p><script type="math/tex; mode=display">F(x)=F_{1}(x^{2})+xF_{2}(x^{2})</script><p>现在我们假设$0\leqslant k&lt;\cfrac{n}{2}$，将$x=\omega_{n}^{k}$和$x=\omega_{n}^{k+\frac{n}{2}}$代入</p><script type="math/tex; mode=display">\begin{aligned}F(\omega_{n}^{k})&=F_{1}(\omega_{n}^{2k})+\omega_{n}^{k}F_{2}(\omega_{n}^{2k})\\&=F_{1}(\omega_{\frac{n}{2}}^{k})+\omega_{n}^{k}F_{2}(\omega_{\frac{n}{2}}^{k})\end{aligned}</script><script type="math/tex; mode=display">\begin{aligned}F(\omega_{n}^{k+\frac{n}{2}})&=F_{1}(\omega_{n}^{2k+n})+\omega_{n}^{k+\frac{n}{2}}F_{2}(\omega_{n}^{2k+n})\\&=F_{1}(\omega_{n}^{2k})-\omega_{n}^{k}F_{2}(\omega_{n}^{2k})\\&=F_{1}(\omega_{\frac{n}{2}}^{k})-\omega_{n}^{k}F_{2}(\omega_{\frac{n}{2}}^{k})\end{aligned}</script><p>我们注意到，如果说我们求出了$F_{1}(x)$和$F_{2}(x)$的点值表达，我们就能够$O(n)$地求出$F(x)$的点值表达了。至此，我们不难想到分治，边界条件就是$n=1$，这时什么也不用做直接返回即可。</p><p>简单地贴一下代码：</p><div><div class="fold_hider"><div class="close hider_title">Toggle Code</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">complex</span>* F,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">complex</span> F1[n&gt;&gt;<span class="number">1</span>],F2[n&gt;&gt;<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i+=<span class="number">2</span>)&#123;</span><br><span class="line">    F1[i]=F[<span class="number">2</span>*i];</span><br><span class="line">        F2[i]=F[<span class="number">2</span>*i+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    work(F1,n&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    work(F2,n&gt;&gt;<span class="number">1</span>);</span><br><span class="line">    complex unit(cos(2*Pi/n),sin(2*Pi/n)),tmp=1;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;(n&gt;&gt;<span class="number">1</span>);++i,tmp=tmp*unit)&#123;</span><br><span class="line">    <span class="keyword">complex</span> w=F2[i+(n&gt;&gt;<span class="number">1</span>)]*tmp;</span><br><span class="line">        F[i]=F1[i]+w;</span><br><span class="line">        F[i+(n&gt;&gt;<span class="number">1</span>)]=F1[i]-w;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p>不过，以上代码是我现写出来的，<del>保证其不正确性</del>不保证其正确性。</p><p>不过，这样递归运算效率还是太低了。我们来考虑一下，递归到底层后，<code>F</code>数组的每一个位置上实际存的是几次项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0 1 2 3 4 5 6 7</span><br><span class="line">0 2 4 6|1 3 5 7</span><br><span class="line">0 4|2 6|1 5|3 7</span><br><span class="line">0|4|2|6|1|5|3|7</span><br></pre></td></tr></table></figure><p>写成二进制看看：</p><div class="table-container"><table><thead><tr><th style="text-align:center">位置（十进制）</th><th style="text-align:center">位置（二进制）</th><th style="text-align:center">次数（十进制）</th><th style="text-align:center">次数（二进制）</th></tr></thead><tbody><tr><td style="text-align:center">$0$</td><td style="text-align:center">$000$</td><td style="text-align:center">$0$</td><td style="text-align:center">$000$</td></tr><tr><td style="text-align:center">$1$</td><td style="text-align:center">$001$</td><td style="text-align:center">$4$</td><td style="text-align:center">$100$</td></tr><tr><td style="text-align:center">$2$</td><td style="text-align:center">$010$</td><td style="text-align:center">$2$</td><td style="text-align:center">$010$</td></tr><tr><td style="text-align:center">$3$</td><td style="text-align:center">$011$</td><td style="text-align:center">$6$</td><td style="text-align:center">$110$</td></tr><tr><td style="text-align:center">$4$</td><td style="text-align:center">$100$</td><td style="text-align:center">$1$</td><td style="text-align:center">$001$</td></tr><tr><td style="text-align:center">$5$</td><td style="text-align:center">$101$</td><td style="text-align:center">$5$</td><td style="text-align:center">$101$</td></tr><tr><td style="text-align:center">$6$</td><td style="text-align:center">$110$</td><td style="text-align:center">$3$</td><td style="text-align:center">$011$</td></tr><tr><td style="text-align:center">$7$</td><td style="text-align:center">$111$</td><td style="text-align:center">$7$</td><td style="text-align:center">$111$</td></tr></tbody></table></div><p>注意到两边的数字的二进制是镜像的。也就是说，我们只要把位置编号的二进制位的最后$\operatorname{log}n$位左右镜像过来，就可以得到递归到最底层后，这个位置上的系数所对应的项的次数了。</p><p>我们可以$O(n)$地处理处每个数的镜像：</p><div><div class="fold_hider"><div class="close hider_title">Toggle Code</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">    rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)?(n&gt;&gt;<span class="number">1</span>):<span class="number">0</span>);</span><br></pre></td></tr></table></figure></div></div><p>中间有一个位或运算符，我们以它为分界线，将上面这行代码分成左右两部分。左边就是$i$这个数除了最后一位以外的所有位的镜像；右边特判了一下$i$的最后一位是否为$1$，如果是的话，就在最高位补一个$1$。</p><p>接下来的步骤我不是很能解释得清楚，因为我也是背的板子。总之这个东西写出来差不多长这样：</p><div><div class="fold_hider"><div class="close hider_title">Toggle Code</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(<span class="keyword">complex</span>* F,<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        <span class="keyword">if</span>(i&lt;rev[i])</span><br><span class="line">            swap(F[i],F[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> len=<span class="number">2</span>,p=<span class="number">1</span>;len&lt;=n;len&lt;&lt;=<span class="number">1</span>,p&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        complex unit(cos(Pi/p),sin(Pi/p));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i+=len)&#123;</span><br><span class="line">            <span class="function"><span class="keyword">complex</span> <span class="title">cur</span><span class="params">(<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;i+p;++j)&#123;</span><br><span class="line">                <span class="keyword">complex</span> tmp=F[j+p]*cur;</span><br><span class="line">                F[j+p]=F[j]-tmp;</span><br><span class="line">                F[j]=F[j]+tmp;</span><br><span class="line">                cur=cur*unit;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p>那么现在还差最后一步，将点值表达转回系数表达。我们将$F(\omega_{n}^{0}),F(\omega_{n}^{1}),\cdots,F(\omega_{n}^{n-1})$分别记为$y_{0},y_{1},\cdots,y_{n-1}$，我们求点值的过程可以用矩阵表达成这样：</p><script type="math/tex; mode=display">\begin{bmatrix}&(\omega_{n}^{0})^{0}&(\omega_{n}^{0})^{1}&\cdots&(\omega_{n}^{0})^{n-1}&\\&(\omega_{n}^{1})^{0}&(\omega_{n}^{1})^{1}&\cdots&(\omega_{n}^{1})^{n-1}\\&\vdots&\vdots&\ddots&\vdots\\&(\omega_{n}^{n-1})^{0}&(\omega_{n}^{n-1})^{1}&\cdots&(\omega_{n}^{n-1})^{n-1}\\\end{bmatrix}\begin{bmatrix}&F[0]&\\&F[1]\\&\vdots\\&F[n-1]\end{bmatrix}=\begin{bmatrix}&y_{0}&\\&y_{1}\\&\vdots\\&y_{n-1}\end{bmatrix}</script><p>我们可以试图寻找左边那个矩阵的逆矩阵。直接摆结论的话，它差不多长这样：</p><script type="math/tex; mode=display">\begin{bmatrix}&\frac{1}{n}(\omega_{n}^{0})^{0}&\frac{1}{n}(\omega_{n}^{0})^{1}&\cdots&\frac{1}{n}(\omega_{n}^{0})^{n-1}&\\&\frac{1}{n}(\omega_{n}^{-1})^{0}&\frac{1}{n}(\omega_{n}^{-1})^{1}&\cdots&\frac{1}{n}(\omega_{n}^{-1})^{n-1}\\&\vdots&\vdots&\ddots&\vdots\\&\frac{1}{n}(\omega_{n}^{-n+1})^{0}&\frac{1}{n}(\omega_{n}^{-n+1})^{1}&\cdots&\frac{1}{n}(\omega_{n}^{-n+1})^{n-1}\\\end{bmatrix}</script><p>现在我们要证明这两个矩阵乘起来是单位矩阵。令第一个矩阵为$A$，第二个矩阵为$B$，$A\times B=C$。不难发现$A[i][j]=\omega_{n}^{ij}$，$B[i][j]=\cfrac{1}{n}\omega_{n}^{-ij}$，我们有</p><script type="math/tex; mode=display">\begin{aligned}C[i][j]&=\sum\limits_{k=0}^{n-1}A[i][k]B[k][j]\\&=\sum\limits_{k=0}^{n-1}\cfrac{1}{n}\omega_{n}^{ik-kj}\end{aligned}</script><p>若$i=j$，不难发现此时$C[i][j]=1$。</p><p>否则，即$i\neq j$，设$i-j=l$，我们有</p><script type="math/tex; mode=display">\begin{aligned}C[i][j]&=\sum\limits_{k=0}^{n-1}\cfrac{1}{n}\omega_{n}^{lk}\\&=\cfrac{\omega_{n}^{ln}-1}{n(\omega_{n}^{l}-1)}\\&=\cfrac{1-1}{n(\omega_{n}^{l}-1)}\\&=0\end{aligned}</script><p>综上所述，矩阵$C$是单位矩阵，因此矩阵$B$是矩阵$A$的逆矩阵。</p><p>因此我们有</p><script type="math/tex; mode=display">\begin{bmatrix}&\frac{1}{n}(\omega_{n}^{-0})^{0}&\frac{1}{n}(\omega_{n}^{-0})^{1}&\cdots&\frac{1}{n}(\omega_{n}^{-0})^{n-1}&\\&\frac{1}{n}(\omega_{n}^{-1})^{0}&\frac{1}{n}(\omega_{n}^{-1})^{1}&\cdots&\frac{1}{n}(\omega_{n}^{-1})^{n-1}\\&\vdots&\vdots&\ddots&\vdots\\&\frac{1}{n}(\omega_{n}^{-n+1})^{0}&\frac{1}{n}(\omega_{n}^{-n+1})^{1}&\cdots&\frac{1}{n}(\omega_{n}^{-n+1})^{n-1}\\\end{bmatrix}\begin{bmatrix}&y_{0}&\\&y_{1}\\&\vdots\\&y_{n-1}\end{bmatrix}=\begin{bmatrix}&F[0]&\\&F[1]\\&\vdots\\&F[n-1]\end{bmatrix}</script><p>注意到这个过程和我们之前将系数转化为点值表达的过程极为相似。这就是在启示我们，如果说我们把之前用的$\omega_{n}^{0},\omega_{n}^{1},\cdots,\omega_{n}^{n-1}$换成$\omega_{n}^{0},\omega_{n}^{-1},\cdots,\omega_{n}^{-n+1}$，然后对着点值表达来一遍FFT，然后再除以$n$，就得到了原多项式的系数了。</p><p>注意到这两个过程只有用到的单位根不一样，我们可以将上面那段代码的</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">complex unit(cos(Pi/p),sin(Pi/p));</span><br></pre></td></tr></table></figure><p>改成</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">complex unit(cos(Pi/p),tp*sin(Pi/p));</span><br></pre></td></tr></table></figure><p>然后调用时再传一个参数<code>tp</code>进去。<code>tp=1</code>表示是系数转点值，<code>tp=-1</code>表示是点值转系数。</p><p>完整代码如下：</p><div><div class="fold_hider"><div class="close hider_title">Toggle Code</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 2097152</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> Pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> rev[maxn+<span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> r,c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">complex</span>(<span class="keyword">double</span> _r=<span class="number">0</span>,<span class="keyword">double</span> _c=<span class="number">0</span>)&#123;</span><br><span class="line">        r=_r;</span><br><span class="line">        c=_c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">complex</span> F[maxn+<span class="number">1</span>],G[maxn+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">complex</span> <span class="keyword">operator</span>+(<span class="keyword">complex</span>&amp; a,<span class="keyword">complex</span>&amp; b)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">complex</span>(a.r+b.r,a.c+b.c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">complex</span> <span class="keyword">operator</span>-(<span class="keyword">complex</span>&amp; a,<span class="keyword">complex</span>&amp; b)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">complex</span>(a.r-b.r,a.c-b.c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">complex</span> <span class="keyword">operator</span>*(<span class="keyword">complex</span>&amp; a,<span class="keyword">complex</span>&amp; b)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">complex</span>(a.r*b.r-a.c*b.c,a.r*b.c+a.c*b.r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(_tp&amp; x,_tp&amp; y)</span></span>&#123;</span><br><span class="line">    _tp tmp=x;</span><br><span class="line">    x=y;</span><br><span class="line">    y=tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">FAQ</span><span class="params">(<span class="keyword">complex</span> F[],<span class="keyword">int</span> tp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        <span class="keyword">if</span>(i&lt;rev[i])</span><br><span class="line">            swap(F[i],F[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> len=<span class="number">2</span>,p=<span class="number">1</span>;len&lt;=n;len&lt;&lt;=<span class="number">1</span>,p&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        register complex unit(cos(Pi/p),tp*sin(Pi/p));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i+=len)&#123;</span><br><span class="line">            <span class="function"><span class="keyword">register</span> <span class="keyword">complex</span> <span class="title">cur</span><span class="params">(<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=i;j&lt;i+p;++j)&#123;</span><br><span class="line">                <span class="keyword">register</span> <span class="keyword">complex</span> tmp=F[j+p]*cur;</span><br><span class="line">                F[j+p]=F[j]-tmp;</span><br><span class="line">                F[j]=F[j]+tmp;</span><br><span class="line">                cur=cur*unit;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    ++n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;F[i].r);</span><br><span class="line">    ++m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;G[i].r);</span><br><span class="line">    <span class="keyword">for</span>(m+=n<span class="number">-1</span>,n=<span class="number">1</span>;n&lt;m;n&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)?(n&gt;&gt;<span class="number">1</span>):<span class="number">0</span>);</span><br><span class="line">    FAQ(F,<span class="number">1</span>);</span><br><span class="line">    FAQ(G,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        F[i]=F[i]*G[i];</span><br><span class="line">    FAQ(F,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%0.0lf "</span>,F[i].r/n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p><del>不要问我<code>cltstream</code>哪去了（</del></p><p>然后您就可以切掉这道<a href="https://www.luogu.org/problemnew/show/P3803" target="_blank" rel="noopener">板子题</a>了。</p><p>其实上面的代码是我从另一道题里复制过来然后现改的，说不定会改出错（</p><p>最好还是自己写吧（</p><p>什么？想知道是哪道题？往下看（</p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="「ZJOI2014」力"><a href="#「ZJOI2014」力" class="headerlink" title="「ZJOI2014」力"></a><a href="https://www.luogu.org/problemnew/show/P3338" target="_blank" rel="noopener">「ZJOI2014」力</a></h3><p>这是一道裸的卷积题。</p><p>考虑两个长度为$n$的数组$F$和$G$，现在我们想求一个数组$H$，它满足</p><script type="math/tex; mode=display">H[i]=\sum\limits_{j=0}^{i}F[j]G[i-j]=\sum\limits_{0\leqslant j<n,0\leqslant k<n,j+k=i}F[j]G[k]</script><p>在本页面往上翻，翻到这个式子：</p><script type="math/tex; mode=display">(F\times G)[k]=\sum\limits_{0\leqslant i<n,0\leqslant j<m,i+j=k}F[i]G[j]</script><p>发现了吗？这两个过程其实是一样的。</p><p>于是，我们如下构造两个多项式</p><script type="math/tex; mode=display">F(x)=\sum\limits_{i=0}^{n-1}F[i]x^{i}</script><script type="math/tex; mode=display">G(x)=\sum\limits_{i=0}^{n-1}G[i]x^{i}</script><p>然后直接一波FFT套上去，输出次数最低的$n$项的系数就好。</p><p>那么这题呢？首先我们把$j\lt i$和$j\gt i$分开计算。</p><p>先考虑$j\lt i$，令$F[i]=q_{i}$，$G[i]=\begin{cases}&amp;\cfrac{1}{i^{2}}\;\;&amp;(i\gt 0)\\&amp;0&amp;(i=0)\end{cases}$，那么</p><script type="math/tex; mode=display">\begin{aligned}E_{i}&=\sum_{j=0}^{i-1}F[j]G[i-j]\\&=\sum_{j=0}^{i}F[j]G[i-j]\end{aligned}</script><p>直接套板子就行。</p><p>对于$j&gt;i$的情况，我们将数组$F$左右翻转，然后继续套板子就行（</p><p>具体还是看代码吧：</p><div><div class="fold_hider"><div class="close hider_title">Toggle Code</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span>\lt cstdio&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 2097152</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> Pi=<span class="built_in">acos</span>(<span class="number">-1.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> rev[maxn+<span class="number">1</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">complex</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> r,c;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">complex</span>(<span class="keyword">double</span> _r=<span class="number">0</span>,<span class="keyword">double</span> _c=<span class="number">0</span>)&#123;</span><br><span class="line">        r=_r;</span><br><span class="line">        c=_c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">complex</span> F1[maxn+<span class="number">1</span>],F2[maxn+<span class="number">1</span>],G[maxn+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">complex</span> <span class="keyword">operator</span>+(<span class="keyword">complex</span>&amp; a,<span class="keyword">complex</span>&amp; b)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">complex</span>(a.r+b.r,a.c+b.c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">complex</span> <span class="keyword">operator</span>-(<span class="keyword">complex</span>&amp; a,<span class="keyword">complex</span>&amp; b)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">complex</span>(a.r-b.r,a.c-b.c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">inline</span> <span class="keyword">complex</span> <span class="keyword">operator</span>*(<span class="keyword">complex</span>&amp; a,<span class="keyword">complex</span>&amp; b)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">complex</span>(a.r*b.r-a.c*b.c,a.r*b.c+a.c*b.r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> _tp&gt;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(_tp&amp; x,_tp&amp; y)</span></span>&#123;</span><br><span class="line">    _tp tmp=x;</span><br><span class="line">    x=y;</span><br><span class="line">    y=tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">FAQ</span><span class="params">(<span class="keyword">complex</span> F[],<span class="keyword">int</span> tp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        <span class="keyword">if</span>(i&lt;rev[i])</span><br><span class="line">            swap(F[i],F[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> len=<span class="number">2</span>,p=<span class="number">1</span>;len&lt;=n;len&lt;&lt;=<span class="number">1</span>,p&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        register complex unit(cos(Pi/p),tp*sin(Pi/p));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i+=len)&#123;</span><br><span class="line">            <span class="function"><span class="keyword">register</span> <span class="keyword">complex</span> <span class="title">cur</span><span class="params">(<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=i;j&lt;i+p;++j)&#123;</span><br><span class="line">                <span class="keyword">register</span> <span class="keyword">complex</span> tmp=F[j+p]*cur;</span><br><span class="line">                F[j+p]=F[j]-tmp;</span><br><span class="line">                F[j]=F[j]+tmp;</span><br><span class="line">                cur=cur*unit;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;F1[i].r);</span><br><span class="line">        F2[n-i<span class="number">-1</span>].r=F1[i].r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;++i)</span><br><span class="line">        G[i]=<span class="number">1.0</span>/i/i;</span><br><span class="line">    <span class="keyword">for</span>(m=n,n=<span class="number">1</span>;n&lt;m;n&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">    n&lt;&lt;=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)?(n&gt;&gt;<span class="number">1</span>):<span class="number">0</span>);</span><br><span class="line">    FAQ(G,<span class="number">1</span>);</span><br><span class="line">    FAQ(F1,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        F1[i]=F1[i]*G[i];</span><br><span class="line">    FAQ(F1,<span class="number">-1</span>);</span><br><span class="line">    FAQ(F2,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        F2[i]=F2[i]*G[i];</span><br><span class="line">    FAQ(F2,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lf\n"</span>,(F1[i].r-F2[m-i<span class="number">-1</span>].r)/n);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h1 id="数论变换（Number-Theoretic-Transformation）"><a href="#数论变换（Number-Theoretic-Transformation）" class="headerlink" title="数论变换（Number-Theoretic Transformation）"></a>数论变换（Number-Theoretic Transformation）</h1><p>注意到朴素的FFT使用的是单位复根。然而它们有一个十分大的缺陷，就是必须要用<code>double</code>存。这会带来精度上的误差，一个直接的结果就是，对于只有整数参与的多项式乘法，跑完FFT却会出现小数。</p><p>这就启示我们，能不能用其他的什么东西替换掉单位复根。</p><p>设有两个互质的正整数$a$和$p$，最小的使得$a^{k}\equiv 1\pmod{p}$的$k$被称为$a$模$p$的阶，记作$\delta_{p}(a)$。</p><p>如果说$\delta_{p}(a)=\varphi(p)$，我们就称$a$是模$p$的一个原根。</p><p>现在我们找一个质数$p=an+1$，其中$a$是一个正整数，$n$是$2$的非负整数次幂。然后我们找到它的原根$g$，并定义$\omega_{n}=g^{a}$。让我们来看看单位复根有的性质现在的原根有没有：</p><p>$\omega_{n}^{0},\omega_{n}^{1},\cdots,\omega_{n}^{n-1}$互不相同。这是为了保证点值表达的合法。</p><p>虽然我不会证，不过我们的确有$g^{0},g^{1},\cdots,g^{n-1}$在模$p$意义下互不相同，$a$次幂自然也一样。</p><p>$\omega_{2n}^{2k}=\omega_{n}^{k}$。这是为了让我们可以分治。</p><p>根据定义，$\omega_{2n}=g^{\frac{a}{2}}$，就是将现在的$p$进一步拆成$\cfrac{a}{2}\cdot2n+1$。不难发现</p><script type="math/tex; mode=display">\omega_{2n}^{2k}=g^{\frac{a}{2}\cdot{2}k}=g^{ak}=\omega_{n}^{k}</script><p>因而原根有上述性质。</p><p>$\omega_{n}^{k+\frac{n}{2}}=-\omega_{n}^{k}$，或者说$\omega_{n}^{\frac{n}{2}}=-1$。这同样是为了让我们可以分治。</p><p>因为$p=an+1$，根据费马小定理，我们有</p><script type="math/tex; mode=display">\omega_{n}^{n}\equiv g^{an}\equiv g^{p-1}\equiv 1\pmod{p}</script><p>因而$\omega_{n}^{\frac{n}{2}}\equiv\pm 1\pmod{p}$。又因为$\omega_{n}^{0}=1$，而$\omega_{n}^{\frac{n}{2}}\not\equiv\omega_{n}^{0}\pmod{p}$，我们就得到$\omega_{n}^{\frac{n}{2}}\equiv -1\pmod{p}$。</p><p>若$k\neq 0$，$\sum_{i=0}^{n-1}(\omega_{n}^{k})^{i}=0$。这是为了实现逆变换。不过这个很明显，就留作习题吧。</p><p>以上，我们成功地用原根取代了单位复根。一般情况下，我们会取$p=998244353=7\times 17\times 2^{23}+1$，它的原根是$3$。</p><p>需要注意的是，我们还有一个可以优化的小细节。注意到$\omega_{n}=g^{a}=g^{\frac{p-1}{n}}$，我们可以将这些值预处理出来，就不用每次都跑快速幂了。对于$998244353$来说，我们需要预处理$\omega_{2},\omega_{4},\cdots,\omega_{2^{23}}$。注意到</p><script type="math/tex; mode=display">\omega_{2^{23}}=3^{7\times 17}=3^{119}</script><script type="math/tex; mode=display">\omega_{2^{k}}=\omega_{2^{k+1}}^{2}</script><p>我们一遍快速幂算出$\omega_{2^{23}}$然后倒着推出剩下的即可。</p><p>关于$\omega_{n}^{-k}$，注意到它就是$\omega_{n}^{k}$在模$998244353$意义下的逆元。那么我们把上面两个式子中的$3$换成它在模$998244353$意义下的逆元即可，这个数是$332748118$。</p><p>然后我们把FFT板子里的单位复根全部换成原根，运算换成模意义下的就行了。</p><p>代码：</p><div><div class="fold_hider"><div class="close hider_title">Toggle Code</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 2097152</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 998244353</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> swap(a,b) a^=b,b^=a,a^=b</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> cltstream&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> size 1048576</span></span><br><span class="line">    <span class="keyword">char</span> cltin[size+<span class="number">1</span>],*ih=cltin,*it=cltin;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">ifdef</span> ONLINE_JUDGE</span></span><br><span class="line">            <span class="keyword">if</span>(ih==it)&#123;</span><br><span class="line">                it=(ih=cltin)+fread(cltin,<span class="number">1</span>,size,<span class="built_in">stdin</span>);</span><br><span class="line">                <span class="keyword">if</span>(ih==it)</span><br><span class="line">                    <span class="keyword">return</span> EOF;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> *ih++;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">            <span class="keyword">return</span> getchar();</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> cltout[size+<span class="number">1</span>],*oh=cltout,*ot=cltout+size;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pc</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(oh==ot)&#123;</span><br><span class="line">            fwrite(cltout,<span class="number">1</span>,size,<span class="built_in">stdout</span>);</span><br><span class="line">            oh=cltout;</span><br><span class="line">        &#125;</span><br><span class="line">        *oh++=c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> clop() fwrite(cltstream::cltout,1,cltstream::oh-cltstream::cltout,stdout)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> size</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _tp&gt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(_tp&amp; x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sn=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">char</span> c=gc();</span><br><span class="line">        <span class="keyword">for</span>(;c!=<span class="number">45</span>&amp;&amp;(c&lt;<span class="number">48</span>||c&gt;<span class="number">57</span>)&amp;&amp;c!=EOF;c=gc());</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="number">45</span>&amp;&amp;c!=EOF)</span><br><span class="line">            sn=<span class="number">-1</span>,c=gc();</span><br><span class="line">        <span class="keyword">for</span>(x=<span class="number">0</span>;c&gt;=<span class="number">48</span>&amp;&amp;c&lt;=<span class="number">57</span>&amp;&amp;c!=EOF;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>),c=gc());</span><br><span class="line">        x*=sn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _tp&gt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(_tp x,<span class="keyword">char</span> text=<span class="number">-1</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">            pc(<span class="number">45</span>),x=-x;</span><br><span class="line">        <span class="keyword">if</span>(!x)</span><br><span class="line">            pc(<span class="number">48</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> digit[<span class="number">22</span>];</span><br><span class="line">            <span class="keyword">for</span>(digit[<span class="number">0</span>]=<span class="number">0</span>;x;digit[++digit[<span class="number">0</span>]]=x%<span class="number">10</span>,x/=<span class="number">10</span>);</span><br><span class="line">            <span class="keyword">for</span>(;digit[<span class="number">0</span>];pc(digit[digit[<span class="number">0</span>]--]^<span class="number">48</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(text&gt;=<span class="number">0</span>)</span><br><span class="line">            pc(text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> unit[<span class="number">2</span>][<span class="number">24</span>],rev[maxn+<span class="number">1</span>],F[maxn+<span class="number">1</span>],G[maxn+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">cltpow</span><span class="params">(re <span class="keyword">int</span> x,re <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    re <span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;y;)&#123;</span><br><span class="line">        <span class="keyword">if</span>(y&amp;<span class="number">1</span>)</span><br><span class="line">            res=<span class="number">1L</span>L*res*x%mod;</span><br><span class="line">        x=<span class="number">1L</span>L*x*x%mod;</span><br><span class="line">        y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">NTT</span><span class="params">(<span class="keyword">int</span>* F,re <span class="keyword">int</span> tp)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        <span class="keyword">if</span>(i&lt;rev[i])</span><br><span class="line">            swap(F[i],F[rev[i]]);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> k=<span class="number">1</span>,p=<span class="number">1</span>;p&lt;n;++k,p&lt;&lt;=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i+=p&lt;&lt;<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span>(re <span class="keyword">int</span> j=i,tmp=<span class="number">1</span>;j&lt;i+p;++j,tmp=<span class="number">1L</span>L*tmp*unit[tp][k]%mod)&#123;</span><br><span class="line">                re <span class="keyword">int</span> x=F[j],y=<span class="number">1L</span>L*F[j+p]*tmp%mod;</span><br><span class="line">                F[j]=(x+y)%mod;</span><br><span class="line">                F[j+p]=(x-y+mod)%mod;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    unit[<span class="number">0</span>][<span class="number">23</span>]=cltpow(<span class="number">3</span>,<span class="number">119</span>);</span><br><span class="line">    unit[<span class="number">1</span>][<span class="number">23</span>]=cltpow(<span class="number">332748118</span>,<span class="number">119</span>);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">2</span>;++i)</span><br><span class="line">        <span class="keyword">for</span>(re <span class="keyword">int</span> j=<span class="number">22</span>;j&gt;=<span class="number">0</span>;--j)</span><br><span class="line">            unit[i][j]=<span class="number">1L</span>L*unit[i][j+<span class="number">1</span>]*unit[i][j+<span class="number">1</span>]%mod;</span><br><span class="line">    cltstream::read(n);</span><br><span class="line">    cltstream::read(m);</span><br><span class="line">    ++n;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        cltstream::read(F[i]);</span><br><span class="line">    ++m;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)</span><br><span class="line">        cltstream::read(G[i]);</span><br><span class="line">    <span class="keyword">for</span>(m+=n<span class="number">-1</span>,n=<span class="number">1</span>;n&lt;m;n&lt;&lt;=<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)?(n&gt;&gt;<span class="number">1</span>):<span class="number">0</span>);</span><br><span class="line">    NTT(F,<span class="number">0</span>);</span><br><span class="line">    NTT(G,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)</span><br><span class="line">        F[i]=<span class="number">1L</span>L*F[i]*G[i]%mod;</span><br><span class="line">    NTT(F,<span class="number">1</span>);</span><br><span class="line">    n=cltpow(n,mod<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;++i)</span><br><span class="line">        cltstream::write(<span class="number">1L</span>L*F[i]*n%mod,i&lt;m<span class="number">-1</span>?<span class="number">32</span>:<span class="number">-1</span>);</span><br><span class="line">    clop();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p>以上。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近正好月考，然而并不想去月考，于是来颓blog吧。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://github.com/Challestend/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="NTT" scheme="https://github.com/Challestend/tags/NTT/"/>
    
      <category term="FFT" scheme="https://github.com/Challestend/tags/FFT/"/>
    
  </entry>
  
  <entry>
    <title>关于最优化分块时间复杂度的研究报告</title>
    <link href="https://github.com/Challestend/sqrt-decomposition-complexity-optimization/"/>
    <id>https://github.com/Challestend/sqrt-decomposition-complexity-optimization/</id>
    <published>2018-12-19T12:19:18.000Z</published>
    <updated>2019-02-13T00:16:28.185Z</updated>
    
    <content type="html"><![CDATA[<p>最近在刷Ynoi，然后卡常卡到自闭，于是来系统地研究一下分块的复杂度。</p><a id="more"></a><p>假设我们有一个长度为$n$的序列，块的大小是$x$，令$y=\cfrac{n}{x}$。对于每一次修改操作，我们的运算量是$\text{A}x+\text{B}y$。根据均值不等式</p><script type="math/tex; mode=display">\cfrac{1}{2}(x+y)\geqslant\sqrt{xy}</script><p>我们有</p><script type="math/tex; mode=display">\text{A}x+\text{B}y\geqslant2\sqrt{\text{AB}n}</script><p>当且仅当$x=\sqrt{\cfrac{\text{B}}{\text{A}}n}$时取等号。此时时间复杂度最小，为$O(\sqrt{\text{AB}n})$。</p><p>以上。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在刷Ynoi，然后卡常卡到自闭，于是来系统地研究一下分块的复杂度。&lt;/p&gt;
    
    </summary>
    
      <category term="研究报告" scheme="https://github.com/Challestend/categories/%E7%A0%94%E7%A9%B6%E6%8A%A5%E5%91%8A/"/>
    
    
      <category term="分块" scheme="https://github.com/Challestend/tags/%E5%88%86%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>「未来算法Episode I」严格根号分块实现树套树</title>
    <link href="https://github.com/Challestend/future-algorithm-ep1/"/>
    <id>https://github.com/Challestend/future-algorithm-ep1/</id>
    <published>2018-12-08T11:55:00.000Z</published>
    <updated>2019-02-13T00:16:28.185Z</updated>
    
    <content type="html"><![CDATA[<p>分块天下第一！！！！！！！！！</p><a id="more"></a><p>我也不知道我为什么要写这个玩意，大概是我真的被这个外挂一般的东西吓到了吧。</p><p><a href="https://www.luogu.org/record/show?rid=14518116" target="_blank" rel="noopener"><img src="https://i.loli.net/2018/12/08/5c0bb272768cf.png" alt=""></a></p><p><img src="https://i.loli.net/2018/12/08/5c0bb2c767fda.jpg" alt=""></p><p>我们从头说起。点开上面的那个评测记录，我们可以看到一道树套树的模板题。</p><p>先退一步来说，假如说我们去掉操作$3$，剩下的操作都可以用主席树来完成。</p><p>然而麻烦的是，我们在树上存的是前缀和。想要修改的话，暴力的复杂度是单次$O(n\operatorname{log}n)$的。</p><p>那我们就在外层套个树状数组，把修改$O(n\operatorname{log}n)$查询$O(\operatorname{log}n)$均摊成全部$O(\operatorname{log}^{2}n)$。</p><p>然而，很遗憾，我不会树套树，一点都不会，就连上面的这段文字也是我瞎扯出来的。</p><p>考虑<del>无敌的</del>分块。</p><p>一般我们想到的分块就是在块内维护<code>std::set</code>。这样操作$3$可以做到$O(\operatorname{log}\sqrt{n})$，操作$1$、$4$、$5$可以做到$O(\sqrt{n}\operatorname{log}\sqrt{n})$。至于操作$2$，我们在外层套一个二分，然后检查二分到的数的排名是不是$k$，时间复杂度$O(\operatorname{log}10^{9}\sqrt{n}\operatorname{log}\sqrt{n})$。</p><p>然而很明显的，这样做的效率十分低下，除了实现复杂度相对树套树小了一点以外没有任何优势。</p><p>我们来看一下<a href="https://www.luogu.org/space/show?uid=56384" target="_blank" rel="noopener"><strong>Shadowice1984</strong></a>dalao在他的<a href="https://www.luogu.org/blog/ShadowassIIXVIIIIV/solution-p4119" target="_blank" rel="noopener">另一篇题解</a>中做出的评价：</p><blockquote><p>这其实是一个误区。主席树之所以采取了二分的思路来解决问题是因为我们要求回答单次询问做到$O(\operatorname{log}n)$的复杂度，这时候唯一的可行思路就是二分否则我们无法将复杂度控制在一个$\text{log}$之内。</p><p>但是我们现在是使用分块解决问题。分块是有自己复杂度的，就是$O(\sqrt{n})$而不是$O(\operatorname{log}n)$，这意味着分块其实和$\text{log}$的数据结构以及二分法并不是很搭（因为分块的结构本质上就不支持二分）。如果我们需要强行嵌入$\text{log}$的数据结构的话在绝大部分情况下都会使复杂度凭空多出个$\text{log}$来，这在强调常数的根号算法中绝对是致命的。</p></blockquote><p>我也是从这位dalao的<a href="https://www.luogu.org/blog/ShadowassIIXVIIIIV/solution-p3380" target="_blank" rel="noopener">blog</a>里看到了严格根号分块实现树套树这种未来算法。</p><p>主要思想其实不难理解，既然分块和$\text{log}$不适合放在一起，我们就再套个分块，或者说，把值域也分成块。</p><p>定义<code>cnt1[i][j]</code>表示前$i$个块内有多少个元素的值在第$j$个块内，<code>cnt2[i][j]</code>表示前$i$个块内有多少个$j$（当然是离散化后的）。不难发现预处理出这两个数组的时间复杂度是$O((n+m)\sqrt{n})$的。</p><p>然后我们来分析每个操作该怎么实现：</p><ol><li>首先考虑序列中的整块。从头开始扫一遍值域块，一直扫到给定数所在块的前一个块，然后再在给定数所在块内从头扫到给定数的前一个，查询扫过的值有多少落在这些整块内。剩下的边角块自然地暴力判断。</li><li>还是从头扫一遍值域块，看看每个值域块内有多少数落在给定区间内，大概判断出答案在哪个值域块内。然后在这个值域块内再扫一遍即可。需要注意的是我们需要再开两个数组<code>tmp1</code>和<code>tmp2</code>来保存边角块的信息。</li><li>直接$O(\sqrt{n})$暴力重构两个<code>cnt</code>就好。</li><li>需要两个类似于操作$2$的临时数组，存储的信息也是类似的。首先在给定数所在值域块内<strong>从后往前扫</strong>，找到答案直接退出。否则还是<strong>从后往前扫所有值域块</strong>，找到第一个非空的块然后进去找。</li><li>操作$4$换个方向即可。</li></ol><p>综上所述，该算法的时间复杂度为$O((n+m)\sqrt{n}+m\sqrt{n+m})$。当$n$，$m$取到极限值时，差不多是$38172068$，相比之下$O(m\operatorname{log}^{2}n)\approx 12183043$。看起来好像比不过树套树，实际上开个$\text{O}2$跑得比谁都快，正如一开始那张图所示。</p><p>不过代码写出来有点长的：</p><div><div class="fold_hider"><div class="close hider_title">Toggle Code</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 50000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 50000</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxs 230</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(a,b) ((a)&gt;=(b)?(a):(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(a,b) ((a)&lt;=(b)?(a):(b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lowbit(a) ((a)&amp;(-(a)))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> cltstream&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> size 1048576</span></span><br><span class="line">    <span class="keyword">char</span> cltin[size+<span class="number">1</span>],*ih=cltin,*it=cltin;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">ifdef</span> ONLINE_JUDGE</span></span><br><span class="line">            <span class="keyword">if</span>(ih==it)&#123;</span><br><span class="line">                it=(ih=cltin)+fread(cltin,<span class="number">1</span>,size,<span class="built_in">stdin</span>);</span><br><span class="line">                <span class="keyword">if</span>(ih==it)</span><br><span class="line">                    <span class="keyword">return</span> EOF;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> *ih++;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">            <span class="keyword">return</span> getchar();</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> cltout[size+<span class="number">1</span>],*oh=cltout,*ot=cltout+size;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pc</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(oh==ot)&#123;</span><br><span class="line">            fwrite(cltout,<span class="number">1</span>,size,<span class="built_in">stdout</span>);</span><br><span class="line">            oh=cltout;</span><br><span class="line">        &#125;</span><br><span class="line">        *oh++=c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> clop() fwrite(cltstream::cltout,1,cltstream::oh-cltstream::cltout,stdout)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> size</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _tp&gt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(_tp&amp; x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sn=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">char</span> c=gc();</span><br><span class="line">        <span class="keyword">for</span>(;c!=<span class="number">45</span>&amp;&amp;(c&lt;<span class="number">48</span>||c&gt;<span class="number">57</span>)&amp;&amp;c!=EOF;c=gc());</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="number">45</span>&amp;&amp;c!=EOF)</span><br><span class="line">            sn=<span class="number">-1</span>,c=gc();</span><br><span class="line">        <span class="keyword">for</span>(x=<span class="number">0</span>;c&gt;=<span class="number">48</span>&amp;&amp;c&lt;=<span class="number">57</span>&amp;&amp;c!=EOF;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>),c=gc());</span><br><span class="line">        x*=sn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _tp&gt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(_tp x,<span class="keyword">char</span> text=<span class="number">-1</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">            pc(<span class="number">45</span>),x=-x;</span><br><span class="line">        <span class="keyword">if</span>(!x)</span><br><span class="line">            pc(<span class="number">48</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> digit[<span class="number">22</span>];</span><br><span class="line">            <span class="keyword">for</span>(digit[<span class="number">0</span>]=<span class="number">0</span>;x;digit[++digit[<span class="number">0</span>]]=x%<span class="number">10</span>,x/=<span class="number">10</span>);</span><br><span class="line">            <span class="keyword">for</span>(;digit[<span class="number">0</span>];pc(digit[digit[<span class="number">0</span>]--]^<span class="number">48</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(text&gt;=<span class="number">0</span>)</span><br><span class="line">            pc(text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,sq1,sq2;</span><br><span class="line"><span class="keyword">int</span> id1[maxn+<span class="number">1</span>],id2[maxn+maxm+<span class="number">1</span>],p[maxn+maxm+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> a[maxn+<span class="number">1</span>],opt[maxm+<span class="number">1</span>][<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> cnt1[maxs+<span class="number">1</span>][(maxs&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>],cnt2[maxs+<span class="number">1</span>][maxn+maxm+<span class="number">1</span>],tmp1[(maxs&lt;&lt;<span class="number">1</span>)+<span class="number">1</span>],tmp2[maxn+maxm+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cltstream::read(n);</span><br><span class="line">    cltstream::read(m);</span><br><span class="line">    <span class="keyword">for</span>(;(sq1+<span class="number">1</span>)*(sq1+<span class="number">1</span>)&lt;=n;++sq1);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        id1[i]=(i<span class="number">-1</span>)/sq1+<span class="number">1</span>;</span><br><span class="line">        cltstream::read(a[i]);</span><br><span class="line">        p[++p[<span class="number">0</span>]]=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        cltstream::read(opt[i][<span class="number">0</span>]);</span><br><span class="line">        cltstream::read(opt[i][<span class="number">1</span>]);</span><br><span class="line">        cltstream::read(opt[i][<span class="number">2</span>]);</span><br><span class="line">        <span class="keyword">if</span>(opt[i][<span class="number">0</span>]!=<span class="number">3</span>)</span><br><span class="line">            cltstream::read(opt[i][<span class="number">3</span>]);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p[++p[<span class="number">0</span>]]=opt[i][<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::sort(p+<span class="number">1</span>,p+p[<span class="number">0</span>]+<span class="number">1</span>);</span><br><span class="line">    p[<span class="number">0</span>]=<span class="built_in">std</span>::unique(p+<span class="number">1</span>,p+p[<span class="number">0</span>]+<span class="number">1</span>)-p<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;(sq2+<span class="number">1</span>)*(sq2+<span class="number">1</span>)&lt;=p[<span class="number">0</span>];++sq2);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=p[<span class="number">0</span>];++i)</span><br><span class="line">        id2[i]=(i<span class="number">-1</span>)/sq2+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">        a[i]=<span class="built_in">std</span>::lower_bound(p+<span class="number">1</span>,p+p[<span class="number">0</span>]+<span class="number">1</span>,a[i])-p;</span><br><span class="line">        ++cnt1[id1[i]][id2[a[i]]];</span><br><span class="line">        ++cnt2[id1[i]][a[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=id1[n];++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(re <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=id2[p[<span class="number">0</span>]];++j)</span><br><span class="line">            cnt1[i][j]+=cnt1[i<span class="number">-1</span>][j];</span><br><span class="line">        <span class="keyword">for</span>(re <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=p[<span class="number">0</span>];++j)</span><br><span class="line">            cnt2[i][j]+=cnt2[i<span class="number">-1</span>][j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        re <span class="keyword">int</span> l,r,x,ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">switch</span>(opt[i][<span class="number">0</span>])&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                l=opt[i][<span class="number">1</span>],r=opt[i][<span class="number">2</span>],x=<span class="built_in">std</span>::lower_bound(p+<span class="number">1</span>,p+p[<span class="number">0</span>]+<span class="number">1</span>,opt[i][<span class="number">3</span>])-p;</span><br><span class="line">                <span class="keyword">if</span>(id1[l]&lt;id1[r])&#123;</span><br><span class="line">                    <span class="keyword">for</span>(re <span class="keyword">int</span> j=l;j&lt;=id1[l]*sq1;++j)</span><br><span class="line">                        ans+=(a[j]&lt;x);</span><br><span class="line">                    <span class="keyword">for</span>(re <span class="keyword">int</span> j=(id1[r]<span class="number">-1</span>)*sq1+<span class="number">1</span>;j&lt;=r;++j)</span><br><span class="line">                        ans+=(a[j]&lt;x);</span><br><span class="line">                    <span class="keyword">for</span>(re <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;id2[x];++j)</span><br><span class="line">                        ans+=cnt1[id1[r]<span class="number">-1</span>][j]-cnt1[id1[l]][j];</span><br><span class="line">                    <span class="keyword">for</span>(re <span class="keyword">int</span> j=(id2[x]<span class="number">-1</span>)*sq2+<span class="number">1</span>;j&lt;x;++j)</span><br><span class="line">                        ans+=cnt2[id1[r]<span class="number">-1</span>][j]-cnt2[id1[l]][j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">for</span>(re <span class="keyword">int</span> j=l;j&lt;=r;++j)</span><br><span class="line">                        ans+=(a[j]&lt;x);</span><br><span class="line">                cltstream::write(ans+<span class="number">1</span>,<span class="number">10</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                l=opt[i][<span class="number">1</span>],r=opt[i][<span class="number">2</span>],x=opt[i][<span class="number">3</span>];</span><br><span class="line">                <span class="keyword">if</span>(id1[l]&lt;id1[r])&#123;</span><br><span class="line">                    <span class="keyword">for</span>(re <span class="keyword">int</span> j=l;j&lt;=id1[l]*sq1;++j)&#123;</span><br><span class="line">                        ++tmp1[id2[a[j]]];</span><br><span class="line">                        ++tmp2[a[j]];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span>(re <span class="keyword">int</span> j=(id1[r]<span class="number">-1</span>)*sq1+<span class="number">1</span>;j&lt;=r;++j)&#123;</span><br><span class="line">                        ++tmp1[id2[a[j]]];</span><br><span class="line">                        ++tmp2[a[j]];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span>(re <span class="keyword">int</span> j=<span class="number">1</span>;;++j)</span><br><span class="line">                        <span class="keyword">if</span>(x&gt;cnt1[id1[r]<span class="number">-1</span>][j]-cnt1[id1[l]][j]+tmp1[j])</span><br><span class="line">                            x-=cnt1[id1[r]<span class="number">-1</span>][j]-cnt1[id1[l]][j]+tmp1[j];</span><br><span class="line">                        <span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="keyword">for</span>(re <span class="keyword">int</span> k=(j<span class="number">-1</span>)*sq2+<span class="number">1</span>;k&lt;=j*sq2;++k)</span><br><span class="line">                                <span class="keyword">if</span>(x&gt;cnt2[id1[r]<span class="number">-1</span>][k]-cnt2[id1[l]][k]+tmp2[k])</span><br><span class="line">                                    x-=cnt2[id1[r]<span class="number">-1</span>][k]-cnt2[id1[l]][k]+tmp2[k];</span><br><span class="line">                                <span class="keyword">else</span>&#123;</span><br><span class="line">                                    cltstream::write(p[k],<span class="number">10</span>);</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    <span class="keyword">for</span>(re <span class="keyword">int</span> j=l;j&lt;=id1[l]*sq1;++j)&#123;</span><br><span class="line">                        --tmp1[id2[a[j]]];</span><br><span class="line">                        --tmp2[a[j]];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span>(re <span class="keyword">int</span> j=(id1[r]<span class="number">-1</span>)*sq1+<span class="number">1</span>;j&lt;=r;++j)&#123;</span><br><span class="line">                        --tmp1[id2[a[j]]];</span><br><span class="line">                        --tmp2[a[j]];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">for</span>(re <span class="keyword">int</span> j=l;j&lt;=r;++j)&#123;</span><br><span class="line">                        ++tmp1[id2[a[j]]];</span><br><span class="line">                        ++tmp2[a[j]];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span>(re <span class="keyword">int</span> j=<span class="number">1</span>;;++j)</span><br><span class="line">                        <span class="keyword">if</span>(x&gt;tmp1[j])</span><br><span class="line">                            x-=tmp1[j];</span><br><span class="line">                        <span class="keyword">else</span>&#123;</span><br><span class="line">                            <span class="keyword">for</span>(re <span class="keyword">int</span> k=(j<span class="number">-1</span>)*sq2+<span class="number">1</span>;k&lt;=j*sq2;++k)</span><br><span class="line">                                <span class="keyword">if</span>(x&gt;tmp2[k])</span><br><span class="line">                                    x-=tmp2[k];</span><br><span class="line">                                <span class="keyword">else</span>&#123;</span><br><span class="line">                                    cltstream::write(p[k],<span class="number">10</span>);</span><br><span class="line">                                    <span class="keyword">break</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    <span class="keyword">for</span>(re <span class="keyword">int</span> j=l;j&lt;=r;++j)&#123;</span><br><span class="line">                        --tmp1[id2[a[j]]];</span><br><span class="line">                        --tmp2[a[j]];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                l=opt[i][<span class="number">1</span>],x=<span class="built_in">std</span>::lower_bound(p+<span class="number">1</span>,p+p[<span class="number">0</span>]+<span class="number">1</span>,opt[i][<span class="number">2</span>])-p;</span><br><span class="line">                <span class="keyword">for</span>(re <span class="keyword">int</span> j=id1[l];j&lt;=id1[n];++j)&#123;</span><br><span class="line">                    --cnt1[j][id2[a[l]]];</span><br><span class="line">                    ++cnt1[j][id2[x]];</span><br><span class="line">                    --cnt2[j][a[l]];</span><br><span class="line">                    ++cnt2[j][x];</span><br><span class="line">                &#125;</span><br><span class="line">                a[l]=x;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                l=opt[i][<span class="number">1</span>],r=opt[i][<span class="number">2</span>],x=<span class="built_in">std</span>::lower_bound(p+<span class="number">1</span>,p+p[<span class="number">0</span>]+<span class="number">1</span>,opt[i][<span class="number">3</span>])-p;</span><br><span class="line">                <span class="keyword">if</span>(id1[l]&lt;id1[r])&#123;</span><br><span class="line">                    <span class="keyword">for</span>(re <span class="keyword">int</span> j=l;j&lt;=id1[l]*sq1;++j)&#123;</span><br><span class="line">                        ++tmp1[id2[a[j]]];</span><br><span class="line">                        ++tmp2[a[j]];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span>(re <span class="keyword">int</span> j=(id1[r]<span class="number">-1</span>)*sq1+<span class="number">1</span>;j&lt;=r;++j)&#123;</span><br><span class="line">                        ++tmp1[id2[a[j]]];</span><br><span class="line">                        ++tmp2[a[j]];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span>(re <span class="keyword">int</span> j=x<span class="number">-1</span>;j&gt;=(id2[x]<span class="number">-1</span>)*sq2+<span class="number">1</span>&amp;&amp;!ans;--j)</span><br><span class="line">                        <span class="keyword">if</span>(cnt2[id1[r]<span class="number">-1</span>][j]-cnt2[id1[l]][j]+tmp2[j])</span><br><span class="line">                            ans=j;</span><br><span class="line">                    <span class="keyword">for</span>(re <span class="keyword">int</span> j=id2[x]<span class="number">-1</span>;j&gt;=<span class="number">1</span>&amp;&amp;!ans;--j)</span><br><span class="line">                        <span class="keyword">if</span>(cnt1[id1[r]<span class="number">-1</span>][j]-cnt1[id1[l]][j]+tmp1[j])</span><br><span class="line">                            <span class="keyword">for</span>(re <span class="keyword">int</span> k=j*sq2;k&gt;=(j<span class="number">-1</span>)*sq2+<span class="number">1</span>&amp;&amp;!ans;--k)</span><br><span class="line">                                <span class="keyword">if</span>(cnt2[id1[r]<span class="number">-1</span>][k]-cnt2[id1[l]][k]+tmp2[k])</span><br><span class="line">                                    ans=k;</span><br><span class="line">                    <span class="keyword">for</span>(re <span class="keyword">int</span> j=l;j&lt;=id1[l]*sq1;++j)&#123;</span><br><span class="line">                        --tmp1[id2[a[j]]];</span><br><span class="line">                        --tmp2[a[j]];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span>(re <span class="keyword">int</span> j=(id1[r]<span class="number">-1</span>)*sq1+<span class="number">1</span>;j&lt;=r;++j)&#123;</span><br><span class="line">                        --tmp1[id2[a[j]]];</span><br><span class="line">                        --tmp2[a[j]];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">for</span>(re <span class="keyword">int</span> j=l;j&lt;=r;++j)&#123;</span><br><span class="line">                        ++tmp1[id2[a[j]]];</span><br><span class="line">                        ++tmp2[a[j]];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span>(re <span class="keyword">int</span> j=x<span class="number">-1</span>;j&gt;=(id2[x]<span class="number">-1</span>)*sq2+<span class="number">1</span>&amp;&amp;!ans;--j)</span><br><span class="line">                        <span class="keyword">if</span>(tmp2[j])</span><br><span class="line">                            ans=j;</span><br><span class="line">                    <span class="keyword">for</span>(re <span class="keyword">int</span> j=id2[x]<span class="number">-1</span>;j&gt;=<span class="number">1</span>&amp;&amp;!ans;--j)</span><br><span class="line">                        <span class="keyword">if</span>(tmp1[j])</span><br><span class="line">                            <span class="keyword">for</span>(re <span class="keyword">int</span> k=j*sq2;k&gt;=(j<span class="number">-1</span>)*sq2+<span class="number">1</span>&amp;&amp;!ans;--k)</span><br><span class="line">                                <span class="keyword">if</span>(tmp2[k])</span><br><span class="line">                                    ans=k;</span><br><span class="line">                    <span class="keyword">for</span>(re <span class="keyword">int</span> j=l;j&lt;=r;++j)&#123;</span><br><span class="line">                        --tmp1[id2[a[j]]];</span><br><span class="line">                        --tmp2[a[j]];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                cltstream::write(ans?p[ans]:<span class="number">-2147483647</span>,<span class="number">10</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                l=opt[i][<span class="number">1</span>],r=opt[i][<span class="number">2</span>],x=<span class="built_in">std</span>::upper_bound(p+<span class="number">1</span>,p+p[<span class="number">0</span>]+<span class="number">1</span>,opt[i][<span class="number">3</span>])-p<span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">if</span>(id1[l]&lt;id1[r])&#123;</span><br><span class="line">                    <span class="keyword">for</span>(re <span class="keyword">int</span> j=l;j&lt;=id1[l]*sq1;++j)&#123;</span><br><span class="line">                        ++tmp1[id2[a[j]]];</span><br><span class="line">                        ++tmp2[a[j]];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span>(re <span class="keyword">int</span> j=(id1[r]<span class="number">-1</span>)*sq1+<span class="number">1</span>;j&lt;=r;++j)&#123;</span><br><span class="line">                        ++tmp1[id2[a[j]]];</span><br><span class="line">                        ++tmp2[a[j]];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span>(re <span class="keyword">int</span> j=x+<span class="number">1</span>;j&lt;=id2[x]*sq2&amp;&amp;!ans;++j)</span><br><span class="line">                        <span class="keyword">if</span>(cnt2[id1[r]<span class="number">-1</span>][j]-cnt2[id1[l]][j]+tmp2[j])</span><br><span class="line">                            ans=j;</span><br><span class="line">                    <span class="keyword">for</span>(re <span class="keyword">int</span> j=id2[x]+<span class="number">1</span>;j&lt;=id2[p[<span class="number">0</span>]]&amp;&amp;!ans;++j)</span><br><span class="line">                        <span class="keyword">if</span>(cnt1[id1[r]<span class="number">-1</span>][j]-cnt1[id1[l]][j]+tmp1[j])</span><br><span class="line">                            <span class="keyword">for</span>(re <span class="keyword">int</span> k=(j<span class="number">-1</span>)*sq2+<span class="number">1</span>;k&lt;=j*sq2&amp;&amp;!ans;++k)</span><br><span class="line">                                <span class="keyword">if</span>(cnt2[id1[r]<span class="number">-1</span>][k]-cnt2[id1[l]][k]+tmp2[k])</span><br><span class="line">                                    ans=k;</span><br><span class="line">                    <span class="keyword">for</span>(re <span class="keyword">int</span> j=l;j&lt;=id1[l]*sq1;++j)&#123;</span><br><span class="line">                        --tmp1[id2[a[j]]];</span><br><span class="line">                        --tmp2[a[j]];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span>(re <span class="keyword">int</span> j=(id1[r]<span class="number">-1</span>)*sq1+<span class="number">1</span>;j&lt;=r;++j)&#123;</span><br><span class="line">                        --tmp1[id2[a[j]]];</span><br><span class="line">                        --tmp2[a[j]];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">for</span>(re <span class="keyword">int</span> j=l;j&lt;=r;++j)&#123;</span><br><span class="line">                        ++tmp1[id2[a[j]]];</span><br><span class="line">                        ++tmp2[a[j]];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span>(re <span class="keyword">int</span> j=x+<span class="number">1</span>;j&lt;=id2[x]*sq2&amp;&amp;!ans;++j)</span><br><span class="line">                        <span class="keyword">if</span>(tmp2[j])</span><br><span class="line">                            ans=j;</span><br><span class="line">                    <span class="keyword">for</span>(re <span class="keyword">int</span> j=id2[x]+<span class="number">1</span>;j&lt;=id2[p[<span class="number">0</span>]]&amp;&amp;!ans;++j)</span><br><span class="line">                        <span class="keyword">if</span>(tmp1[j])</span><br><span class="line">                            <span class="keyword">for</span>(re <span class="keyword">int</span> k=(j<span class="number">-1</span>)*sq2+<span class="number">1</span>;k&lt;=j*sq2&amp;&amp;!ans;++k)</span><br><span class="line">                                <span class="keyword">if</span>(tmp2[k])</span><br><span class="line">                                    ans=k;</span><br><span class="line">                    <span class="keyword">for</span>(re <span class="keyword">int</span> j=l;j&lt;=r;++j)&#123;</span><br><span class="line">                        --tmp1[id2[a[j]]];</span><br><span class="line">                        --tmp2[a[j]];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                cltstream::write(ans?p[ans]:<span class="number">2147483647</span>,<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    clop();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p>我还没写啥呢咋就$12\text{KB}$了（</p><p>这大概会成为一个系列，名字就叫做「未来算法」（Future Algorithm），不过也说不定，会不会以后哪天突然蹦出来个「未来算法Episode II」也说不定（</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分块天下第一！！！！！！！！！&lt;/p&gt;
    
    </summary>
    
      <category term="未来算法" scheme="https://github.com/Challestend/categories/%E6%9C%AA%E6%9D%A5%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="树套树" scheme="https://github.com/Challestend/tags/%E6%A0%91%E5%A5%97%E6%A0%91/"/>
    
      <category term="分块" scheme="https://github.com/Challestend/tags/%E5%88%86%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>一些乱七八糟的数论</title>
    <link href="https://github.com/Challestend/number-theory-learning-notes/"/>
    <id>https://github.com/Challestend/number-theory-learning-notes/</id>
    <published>2018-11-29T06:41:17.000Z</published>
    <updated>2019-02-13T00:16:28.185Z</updated>
    
    <content type="html"><![CDATA[<p>最近在洛谷日报的待审核列表里翻到了杜教筛的相关内容，打算连着之前的卷积反演啥的一起复习一下。</p><p><del>抄袭来源</del>参考文献：</p><ul><li><a href="https://lx-2003.blog.luogu.org/mobius-inversion" target="_blank" rel="noopener">铃悬的数学小讲堂——狄利克雷卷积与莫比乌斯反演</a></li><li><a href="https://www.luogu.org/blog/54745/dls-tql" target="_blank" rel="noopener">浅谈杜教筛</a></li><li><a href="https://lx-2003.blog.luogu.org/dujiao-sieve" target="_blank" rel="noopener">铃悬的数学小讲堂——杜教筛</a></li></ul><a id="more"></a><h1 id="数论函数"><a href="#数论函数" class="headerlink" title="数论函数"></a>数论函数</h1><h2 id="定义与相关性质"><a href="#定义与相关性质" class="headerlink" title="定义与相关性质"></a>定义与相关性质</h2><p>数论函数就是定义域为$\mathbb{N}^{+}$的函数。</p><p>两个数论函数相加，就是简单地把函数值相加。</p><script type="math/tex; mode=display">(f+g)(n)=f(n)+g(n)</script><p>数乘也是类似的。</p><script type="math/tex; mode=display">(\alpha f)(n)=\alpha f(n)</script><p>点积也是类似的。</p><script type="math/tex; mode=display">(f\cdot g)(n)=f(n)g(n)</script><p><del>好像没啥用。</del></p><p>在数论函数相关的运算中，一个非常重要的运算是狄利克雷卷积。两个数论函数的狄利克雷卷积是这样定义的：</p><script type="math/tex; mode=display">(f\times g)(n)=\sum\limits_{i\mid n}f(i)g(\cfrac{n}{i})</script><p>或者说：</p><script type="math/tex; mode=display">(f\times g)(n)=\sum\limits_{ij=n}f(i)g(j)</script><p>它具有以下的一些性质：</p><p>交换律，即$f\times g=g\times f$。</p><p>这很明显。</p><p>结合律，即$(f\times g)\times h=f\times(g\times h)$。</p><script type="math/tex; mode=display">\begin{aligned}((f\times g)\times h)(n)&=\sum\limits_{ij=n}(\sum\limits_{kl=i}f(k)g(l))h(j)\\&=\sum\limits_{ijk=n}f(i)g(j)h(k)\end{aligned}</script><script type="math/tex; mode=display">\begin{aligned}(f\times(g\times h))(n)&=\sum\limits_{ij=n}f(i)(\sum\limits_{kl=j}g(k)h(l))\\&=\sum\limits_{ijk=n}f(i)g(j)h(k)\end{aligned}</script><p>分配率，即$(f+g)\times h=f\times h+g\times h$。</p><script type="math/tex; mode=display">\begin{aligned}((f+g)\times h)(n)&=\sum\limits_{ij=n}(f+g)(i)h(j)\\&=\sum\limits_{ij=n}f(i)h(j)+g(i)h(j)\\&=(f\times h)(n)+(g\times h)(n)\end{aligned}</script><p>单位元为$\epsilon(n)=[n=1]$，$f\times\epsilon =f$。</p><p>这也很明显。</p><p>对于任意一个满足$f(1)\neq 0$的函数$f$，都存在唯一的一个函数$g$使得$f\times g=\epsilon$。这时我们称$g$是$f$的逆。</p><p>我们可以这样定义一个函数的逆：</p><script type="math/tex; mode=display">g(n)=\cfrac{\epsilon(n)-\sum\limits_{i\mid n,i\neq 1}f(i)g(\cfrac{n}{i})}{f(1)}</script><p>这样我们就有</p><script type="math/tex; mode=display">\begin{aligned}(f\times g)(n)&=\sum_{i\mid n}f(i)g(\cfrac{n}{i})\\&=f(1)g(n)+\sum_{i\mid n,i\neq 1}f(i)g(\cfrac{n}{i})\\&=\epsilon(n)-\sum\limits_{i\mid n,i\neq 1}f(i)g(\cfrac{n}{i})+\sum_{i\mid n,i\neq 1}f(i)g(\cfrac{n}{i})\\&=\epsilon(n)\end{aligned}</script><h2 id="积性函数与完全积性函数"><a href="#积性函数与完全积性函数" class="headerlink" title="积性函数与完全积性函数"></a>积性函数与完全积性函数</h2><p>如果一个数论函数$f$满足</p><script type="math/tex; mode=display">\forall x,y\in\mathbb{N}^{+}\wedge x\perp y\;\;f(xy)=f(x)f(y)</script><p>我们就说$f$是一个积性函数。</p><p>特别的，如果上式去掉$x\perp y$仍成立，则称$f$是一个完全积性函数。</p><p>很明显地，任意一个积性函数$f$一定有$f(1)=1$，这样才能有$f(1\times n)=f(1)\times f(n)=f(n)$。</p><p>常见的完全积性函数有$\epsilon,id^{k}$。$\epsilon$在上文已经提到过。$id^{k}(n)=n^k$。这两个函数的完全积性十分明显。</p><p>常见的积性函数有$\varphi,d,\sigma$。$\varphi(n)$的值等于小于等于$n$且与$n$互质的正整数的数量。$d(n)$和$\sigma(n)$的值分别等于$n$的约数个数和约数和。</p><p>关于$\varphi$的积性，我并不会证（</p><p>我们来分析$d$的积性。首先，根据唯一分解定理，$n$的每个因数都可以唯一地分解成$n$所有质因子的非负整数次幂乘积。不妨设</p><script type="math/tex; mode=display">n=\prod\limits_{i=1}^{N}p_{i}^{r_{i}}</script><p>其中$p_{i}$都是质数，所有$r_{i}$都是正整数。对于每一个$p_{i}$，它的指数有$(r_{i}+1)$种取值，因而我们有</p><script type="math/tex; mode=display">d(n)=\prod\limits_{i=1}^{N}(r_{i}+1)</script><p>我们再假设有一个$m$，且</p><script type="math/tex; mode=display">m=\prod\limits_{i=1}^{M}q_{i}^{s_{i}}</script><p>如果说$n\perp m$，肯定有</p><script type="math/tex; mode=display">\forall i\in [1,N]\cap\mathbb{Z},j\in [1,M]\cap\mathbb{Z}\;\;p_{i}\neq q_{j}</script><p>于是我们就有</p><script type="math/tex; mode=display">nm=(\prod\limits_{i=1}^{N}p_{i}^{r_{i}})(\prod\limits_{j=1}^{M}q_{j}^{s_{j}})</script><script type="math/tex; mode=display">\begin{aligned}d(nm)&=(\prod\limits_{i=1}^{N}(r_{i}+1))(\prod\limits_{j=1}^{M}(s_{j}+1))\\&=d(n)d(m)\end{aligned}</script><p>不妨再反过来考虑。如果说$n\not\perp m$，那么一定存在一对$(i,j)(i\in [1,N]\cap\mathbb{Z},j\in [1,M]\cap\mathbb{Z})$，使得$p_{i}=q_{j}$。那么$d(n)d(m)$就会有一个因子是$(r_{i}+1)(s_{j}+1)=r_{i}s_{j}+r_{i}+s_{j}+1$。但是仔细思考我们会发现，$d(nm)$中对应的项应该是$r_{i}+s_{j}+1$。因而此时$d(nm)\neq d(n)d(m)$。</p><p>我们再来分析$\sigma$的积性。还是设</p><script type="math/tex; mode=display">n=\prod\limits_{i=1}^{N}p_{i}^{r_{i}}</script><p>其中$p_{i}$都是质数，所有$r_{i}$都是正整数。与$d$不同的是，现在我们是要用$p_{i}$乘出$n$的因数，$p_{i}$在此过程中可以产生的贡献为$p_{i}^x(x\in [0,r_{i}]\cap\mathbb{Z})$。我们可以把这想象成一个$N$个数组，第$i$个数组的长度为$r_{i}+1$，第$j$个元素为$p_{i}^{j-1}$。现在我们每次从每个数组里选出恰好一个元素相乘，要求所有方案的乘积之和。我们知道，这个问题的答案就是</p><script type="math/tex; mode=display">\prod\limits_{i=1}^{N}\sum\limits_{j=0}^{r_{i}}p_{i}^{j}</script><p>这正是$\sigma(n)$的值。</p><p>接下来的过程就与上文证明$d$的积性如出一辙了，在此不再重复。</p><p>现在我们来分析，两个积性函数的卷积是否也是积性函数。<del>虽然说都这么问了肯定就是了。</del></p><script type="math/tex; mode=display">\begin{aligned}(f\times g)(n)(f\times g)(m)&=(\sum\limits_{i\mid n}f(i)g(\cfrac{n}{i}))(\sum\limits_{j\mid m}f(j)g(\cfrac{m}{j}))\\&=\sum\limits_{i\mid n}\sum\limits_{j\mid m}f(i)g(\cfrac{n}{i})f(j)g(\cfrac{m}{j})\\&=\sum\limits_{i\mid n}\sum\limits_{j\mid m}f(ij)g(\cfrac{nm}{ij})\\&=\sum\limits_{k\mid nm}f(k)g(\cfrac{nm}{k})\\&=(f\times g)(nm)\end{aligned}</script><p>关于上面的第四个等号。时刻注意$n\perp m$，在这种前提下，我们枚举到的$i$和$j$一定也是互质的，那么$ij$的所有值一定是互不相同的。这从$d(nm)=d(n)d(m)$这一等式中也能看出。</p><p>再接下来，我们来分析一下一个积性函数的逆是否也是积性函数。</p><p>设有一个积性函数$f$，它的逆是$g$。</p><p>当$nm=1$时，$g(1)=1$。</p><p>当$nm&gt;1$时，我们假设对于任意$n^{\prime}m^{\prime}&lt;nm$，都有$g(n^{\prime}m^{\prime})=g(n^{\prime})g(m^{\prime})$。此时</p><script type="math/tex; mode=display">\begin{aligned}g(nm)&=-\sum\limits_{k\mid nm,k\neq 1}f(k)g(\cfrac{nm}{k})\\&=-\sum\limits_{i\mid n,j\mid m,ij\neq 1}f(i)f(j)g(\cfrac{n}{i})g(\cfrac{m}{j})\\&=g(n)g(m)-\sum\limits_{i\mid n,j\mid m}f(i)f(j)g(\cfrac{n}{i})g(\cfrac{m}{j})\\&=g(n)g(m)-(\sum\limits_{i\mid n}f(i)g(\cfrac{n}{i}))(\sum\limits_{j\mid m}f(j)g(\cfrac{m}{j}))\\&=g(n)g(m)-\epsilon(n)\epsilon(m)\\&=g(n)g(m)\end{aligned}</script><p><del>其实上面这些全都是抄来的（</del></p><h1 id="莫比乌斯反演"><a href="#莫比乌斯反演" class="headerlink" title="莫比乌斯反演"></a>莫比乌斯反演</h1><h2 id="正向反演"><a href="#正向反演" class="headerlink" title="正向反演"></a>正向反演</h2><p>定义$\mu$为$1$的逆。也就是说，$\mu\times 1=\epsilon$。</p><p>如果您看过其他的一些关于莫比乌斯反演的学习笔记的话，您可能会看到如下的定义：</p><blockquote><p>首先地，$\mu(1)=1$。当$n&gt;1$时，如果$n$的所有质因子互不相同，设其有$k$个质因子，那么$\mu(n)=(-1)^{k}$。否则，$\mu(n)=0$。</p></blockquote><p>那么，这两种定义等价吗？</p><p>考虑到$\mu$是一个积性函数，对于任意一个$n&gt;1$，如果我们把它分解成</p><script type="math/tex; mode=display">n=\prod\limits_{i=1}^{N}p_{i}^{r_{i}}</script><p>我们就有</p><script type="math/tex; mode=display">\mu(n)=\prod\limits_{i=1}^{N}\mu(p_{i}^{r_{i}})</script><p>因此，确定一个积性函数的函数值的关键在于确定其在质数的非负整数次幂上的取值。</p><p>设有一个质数$p$。不难发现</p><script type="math/tex; mode=display">\mu(p)=-\mu(1)=-1</script><script type="math/tex; mode=display">\mu(p^{2})=-\mu(1)-\mu(p)=-1+1=0</script><script type="math/tex; mode=display">\mu(p^{3})=-\mu(1)-\mu(p)-\mu(p^{2})=-1+1+0=0</script><script type="math/tex; mode=display">\vdots</script><p>至此，不难看出上文给出的两种定义是等价的。</p><p>那么这个东西有什么用呢？</p><p>我们设</p><script type="math/tex; mode=display">F(n)=\sum\limits_{i\mid n}f(i)</script><p>或者等价地说，$F=f\times 1$。我们可以得到</p><script type="math/tex; mode=display">\begin{aligned}F&=f\times 1\\F\times\mu&=f\times 1\times\mu\\F\times\mu&=f\end{aligned}</script><p>像这样，如果说$F$相对好求，而$f$相对难求，我们就可以通过上式来减小我们求解$f$的难度。具体地说</p><script type="math/tex; mode=display">f(n)=\sum\limits_{i\mid n}F(i)\mu(\cfrac{n}{i})</script><h2 id="反向反演"><a href="#反向反演" class="headerlink" title="反向反演"></a>反向反演</h2><p>有些时候我们还需要用到像下面这样反过来的莫比乌斯反演</p><script type="math/tex; mode=display">F(n)=\sum\limits_{n\mid d}f(d)⇔f(n)=\sum\limits_{n\mid d}F(d)\mu(\cfrac{d}{n})</script><p>我们可以定义一种新的运算</p><script type="math/tex; mode=display">(f\otimes g)(n)=\sum\limits_{n\mid d}f(d)g(\cfrac{d}{n})</script><p>我们不难证明出它具有结合律。具体过程与上文证明狄利克雷卷积的结合律的过程基本重复。那么我们就有</p><script type="math/tex; mode=display">F=f\otimes 1⇔F\otimes\mu=f</script><p>于是就有了上面的反向反演。</p><blockquote><p>Updated on 2018-12-03</p><p>例题……还是算了吧（</p><p>发现反演常用的套路都忘的差不多了，还是别丢人了（</p></blockquote><h1 id="杜教筛"><a href="#杜教筛" class="headerlink" title="杜教筛"></a>杜教筛</h1><h2 id="实现与模板题"><a href="#实现与模板题" class="headerlink" title="实现与模板题"></a>实现与模板题</h2><p>接下来才是主要内容。</p><p>现在，我们要求一个积性函数的前$n$项和。$n\leqslant 10^{10}$。</p><p>我们定义</p><script type="math/tex; mode=display">S(n)=\sum\limits_{i=1}^{n}f(i)</script><p>再拿来一个积性函数$g$，然后把它与$f$卷积并求前缀和。</p><script type="math/tex; mode=display">\begin{aligned}\sum_{i=1}^{n}(f\times g)(i)&=\sum_{i=1}^{n}\sum_{j\mid i}f(j)g(\cfrac{i}{j})\\&=\sum_{i=1}^{n}g(i)\sum_{j=1}^{\lfloor\frac{n}{i}\rfloor}f(j)\\&=\sum_{i=1}^{n}g(i)S(\lfloor\cfrac{n}{i}\rfloor)\end{aligned}</script><p>然而我的语文实在是太菜了，大概说也说不明白，自行理解吧（</p><p>因为$g$也是积性函数，有$g(1)=1$，所以</p><script type="math/tex; mode=display">\begin{aligned}S(n)&=g(1)S(n)\\&=\sum_{i=1}^{n}g(i)S(\lfloor\cfrac{n}{i}\rfloor)-\sum_{i=2}^{n}g(i)S(\lfloor\cfrac{n}{i}\rfloor)\\&=\sum_{i=1}^{n}(f\times g)(i)-\sum_{i=2}^{n}g(i)S(\lfloor\cfrac{n}{i}\rfloor)\end{aligned}</script><p>就是说从第一项开始的前缀和减去从第二项开始的前缀和等于第一项本身。</p><p>如果说我们选择的$g$可以让我们迅速地求出$f\times g$和$g$的前缀和，我们就可以做到快速求$f$的前缀和了。</p><p>关于后面的$g(i)S(\lfloor\cfrac{n}{i}\rfloor)$，如果直接暴力算复杂度会是$O(n)$的，在大部分情况下，这是无法接受的。</p><p>我们来分析一下$\lfloor\cfrac{n}{i}\rfloor$。如果$1\leqslant i\leqslant\sqrt{n}$，因为$i$只有$\sqrt{n}$种不同的取值，$\lfloor\cfrac{n}{i}\rfloor$同样也只有$\sqrt{n}$种不同的取值。如果$\sqrt{n}&lt;i\leqslant n$，$1\leqslant\lfloor\cfrac{n}{i}\rfloor&lt;\sqrt{n}$，又因为要向下取整，自然也只有$\sqrt{n}$种不同的取值。如果我们能够把$\lfloor\cfrac{n}{i}\rfloor$相同的$i$一起计算，就能够将时间杂度优化到$O(\sqrt{n})$。</p><p>大体代码如下：</p><div><div class="fold_hider"><div class="close hider_title">Toggle Code</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(re <span class="keyword">int</span> l=<span class="number">1</span>,r;l&lt;=n;l=r+<span class="number">1</span>)&#123;</span><br><span class="line">    r=n/(n/l);</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p>关于$r$的这个上界是怎么来的，我并不会证（</p><p>这样一来，要计算$S(n)$，我们需要调用所有的$\lfloor\cfrac{n}{x}\rfloor$，分别是$\lfloor\cfrac{n}{1}\rfloor,\lfloor\cfrac{n}{2}\rfloor,\cdots,\lfloor\cfrac{n}{\sqrt{n}}\rfloor,\sqrt{n},\sqrt{n}-1,\cdots,1$。单独计算一个$S(n)$的时间复杂度很明显是$O(\sqrt{n})$的。那么这样一来，总体的时间复杂度就是</p><script type="math/tex; mode=display">\begin{aligned}O(\sum\limits_{i=1}^{\sqrt{n}}\sqrt{i}+\sqrt{\lfloor\cfrac{n}{i}\rfloor})&=O(\sum\limits_{i=1}^{\sqrt{n}}\sqrt{\lfloor\cfrac{n}{i}\rfloor})\\&=O(\int\limits_{1}^{\sqrt{n}}\sqrt{\lfloor\cfrac{n}{x}\rfloor}dx)\\&=O(\int\limits_{1}^{\sqrt{n}}\sqrt{\cfrac{n}{x}}dx)\\&=O(2n^{\frac{1}{2}}(n^{\frac{1}{4}}-1))\\&=O(n^{\frac{3}{4}})\end{aligned}</script><p>因为相比之下$\sqrt{\lfloor\cfrac{n}{i}\rfloor}$很明显要大一些，我们就可以将$\sqrt{i}$舍去。然后去掉取整符号并用积分近似。</p><p>这个实现方法还可以优化。具体来讲，我们先线性筛出前$m$项，然后再用杜教筛。这么做的时间复杂度是$O(m+\cfrac{n}{\sqrt{m}})$，当$m=n^{\frac{2}{3}}$时取得最小值$O(n^{\frac{2}{3}})$。</p><p>举个例子，就比如说我们要求</p><script type="math/tex; mode=display">\sum\limits_{i=1}^{n}\varphi(i)</script><p>我们取$f=\varphi,g=1$，这样根据$\varphi$的性质，$f\times g=id$。不难看出$g$与$f\times g$的前缀和都可以$O(1)$求。具体的代码实现差不多长这样：</p><div><div class="fold_hider"><div class="close hider_title">Toggle Code</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=maxn)</span><br><span class="line">        <span class="keyword">return</span> phi[n];</span><br><span class="line">    <span class="comment">//phi是提前线性筛好的前缀和</span></span><br><span class="line">    <span class="keyword">if</span>(ans.count(n))</span><br><span class="line">        <span class="keyword">return</span> ans[n];</span><br><span class="line">    <span class="comment">//ans用来实现记忆化的哈希表，比如说unordered_map</span></span><br><span class="line">    re <span class="keyword">long</span> <span class="keyword">long</span> res=<span class="number">1L</span>L*n*(n+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="comment">//f*g的前缀和</span></span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> l=<span class="number">2</span>,r;l&lt;=n;l=r+<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//注意要从2开始</span></span><br><span class="line">        r=n/(n/l);</span><br><span class="line">        res-=(r-l+<span class="number">1</span>)*getSum(n/l);</span><br><span class="line">        <span class="comment">//r-l+1是g的前缀和</span></span><br><span class="line">        <span class="comment">//像这样递归+记忆化求解f的前缀和</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans[n]=res;</span><br><span class="line">    <span class="comment">//返回的时候不要忘记存一下</span></span><br><span class="line">    <span class="comment">//就比如说我就忘过一次（</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p>以及，不用哈希表也是可以的。因为我们查询的数都是形如$\lfloor\cfrac{n}{x}\rfloor$的，当这个值大于$n^{\frac{2}{3}}$，即$x&lt;n^{\frac{1}{3}}$时，我们才会到哈希表里查询。因此我们可以令<code>ans[x]</code>表示$S(\lfloor\cfrac{n}{x}\rfloor)$。具体代码我就不写了（</p><p>再举个例子，求</p><script type="math/tex; mode=display">\sum\limits_{i=1}^{n}\mu(i)</script><p>取$f=\mu,g=1,f\times g=\epsilon$。代码和上面差不多。</p><p>如果您理解了上面两个函数，这道<a href="https://www.luogu.org/problemnew/show/P4213" target="_blank" rel="noopener">模板题</a>您就可以切了。</p><h2 id="其他题"><a href="#其他题" class="headerlink" title="其他题"></a>其他题</h2><h3 id="「Luogu-P3768」简单的数学题"><a href="#「Luogu-P3768」简单的数学题" class="headerlink" title="「Luogu-P3768」简单的数学题"></a><a href="https://www.luogu.org/problemnew/show/P3768" target="_blank" rel="noopener">「Luogu-P3768」简单的数学题</a></h3><p>快乐地推式子：</p><script type="math/tex; mode=display">\begin{aligned}\sum\limits_{i=1}^{n}i\sum\limits_{j=1}^{n}j\text{gcd}(i,j)&=\sum\limits_{d=1}^{n}d^{3}\sum\limits_{i=1}^{\lfloor\frac{n}{d}\rfloor}i\sum\limits_{j=1}^{\lfloor\frac{n}{d}\rfloor}j[i\perp j]\\&=\sum\limits_{d=1}^{n}d^{3}\sum\limits_{i=1}^{\lfloor\frac{n}{d}\rfloor}i\sum\limits_{j=1}^{\lfloor\frac{n}{d}\rfloor}j\sum\limits_{x\mid i,x\mid j}\mu(x)\\&=\sum\limits_{d=1}^{n}d^{3}\sum\limits_{x=1}^{\lfloor\frac{n}{d}\rfloor}x^{2}\mu(x)\text{Sum}^{2}(\lfloor\cfrac{n}{dx}\rfloor)\\&=\sum\limits_{i=1}^{n}\text{Sum}^{2}(\lfloor\cfrac{n}{i}\rfloor)i^{2}\sum\limits_{j\mid i}j\mu(\cfrac{i}{j})\\&=\sum\limits_{i=1}^{n}\text{Sum}^{2}(\lfloor\cfrac{n}{i}\rfloor)i^{2}\varphi(i)\end{aligned}</script><p>其中</p><script type="math/tex; mode=display">\text{Sum}(n)=\sum\limits_{i=1}^{n}i</script><p>最后一步是因为</p><script type="math/tex; mode=display">\begin{aligned}id\times\mu&=\varphi\times 1\times\mu\\&=\varphi\times\epsilon\\&=\varphi\end{aligned}</script><p>理解不了上面的式子的话就多看看吧（</p><p>不难发现我们是要求$f(n)=n^{2}\varphi(n)$的前缀和，那么，我们该怎么选取$g$呢？</p><p><del>枚举瞎蒙（</del></p><p>考虑$g(n)=n^{2}$。</p><script type="math/tex; mode=display">\begin{aligned}(f\times g)(n)&=\sum\limits_{i\mid n}f(i)g(\cfrac{n}{i})\\&=\sum\limits_{i\mid n}i^{2}\varphi(i)\cfrac{n^{2}}{i^{2}}\\&=n^{2}\sum\limits_{i\mid n}\varphi(i)\\&=n^{3}\end{aligned}</script><p><del>其实我都不知道我当时是怎么想到这种操作的（</del></p><p>然后就和上面一样了。</p><h3 id="「Luogu-U18201」分析矿洞"><a href="#「Luogu-U18201」分析矿洞" class="headerlink" title="「Luogu-U18201」分析矿洞"></a><a href="https://www.luogu.org/problemnew/show/U18201" target="_blank" rel="noopener">「Luogu-U18201」分析矿洞</a></h3><p>不知道从哪翻出来的题（</p><p>是某场个人邀请赛的$\text{T}1$<del>，从某种意义上也能看出那场比赛有多么神仙</del>。</p><script type="math/tex; mode=display">\begin{aligned}\sum\limits_{i=1}^{n}\sum\limits_{j=1}^{n}\varphi(\text{gcd}^{2}(i,j))&=\sum\limits_{d=1}^{n}\varphi(d^{2})\sum\limits_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum\limits_{j=1}^{\lfloor\frac{n}{d}\rfloor}[i\perp j]\\&=\sum\limits_{d=1}^{n}\varphi(d^{2})\sum\limits_{i=1}^{\lfloor\frac{n}{d}\rfloor}\sum\limits_{j=1}^{\lfloor\frac{n}{d}\rfloor}\sum\limits_{x\mid i,x\mid j}\mu(x)\\&=\sum\limits_{d=1}^{n}\varphi(d^{2})\sum\limits_{x=1}^{\lfloor\frac{n}{d}\rfloor}\mu(x)\lfloor\cfrac{n}{dx}\rfloor^{2}\\&=\sum\limits_{i=1}^{n}\lfloor\cfrac{n}{i}\rfloor^{2}\sum\limits_{j\mid i}\varphi(j^{2})\mu(\cfrac{i}{j})\\&=\sum\limits_{i=1}^{n}\lfloor\cfrac{n}{i}\rfloor^{2}\sum\limits_{j\mid i}j\varphi(j)\mu(\cfrac{i}{j})\end{aligned}</script><p>设$f_1(n)=n\varphi(n),f_2(n)=\mu(n)$，考虑筛$f=f_1\times f_2$的前缀和。然而，与上面的其它题不同，并不存在一个$g$使我们能够$O(1)$地求出$g$和$f\times g$的前缀和。一种较优的方案是，令$g=1$，$f\times g=(id\cdot\varphi)\times\mu\times 1=id\cdot\varphi$，这样，我们还需要筛出$f_1(n)=n\varphi(n)$的前缀和。</p><p>怎么办？</p><p>再套一层杜教筛！</p><p>然而可能是常数会有些大也可能是我太菜了自带大常数，好像会跑的很慢（</p><p>以及，像这种$n$爆了<code>int</code>的，一定要注意经常取模。<del>因为这个WA了好几次（</del></p><p>最后，源文件$17\text{KB}​$祭，blog翻页祭。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在洛谷日报的待审核列表里翻到了杜教筛的相关内容，打算连着之前的卷积反演啥的一起复习一下。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;抄袭来源&lt;/del&gt;参考文献：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://lx-2003.blog.luogu.org/mobius-inversion&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;铃悬的数学小讲堂——狄利克雷卷积与莫比乌斯反演&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.luogu.org/blog/54745/dls-tql&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浅谈杜教筛&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://lx-2003.blog.luogu.org/dujiao-sieve&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;铃悬的数学小讲堂——杜教筛&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="https://github.com/Challestend/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="数论" scheme="https://github.com/Challestend/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="杜教筛" scheme="https://github.com/Challestend/tags/%E6%9D%9C%E6%95%99%E7%AD%9B/"/>
    
  </entry>
  
  <entry>
    <title>「NOIp2018游记」夢の終わるところ</title>
    <link href="https://github.com/Challestend/noip-2018-notes/"/>
    <id>https://github.com/Challestend/noip-2018-notes/</id>
    <published>2018-11-09T01:40:45.000Z</published>
    <updated>2019-02-13T00:16:28.185Z</updated>
    
    <content type="html"><![CDATA[<p><del>€€£：禁赛警告。</del></p><a id="more"></a><h1 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h1><p>自从一周前放假回来以后，我就开始一颓不振：</p><p><img src="https://i.loli.net/2018/11/09/5be4e6d8c122f.png" alt=""></p><p>明天就是NOIp2018复赛了，大概算是我人生中的第四场NOIp了。上午我和平时一样在颓废<del>，同时看着其他dalao随手切神仙题</del>。然后我看到yemdalao写了一篇<a href="https://www.cnblogs.com/taduro/p/9933329.html" target="_blank" rel="noopener">NOIp2018<del>禁赛记</del>游记</a><del>，想着禁赛真有趣</del>，我就写下了这篇游记。</p><blockquote><p>其他dalao都在机房补文化课而我在颓blog（</p><p>于是，此处以下，Updated on 2018-11-12。</p><blockquote><p>Updated on 2018-11-14</p><p>看了其他dalao的blog发现自己写得实在是太菜了，于是大改一波。</p><p>但就算这样好像也没什么可写的。看到其他dalao用了大段文字来描写自己做题时的心理活动，但是……今年的题都是简单的想一想就会了，难的看一眼就能明白谁打正解谁退役，能有什么心理活动啊（逃</p></blockquote></blockquote><p>中午去超市随便买了点吃的就走了，然后上了车直接就睡过去了，到了CYYZ大概15点了。</p><p>然后一抽考场发现是外校，赛前先<code>rp--</code>。</p><p>然后和wzxdalao分到了一个宿舍。听说他被mhr学长奶了一路，我大概是被传染了吧（</p><p>下午一直在换宿舍，理由都差不多，就是其他学校的同一个学校的想住在同一个宿舍，莫名感觉rp被补回来了（</p><p>除那之外就没啥了，算是颓了一个下午。</p><p>晚上试机，庆幸自己用的是Win7，然后对面机房就是XP，下午的rp看来补得有效（</p><p>试机就xjb打了个st表，还有我平时用的快读板子，当时是都存到E盘了，说不定明天会用得上。</p><p>反正板子是不可能打炸的，这辈子都不可能的。</p><p>因为某些原因，试机时间被推迟了，回来已经过了10点，就直接睡了。</p><h1 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h1><p>早上懒得吃早饭了，就一个人在宿舍里发呆，想着自己肯定什么东西都带全了，结果一到考场发现准考证没带，尴尬.jpg。不过还好，我被允许先进考场了。</p><p>然后一打开E盘发现被清了，只有题目。</p><p>Day1的解压密码是不是就我一个人不懂啊（</p><p>那么于是，到了8：30，我点开今天的题目，定神一看……</p><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a><a href="https://www.luogu.org/problemnew/show/P5019" target="_blank" rel="noopener">T1</a></h2><p>智障单调栈，有不开数组的做法，不过我懒得细想了，反正<code>score+=100</code>。</p><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a><a href="https://www.luogu.org/problemnew/show/P5020" target="_blank" rel="noopener">T2</a></h2><p>稍微想一想不难想到完全背包，<code>score+=100</code>。</p><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a><a href="https://www.luogu.org/problemnew/show/P5021" target="_blank" rel="noopener">T3</a></h2><p>神仙树上操作……切不动切不动。我就打了$m=1$的20分和树是一条链中的5分。</p><p>估分100+100+25=225。</p><p>出考场后……啥啥啥，今天考了三道原题？爆破！把NOIp爆破掉，并从此以后不再接受CCF的公开赛！（</p><p>前两题没什么意外的。不过，是不是是个人T3就能骗到55分啊（</p><p>那我可真是太菜了（</p><p>下午日常发呆，然后晚上是快乐的颓废时间。</p><p>中午买的零食一个下午就全吃完了（</p><h1 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h1><p>早上莫名起不来，然后就没吃早饭。</p><p>这次我东西是真的带全了（</p><p>Day2的解压密码依然不懂，然后是今天的题目：</p><h2 id="T1-1"><a href="#T1-1" class="headerlink" title="T1"></a><a href="https://www.luogu.org/problemnew/show/P5022" target="_blank" rel="noopener">T1</a></h2><p>NOIp开始考基环树了么……不过还算简单，找到环以后暴力断边然后dfs即可。听crydalao说有$O(n)$的做法，不过他调了两个小时还是放弃了。</p><p>现在回想起来，我当时用了个什么智障存图方法啊……先开个邻接表，对每个点<code>std::sort</code>一遍。然后维护一个邻接矩阵处理断边（</p><p>为什么不直接用邻接矩阵呢（</p><h2 id="T2-1"><a href="#T2-1" class="headerlink" title="T2"></a><a href="https://www.luogu.org/problemnew/show/P5023" target="_blank" rel="noopener">T2</a></h2><p>神仙结论题……切不动切不动。随便打了个爆搜找到了$n=2$和$n=3$时的规律。虽然说$n=1$时规律很明显，然而我当时智障忘判断了（</p><h2 id="T3-1"><a href="#T3-1" class="headerlink" title="T3"></a><a href="https://www.luogu.org/problemnew/show/P5024" target="_blank" rel="noopener">T3</a></h2><p>究极神仙题，读完题yy出ddp，然而不会，只拿了$O(nm)$的44分。</p><p>估分100+65+44=204（不存在的，肯定比这个低）。</p><p>这么两天算下来，乐观估计的话，差不多有100+100+25+100+65+44=434分，保守估计应该不会掉到400分以下，应该算是稳了吧……</p><p>不不不不存在的，我一定会六道题全部写炸然后华丽爆零并退役（</p><p>好像其他dalao们都有这样那样乱七八糟的地方出锅了啊……</p><p>下午请假回家开心地颓废。</p><h1 id="Extra-Notes"><a href="#Extra-Notes" class="headerlink" title="Extra Notes"></a>Extra Notes</h1><p>果然是等到NOIp结束后才更新的。</p><p>以及，我比较菜，第一次写游记，写的<del>可能</del>一定很菜，所以……算了，告辞。</p><blockquote><p>Updated on 2018-11-26</p><p>好像有些晚的更新。</p><p>出正式成绩之后被教练赶回教室补了一段时间文化课，感觉刚刚度过了人生中最长的一星期（</p><p>具体成绩差不多是100+100+20+100+65+36=421。</p><p>以上。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;del&gt;€€£：禁赛警告。&lt;/del&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="游记" scheme="https://github.com/Challestend/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="NOIp" scheme="https://github.com/Challestend/tags/NOIp/"/>
    
      <category term="2018" scheme="https://github.com/Challestend/tags/2018/"/>
    
  </entry>
  
  <entry>
    <title>「Luogu-P5009」毒瘤分块题</title>
    <link href="https://github.com/Challestend/luogu-p5009-solution/"/>
    <id>https://github.com/Challestend/luogu-p5009-solution/</id>
    <published>2018-11-08T00:04:22.000Z</published>
    <updated>2019-02-13T00:16:28.185Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.org/problemnew/show/P5009" target="_blank" rel="noopener">传送门</a></p><a id="more"></a><p>从来没做过这么毒瘤的题qaq</p><p>就算看了题解现在还是一脸懵逼qaq</p><p>首先，题目带了分块，我们可以先考虑分块。但是我太菜了不知道分块怎么写，所以我写的线段树qaq</p><p>对$v$的修改相对来说比较简单，我们来重点看对$a$和$b$的修改。假设在某个时刻$t_1$，我们将某个$a_i$加上了$x$，然后又在某个时刻$t_2(t_2&gt;t_1)$，我们要查询之前那个位置上的值，很明显地，答案应该是$v_i+t_1a_ib_i+(t_2-t_1)(a_i+x)b_i$。但是如果真的像这样计算，每次修改就要在这个表达式后面加上一项，很难有效地维护大量的修改。考虑到对$v$的修改比较简单，我们可以通过修改$v$将表达式维持在一个较为简单的形式。形式化地，我们可以找到一个$v_i^\prime$使得$v_i^\prime+t_1(a_i+x)b_i=v+t_1a_ib_i$，并将$v_i$修改至$v_i^\prime$，然后查询的时候我们就可以直接返回$v_i^\prime+t_2(a_i+x)b_i$了。不难发现$v_i^\prime=v_i-t_1xb_i$。</p><p>需要注意的是，因为我们要使用线段树维护，必然会遇到同一个区间被连续修改多次的情况。假设有这样一个区间，区间内$a$的总修改值是$x$，$b$的总修改值是$y$，那么在某一时刻$t$，该区间内所有值的和应该是$\Sigma v_i+t\Sigma (a_i+x)(b_i+y)$。现在我们考虑将$a$加上$z$，此时$\Sigma v_i^\prime+t\Sigma (a_i+x+z)(b_i+y)=\Sigma v_i+t\Sigma (a_i+x)(b_i+y)$，即$\Sigma v_i^\prime=\Sigma v_i-tz\Sigma (b_i+y)$。</p><p>不过，上式中$tz\Sigma (b_i+y)$的$(b_i+y)$指的是修改后的$b_i$的值，我们是肯定不能在下推标记时存储每一个历史版本的$b_i$的。我们考虑拆括号，将上式拆成$tz\Sigma b_i+tzy$，其中$tzy$是一个常数，我们可以直接累加入标记。而至于$tz\Sigma b_i$，考虑到每层节点的$\Sigma b_i$都不同，我们可以维护一个$B$，意思是$\Sigma v_i+=B\Sigma b_i$，每次修改时$B+=tz$。当然，我们还需要一个标记来记录对$a$自身的修改。对$b$的修改也是类似的。</p><p>然后是毒瘤的下推标记。</p><div><div class="fold_hider"><div class="close hider_title">Toggle Code</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">addv[son]+=A[father]*suma[son]+B[father]*sumb[son]+addv[father];</span><br><span class="line"><span class="comment">//就是上面这句qaq现在还是一脸懵逼qaq</span></span><br><span class="line">A[son]+=A[father];</span><br><span class="line">B[son]+=B[father];</span><br><span class="line">adda[son]+=adda[father];</span><br><span class="line">addb[son]+=addf[father];</span><br></pre></td></tr></table></figure></div></div><p>其实我也不知道我上面在扯些啥，所以以下是代码<del>，反正应该没人能看懂我的清奇写法（</del></p><div><div class="fold_hider"><div class="close hider_title">Toggle Code</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> re register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxm 200005</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 100000007</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> cltstream&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> size 1048576</span></span><br><span class="line">    <span class="keyword">char</span> cltin[size+<span class="number">1</span>],*ih=cltin,*it=cltin;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">char</span> <span class="title">gc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">ifdef</span> ONLINE_JUDGE</span></span><br><span class="line">            <span class="keyword">if</span>(ih==it)&#123;</span><br><span class="line">                it=(ih=cltin)+fread(cltin,<span class="number">1</span>,size,<span class="built_in">stdin</span>);</span><br><span class="line">                <span class="keyword">if</span>(ih==it)</span><br><span class="line">                    <span class="keyword">return</span> EOF;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> *ih++;</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">            <span class="keyword">return</span> getchar();</span><br><span class="line">        <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> cltout[size+<span class="number">1</span>],*oh=cltout,*ot=cltout+size;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pc</span><span class="params">(<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(oh==ot)&#123;</span><br><span class="line">            fwrite(cltout,<span class="number">1</span>,size,<span class="built_in">stdout</span>);</span><br><span class="line">            oh=cltout;</span><br><span class="line">        &#125;</span><br><span class="line">        *oh++=c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> clop() fwrite(cltstream::cltout,1,cltstream::oh-cltstream::cltout,stdout)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">undef</span> size</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _tp&gt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">read</span><span class="params">(_tp&amp; x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sn=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">char</span> c=gc();</span><br><span class="line">        <span class="keyword">for</span>(;c!=<span class="number">45</span>&amp;&amp;(c&lt;<span class="number">48</span>||c&gt;<span class="number">57</span>)&amp;&amp;c!=EOF;c=gc());</span><br><span class="line">        <span class="keyword">if</span>(c==<span class="number">45</span>&amp;&amp;c!=EOF)</span><br><span class="line">            sn=<span class="number">-1</span>,c=gc();</span><br><span class="line">        <span class="keyword">for</span>(x=<span class="number">0</span>;c&gt;=<span class="number">48</span>&amp;&amp;c&lt;=<span class="number">57</span>&amp;&amp;c!=EOF;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(c^<span class="number">48</span>),c=gc());</span><br><span class="line">        x*=sn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> _tp&gt;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(_tp x,<span class="keyword">char</span> text=<span class="number">-1</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;<span class="number">0</span>)</span><br><span class="line">            pc(<span class="number">45</span>),x=-x;</span><br><span class="line">        <span class="keyword">if</span>(!x)</span><br><span class="line">            pc(<span class="number">48</span>);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">int</span> digit[<span class="number">22</span>];</span><br><span class="line">            <span class="keyword">for</span>(digit[<span class="number">0</span>]=<span class="number">0</span>;x;digit[++digit[<span class="number">0</span>]]=x%<span class="number">10</span>,x/=<span class="number">10</span>);</span><br><span class="line">            <span class="keyword">for</span>(;digit[<span class="number">0</span>];pc(digit[digit[<span class="number">0</span>]--]^<span class="number">48</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(text&gt;=<span class="number">0</span>)</span><br><span class="line">            pc(text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> sumv[(maxn&lt;&lt;<span class="number">2</span>)+<span class="number">1</span>],suma[(maxn&lt;&lt;<span class="number">2</span>)+<span class="number">1</span>],sumb[(maxn&lt;&lt;<span class="number">2</span>)+<span class="number">1</span>],sump[(maxn&lt;&lt;<span class="number">2</span>)+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> A[(maxn&lt;&lt;<span class="number">2</span>)+<span class="number">1</span>],B[(maxn&lt;&lt;<span class="number">2</span>)+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> addv[(maxn&lt;&lt;<span class="number">2</span>)+<span class="number">1</span>],adda[(maxn&lt;&lt;<span class="number">2</span>)+<span class="number">1</span>],addb[(maxn&lt;&lt;<span class="number">2</span>)+<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushDown</span><span class="params">(<span class="keyword">int</span> cur,<span class="keyword">int</span> ln,<span class="keyword">int</span> rn)</span></span>&#123;</span><br><span class="line">    sumv[cur&lt;&lt;<span class="number">1</span>]=(sumv[cur&lt;&lt;<span class="number">1</span>]+<span class="number">1L</span>L*A[cur]*suma[cur&lt;&lt;<span class="number">1</span>]%mod)%mod;</span><br><span class="line">    sumv[cur&lt;&lt;<span class="number">1</span>]=(sumv[cur&lt;&lt;<span class="number">1</span>]+<span class="number">1L</span>L*B[cur]*sumb[cur&lt;&lt;<span class="number">1</span>]%mod)%mod;</span><br><span class="line">    sumv[cur&lt;&lt;<span class="number">1</span>]=(sumv[cur&lt;&lt;<span class="number">1</span>]+<span class="number">1L</span>L*ln*addv[cur]%mod)%mod;</span><br><span class="line">    sump[cur&lt;&lt;<span class="number">1</span>]=(sump[cur&lt;&lt;<span class="number">1</span>]+<span class="number">1L</span>L*adda[cur]*sumb[cur&lt;&lt;<span class="number">1</span>]%mod)%mod;</span><br><span class="line">    sump[cur&lt;&lt;<span class="number">1</span>]=(sump[cur&lt;&lt;<span class="number">1</span>]+<span class="number">1L</span>L*addb[cur]*suma[cur&lt;&lt;<span class="number">1</span>]%mod)%mod;</span><br><span class="line">    sump[cur&lt;&lt;<span class="number">1</span>]=(sump[cur&lt;&lt;<span class="number">1</span>]+<span class="number">1L</span>L*adda[cur]*addb[cur]%mod*ln%mod)%mod;</span><br><span class="line">    suma[cur&lt;&lt;<span class="number">1</span>]=(suma[cur&lt;&lt;<span class="number">1</span>]+<span class="number">1L</span>L*ln*adda[cur]%mod)%mod;</span><br><span class="line">    sumb[cur&lt;&lt;<span class="number">1</span>]=(sumb[cur&lt;&lt;<span class="number">1</span>]+<span class="number">1L</span>L*ln*addb[cur]%mod)%mod;</span><br><span class="line">    addv[cur&lt;&lt;<span class="number">1</span>]=(addv[cur&lt;&lt;<span class="number">1</span>]+<span class="number">1L</span>L*A[cur]*adda[cur&lt;&lt;<span class="number">1</span>]%mod)%mod;</span><br><span class="line">    addv[cur&lt;&lt;<span class="number">1</span>]=(addv[cur&lt;&lt;<span class="number">1</span>]+<span class="number">1L</span>L*B[cur]*addb[cur&lt;&lt;<span class="number">1</span>]%mod)%mod;</span><br><span class="line">    addv[cur&lt;&lt;<span class="number">1</span>]=(addv[cur&lt;&lt;<span class="number">1</span>]+addv[cur])%mod;</span><br><span class="line">    A[cur&lt;&lt;<span class="number">1</span>]=(A[cur&lt;&lt;<span class="number">1</span>]+A[cur])%mod;</span><br><span class="line">    B[cur&lt;&lt;<span class="number">1</span>]=(B[cur&lt;&lt;<span class="number">1</span>]+B[cur])%mod;</span><br><span class="line">    adda[cur&lt;&lt;<span class="number">1</span>]=(adda[cur&lt;&lt;<span class="number">1</span>]+adda[cur])%mod;</span><br><span class="line">    addb[cur&lt;&lt;<span class="number">1</span>]=(addb[cur&lt;&lt;<span class="number">1</span>]+addb[cur])%mod;</span><br><span class="line">    sumv[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=(sumv[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+<span class="number">1L</span>L*A[cur]*suma[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]%mod)%mod;</span><br><span class="line">    sumv[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=(sumv[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+<span class="number">1L</span>L*B[cur]*sumb[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]%mod)%mod;</span><br><span class="line">    sumv[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=(sumv[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+<span class="number">1L</span>L*rn*addv[cur]%mod)%mod;</span><br><span class="line">    sump[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=(sump[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+<span class="number">1L</span>L*adda[cur]*sumb[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]%mod)%mod;</span><br><span class="line">    sump[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=(sump[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+<span class="number">1L</span>L*addb[cur]*suma[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]%mod)%mod;</span><br><span class="line">    sump[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=(sump[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+<span class="number">1L</span>L*adda[cur]*addb[cur]%mod*rn%mod)%mod;</span><br><span class="line">    suma[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=(suma[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+<span class="number">1L</span>L*rn*adda[cur]%mod)%mod;</span><br><span class="line">    sumb[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=(sumb[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+<span class="number">1L</span>L*rn*addb[cur]%mod)%mod;</span><br><span class="line">    addv[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=(addv[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+<span class="number">1L</span>L*A[cur]*adda[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]%mod)%mod;</span><br><span class="line">    addv[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=(addv[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+<span class="number">1L</span>L*B[cur]*addb[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]%mod)%mod;</span><br><span class="line">    addv[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=(addv[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+addv[cur])%mod;</span><br><span class="line">    A[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=(A[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+A[cur])%mod;</span><br><span class="line">    B[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=(B[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+B[cur])%mod;</span><br><span class="line">    adda[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=(adda[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+adda[cur])%mod;</span><br><span class="line">    addb[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]=(addb[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+addb[cur])%mod;</span><br><span class="line">    A[cur]=B[cur]=addv[cur]=adda[cur]=addb[cur]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">pushUp</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;</span><br><span class="line">    sumv[cur]=(sumv[cur&lt;&lt;<span class="number">1</span>]+sumv[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>])%mod;</span><br><span class="line">    suma[cur]=(suma[cur&lt;&lt;<span class="number">1</span>]+suma[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>])%mod;</span><br><span class="line">    sumb[cur]=(sumb[cur&lt;&lt;<span class="number">1</span>]+sumb[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>])%mod;</span><br><span class="line">    sump[cur]=(sump[cur&lt;&lt;<span class="number">1</span>]+sump[cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>])%mod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> cur,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        cltstream::read(sumv[cur]);</span><br><span class="line">        cltstream::read(suma[cur]);</span><br><span class="line">        cltstream::read(sumb[cur]);</span><br><span class="line">        sumv[cur]=(sumv[cur]%mod+mod)%mod;</span><br><span class="line">        suma[cur]=(suma[cur]%mod+mod)%mod;</span><br><span class="line">        sumb[cur]=(sumb[cur]%mod+mod)%mod;</span><br><span class="line">        sump[cur]=<span class="number">1L</span>L*suma[cur]*sumb[cur]%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        build(cur&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">        build(cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">        pushUp(cur);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> t,<span class="keyword">int</span> cur,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=L&amp;&amp;r&lt;=R)</span><br><span class="line">        <span class="keyword">return</span> (sumv[cur]+<span class="number">1L</span>L*t*sump[cur]%mod)%mod;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>,res=<span class="number">0</span>;</span><br><span class="line">        pushDown(cur,mid-l+<span class="number">1</span>,r-mid);</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid)</span><br><span class="line">            res=(res+query(L,R,t,cur&lt;&lt;<span class="number">1</span>,l,mid))%mod;</span><br><span class="line">        <span class="keyword">if</span>(R&gt;mid)</span><br><span class="line">            res=(res+query(L,R,t,cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r))%mod;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modifyV</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> x,<span class="keyword">int</span> cur,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=L&amp;&amp;r&lt;=R)&#123;</span><br><span class="line">        sumv[cur]=(sumv[cur]+<span class="number">1L</span>L*(r-l+<span class="number">1</span>)*x%mod)%mod;</span><br><span class="line">        addv[cur]=(addv[cur]+x)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        pushDown(cur,mid-l+<span class="number">1</span>,r-mid);</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid)</span><br><span class="line">            modifyV(L,R,x,cur&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">        <span class="keyword">if</span>(R&gt;mid)</span><br><span class="line">            modifyV(L,R,x,cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">        pushUp(cur);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modifyA</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> t,<span class="keyword">int</span> x,<span class="keyword">int</span> cur,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=L&amp;&amp;r&lt;=R)&#123;</span><br><span class="line">        sumv[cur]=(sumv[cur]+(<span class="number">-1L</span>L*x*t%mod*sumb[cur]%mod+mod)%mod)%mod;</span><br><span class="line">        suma[cur]=(suma[cur]+<span class="number">1L</span>L*(r-l+<span class="number">1</span>)*x%mod)%mod;</span><br><span class="line">        sump[cur]=(sump[cur]+<span class="number">1L</span>L*sumb[cur]*x%mod)%mod;</span><br><span class="line">        B[cur]=(B[cur]+(<span class="number">-1L</span>L*x*t%mod+mod)%mod)%mod;</span><br><span class="line">        addv[cur]=(addv[cur]+(<span class="number">-1L</span>L*x*t%mod*addb[cur]%mod+mod)%mod)%mod;</span><br><span class="line">        adda[cur]=(adda[cur]+x)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        pushDown(cur,mid-l+<span class="number">1</span>,r-mid);</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid)</span><br><span class="line">            modifyA(L,R,t,x,cur&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">        <span class="keyword">if</span>(R&gt;mid)</span><br><span class="line">            modifyA(L,R,t,x,cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">        pushUp(cur);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modifyB</span><span class="params">(<span class="keyword">int</span> L,<span class="keyword">int</span> R,<span class="keyword">int</span> t,<span class="keyword">int</span> x,<span class="keyword">int</span> cur,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=L&amp;&amp;r&lt;=R)&#123;</span><br><span class="line">        sumv[cur]=(sumv[cur]+(<span class="number">-1L</span>L*x*t%mod*suma[cur]%mod+mod)%mod)%mod;</span><br><span class="line">        sumb[cur]=(sumb[cur]+<span class="number">1L</span>L*(r-l+<span class="number">1</span>)*x%mod)%mod;</span><br><span class="line">        sump[cur]=(sump[cur]+<span class="number">1L</span>L*suma[cur]*x%mod)%mod;</span><br><span class="line">        A[cur]=(A[cur]+(<span class="number">-1L</span>L*x*t%mod+mod)%mod)%mod;</span><br><span class="line">        addv[cur]=(addv[cur]+(<span class="number">-1L</span>L*x*t%mod*adda[cur]%mod+mod)%mod)%mod;</span><br><span class="line">        addb[cur]=(addb[cur]+x)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        pushDown(cur,mid-l+<span class="number">1</span>,r-mid);</span><br><span class="line">        <span class="keyword">if</span>(L&lt;=mid)</span><br><span class="line">            modifyB(L,R,t,x,cur&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">        <span class="keyword">if</span>(R&gt;mid)</span><br><span class="line">            modifyB(L,R,t,x,cur&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">        pushUp(cur);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cltstream::read(n);</span><br><span class="line">    cltstream::read(m);</span><br><span class="line">    build(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">for</span>(re <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=m;++i)&#123;</span><br><span class="line">        <span class="keyword">int</span> opt,t,l,r,x;</span><br><span class="line">        cltstream::read(opt);</span><br><span class="line">        cltstream::read(t);</span><br><span class="line">        cltstream::read(l);</span><br><span class="line">        cltstream::read(r);</span><br><span class="line">        <span class="keyword">switch</span>(opt)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                cltstream::write(query(l,r,t,<span class="number">1</span>,<span class="number">1</span>,n),<span class="number">10</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                cltstream::read(x);</span><br><span class="line">                modifyA(l,r,t,(x%mod+mod)%mod,<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                cltstream::read(x);</span><br><span class="line">                modifyB(l,r,t,(x%mod+mod)%mod,<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                cltstream::read(x);</span><br><span class="line">                modifyV(l,r,(x%mod+mod)%mod,<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    clop();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p>大概是我太菜了不适合做这种毒瘤题吧qaq</p><p><img src="https://i.loli.net/2018/11/08/5be38edf529ca.jpg" alt=""></p><p>距 <strong>在NOIp2018爆零</strong> 还剩 <strong>1 天</strong>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://www.luogu.org/problemnew/show/P5009&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="https://github.com/Challestend/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
      <category term="洛谷" scheme="https://github.com/Challestend/tags/%E6%B4%9B%E8%B0%B7/"/>
    
      <category term="线段树" scheme="https://github.com/Challestend/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
</feed>
